apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.vsAgentName }}
  namespace: {{ .Values.vsAgentNamespace }}
  labels:
    app: {{ .Values.vsAgentName }}
spec:
  selector:
    app: {{ .Values.vsAgentName }}
  ports:
  - name: didcomm
    port: {{ .Values.agentPort }}
    targetPort: {{ .Values.agentPort }}
    protocol: TCP
  - name: admin
    port: {{ .Values.adminPort }}
    targetPort: {{ .Values.adminPort }}
    protocol: TCP
---
# Private ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: private-{{ .Values.vsAgentName }}
  namespace: {{ .Values.vsAgentNamespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/whitelist-source-range: "{{ .Values.ingress.privacy.whitelist }}"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - a.{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}
      secretName: private-{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}-cert
  rules:
    - host: a.{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.vsAgentName }}
                 port:
                   number: {{ .Values.adminPort }}
---
# Public ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: public-{{ .Values.vsAgentName }}
  namespace: {{ .Values.vsAgentNamespace }}
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/enable-cors: "{{ .Values.ingress.public.enableCors | default "true" }}"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}
      secretName: public.{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}-cert
  rules:
    - host: {{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                 name: {{ .Values.vsAgentName }}
                 port:
                   number: {{ .Values.agentPort }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.vsAgentName }}-vsa-pv
  namespace: {{ .Values.vsAgentNamespace }}
  labels:
    app: {{ .Values.vsAgentName }}
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  storageClassName: {{ .Values.storage.storageClassName | default "csi-cinder-high-speed" }}
  resources:
    requests:
      storage: {{ .Values.storage.size | default "1Gi" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
   name: {{ .Values.vsAgentName }}
   namespace: {{ .Values.vsAgentNamespace }}
spec:
   serviceName: {{ .Values.vsAgentName }}
   replicas: {{ .Values.vsAgentReplicas }}
   selector:
      matchLabels:
         app: {{ .Values.vsAgentName }}
   template:
      metadata:
         labels:
            app: {{ .Values.vsAgentName }}
      spec:
         containers:
         -  name: {{ .Values.vsAgentName }}-sa-container
            image: "{{ .Values.images.agent.repository }}:{{ .Values.images.agent.tag }}"
            imagePullPolicy: Always
            env:
            - name: AGENT_PORT
              value: "{{ .Values.agentPort }}"
            - name: ADMIN_PORT
              value: "{{ .Values.adminPort }}"
            - name: AGENT_ENDPOINT
              value: "wss://a.{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}:443"
            - name: AGENT_LABEL
              value: {{ .Values.agentName }}
            - name: AGENT_INVITATION_IMAGE_URL
              value: "{{ .Values.images.invitationUrl }}"
            - name: EVENTS_BASE_URL
              value: "{{ .Values.eventsBaseUrl }}"
            - name: REDIRECT_DEFAULT_URL_TO_INVITATION_URL
              value: "{{ .Values.redirectDefaultUrlToInvitationUrl }}"
            - name: AGENT_PUBLIC_DID
              value: "did:web:a.{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}"
            - name: ANONCREDS_SERVICE_BASE_URL
              value: "https://{{ .Values.vsAgentName }}.{{ .Values.vsAgentDomain }}"
            {{- if .Values.postgresql.enabled }}
            - name: POSTGRES_HOST
              value: {{ .Values.postgresql.auth.host }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.auth.password }}
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: REDIS_HOST
              value: "{{ .Release.vsAgentName }}-redis-master"
            {{- end }}
            {{- if .Values.redis.password }}
            - name: REDIS_PASSWORD
              value: "{{ .Values.redis.password }}"
            {{- end }}
{{- with .Values.extraEnv }}
{{- toYaml . | nindent 12 }}
{{- end }}
            ports:
            -  containerPort: {{ .Values.adminPort }}
            -  containerPort: {{ .Values.agentPort }}
            volumeMounts:
            - name: {{ .Values.vsAgentName }}-vsa-pv
              mountPath: /root/.afj

         volumes:
         - name: {{ .Values.vsAgentName }}-vsa-pv
           persistentVolumeClaim:
             claimName: {{ .Values.vsAgentName }}-vsa-pv
