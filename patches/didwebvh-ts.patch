diff --git a/dist/browser/index.js b/dist/browser/index.js
index 33306f9b7f6ab5e2170ba0cd9997e9ee8279d999..ab6fa7ced11b1d7b65c3049ba3c0149ff4f93202 100644
--- a/dist/browser/index.js
+++ b/dist/browser/index.js
@@ -1,8 +1,8 @@
-var o0=Object.create;var{getPrototypeOf:NN,defineProperty:g0,getOwnPropertyNames:KN}=Object;var $N=Object.prototype.hasOwnProperty;var YN=(N,K,$)=>{$=N!=null?o0(NN(N)):{};let Y=K||!N||!N.__esModule?g0($,"default",{value:N,enumerable:!0}):$;for(let U of KN(N))if(!$N.call(Y,U))g0(Y,U,{get:()=>N[U],enumerable:!0});return Y};var UN=((N)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(N,{get:(K,$)=>(typeof require!=="undefined"?require:K)[$]}):N)(function(N){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+N+'" is not supported')});function M(N){var K="";return $(N),K;function $(U){if(U===null||typeof U!=="object"||U.toJSON!=null)K+=JSON.stringify(U);else if(Array.isArray(U)){K+="[";var Q=!1;U.forEach(function(Z){if(Q)K+=",";if(Q=!0,Z===void 0)Z=null;$(Z)}),K+="]"}else{K+="{";var J=Object.keys(U).filter(function(Z){return U[Z]!==void 0}).sort();J.forEach(function(Z,q){return Y(U,Z,q)}),K+="}"}}function Y(U,Q,J){if(J>0)K+=",";K+=JSON.stringify(Q),K+=":",$(U[Q])}}var ZN=(N)=>{return Array.from(N).map((K)=>K.toString(16).padStart(2,"0")).join("")};var k0=(N,K)=>{if(!B.isBrowser)return Buffer.from(N,K);if(K==="base64"){let $=atob(N);return new Uint8Array($.length).map((Y,U)=>$.charCodeAt(U))}return new TextEncoder().encode(N)},D0=(N,K)=>{if(!B.isBrowser)return Buffer.from(N).toString(K);if(K==="hex")return ZN(N);if(K==="base64"){let $=String.fromCharCode(...N);return btoa($)}return new TextDecoder().decode(N)},d=(...N)=>{if(!B.isBrowser)return Buffer.concat(N);let K=N.reduce((U,Q)=>U+Q.length,0),$=new Uint8Array(K),Y=0;for(let U of N)$.set(U,Y),Y+=U.length;return $};var _0=typeof window!=="undefined",N0=(N)=>{if(_0)return;try{return process?.env?.[N]}catch{return}},B={getEnvValue:N0,isBrowser:_0,isTestEnvironment:N0("NODE_ENV")==="test",logResolves:N0("LOG_RESOLVES")==="true",getVerificationMethods:()=>{let N=N0("DID_VERIFICATION_METHODS");if(!N)return[];try{let K=k0(N,"base64");return JSON.parse(D0(K))}catch{return[]}}};var w="{SCID}",m="webvh",S0=["https://www.w3.org/ns/did/v1","https://w3id.org/security/multikey/v1"];var C0;(($)=>{$.BASE64URL_NO_PAD="u";$.BASE58_BTC="z"})(C0||={});var K0={["u"]:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",["z"]:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"};function QN(N){return Buffer.from(N).toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function JN(N){let K=N.length%4===0?0:4-N.length%4,$=N.replace(/-/g,"+").replace(/_/g,"/")+"=".repeat(K),Y=atob($),U=new Uint8Array(Y.length);for(let Q=0;Q<Y.length;Q++)U[Q]=Y.charCodeAt(Q);return U}function $0(N){let K=K0.z,$=0;for(let Q=0;Q<N.length&&N[Q]===0;Q++)$++;let Y=0n;for(let Q=0;Q<N.length;Q++)Y=Y*256n+BigInt(N[Q]);let U="";while(Y>0n){let Q=Number(Y%58n);Y=Y/58n,U=K[Q]+U}return"1".repeat($)+U}function XN(N){let K=K0.z,$=0;for(let Q=0;Q<N.length&&N[Q]==="1";Q++)$++;let Y=0n;for(let Q=$;Q<N.length;Q++){let J=N[Q],Z=K.indexOf(J);if(Z===-1)throw new Error(`Invalid Base58 character: ${J}`);Y=Y*58n+BigInt(Z)}let U=[];while(Y>0n)U.unshift(Number(Y%256n)),Y=Y/256n;return new Uint8Array([...new Array($).fill(0),...U])}function qN(N,K="u"){let $;switch(K){case"u":$=QN(N);break;case"z":$=$0(N);break;default:throw new Error(`Unsupported multibase encoding: ${K}`)}return`${K}${$}`}function H(N){if(!N||N.length<2)throw new Error("Invalid multibase string: too short");let K=N[0],$=N.slice(1),Y;switch(K){case"u":Y=JN($);break;case"z":Y=XN($);break;default:throw new Error(`Unsupported multibase encoding prefix: ${K}`)}return{bytes:Y,encoding:K}}var RN={[18]:32,[32]:48,[22]:32,[21]:48};function M0(N){let K=[];while(N>=128)K.push(N&127|128),N>>>=7;return K.push(N&127),new Uint8Array(K)}function x0(N,K){let $=RN[K];if(N.length!==$)throw new Error(`Invalid digest length for algorithm ${K.toString(16)}: expected ${$}, got ${N.length}`);let Y=M0(K),U=M0(N.length),Q=new Uint8Array(Y.length+U.length+N.length);return Q.set(Y,0),Q.set(U,Y.length),Q.set(N,Y.length+U.length),Q}/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */function ON(N){return N instanceof Uint8Array||ArrayBuffer.isView(N)&&N.constructor.name==="Uint8Array"}function Y0(N,...K){if(!ON(N))throw new Error("Uint8Array expected");if(K.length>0&&!K.includes(N.length))throw new Error("Uint8Array expected of length "+K+", got length="+N.length)}function F0(N,K=!0){if(N.destroyed)throw new Error("Hash instance has been destroyed");if(K&&N.finished)throw new Error("Hash#digest() has already been called")}function L0(N,K){Y0(N);let $=K.outputLen;if(N.length<$)throw new Error("digestInto() expects output buffer of length at least "+$)}function i(...N){for(let K=0;K<N.length;K++)N[K].fill(0)}function U0(N){return new DataView(N.buffer,N.byteOffset,N.byteLength)}function C(N,K){return N<<32-K|N>>>K}function PN(N){if(typeof N!=="string")throw new Error("string expected");return new Uint8Array(new TextEncoder().encode(N))}function G0(N){if(typeof N==="string")N=PN(N);return Y0(N),N}class I0{}function V0(N){let K=(Y)=>N().update(G0(Y)).digest(),$=N();return K.outputLen=$.outputLen,K.blockLen=$.blockLen,K.create=()=>N(),K}function zN(N,K,$,Y){if(typeof N.setBigUint64==="function")return N.setBigUint64(K,$,Y);let U=BigInt(32),Q=BigInt(4294967295),J=Number($>>U&Q),Z=Number($&Q),q=Y?4:0,R=Y?0:4;N.setUint32(K+q,J,Y),N.setUint32(K+R,Z,Y)}function u0(N,K,$){return N&K^~N&$}function A0(N,K,$){return N&K^N&$^K&$}class w0 extends I0{constructor(N,K,$,Y){super();this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.blockLen=N,this.outputLen=K,this.padOffset=$,this.isLE=Y,this.buffer=new Uint8Array(N),this.view=U0(this.buffer)}update(N){F0(this),N=G0(N),Y0(N);let{view:K,buffer:$,blockLen:Y}=this,U=N.length;for(let Q=0;Q<U;){let J=Math.min(Y-this.pos,U-Q);if(J===Y){let Z=U0(N);for(;Y<=U-Q;Q+=Y)this.process(Z,Q);continue}if($.set(N.subarray(Q,Q+J),this.pos),this.pos+=J,Q+=J,this.pos===Y)this.process(K,0),this.pos=0}return this.length+=N.length,this.roundClean(),this}digestInto(N){F0(this),L0(N,this),this.finished=!0;let{buffer:K,view:$,blockLen:Y,isLE:U}=this,{pos:Q}=this;if(K[Q++]=128,i(this.buffer.subarray(Q)),this.padOffset>Y-Q)this.process($,0),Q=0;for(let X=Q;X<Y;X++)K[X]=0;zN($,Y-8,BigInt(this.length*8),U),this.process($,0);let J=U0(N),Z=this.outputLen;if(Z%4)throw new Error("_sha2: outputLen should be aligned to 32bit");let q=Z/4,R=this.get();if(q>R.length)throw new Error("_sha2: outputLen bigger than state");for(let X=0;X<q;X++)J.setUint32(4*X,R[X],U)}digest(){let{buffer:N,outputLen:K}=this;this.digestInto(N);let $=N.slice(0,K);return this.destroy(),$}_cloneInto(N){N||(N=new this.constructor),N.set(...this.get());let{blockLen:K,buffer:$,length:Y,finished:U,destroyed:Q,pos:J}=this;if(N.destroyed=Q,N.finished=U,N.length=Y,N.pos=J,Y%K)N.buffer.set($);return N}clone(){return this._cloneInto()}}var u=Uint32Array.from([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]);var kN=Uint32Array.from([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),f=new Uint32Array(64);class f0 extends w0{constructor(N=32){super(64,N,8,!1);this.A=u[0]|0,this.B=u[1]|0,this.C=u[2]|0,this.D=u[3]|0,this.E=u[4]|0,this.F=u[5]|0,this.G=u[6]|0,this.H=u[7]|0}get(){let{A:N,B:K,C:$,D:Y,E:U,F:Q,G:J,H:Z}=this;return[N,K,$,Y,U,Q,J,Z]}set(N,K,$,Y,U,Q,J,Z){this.A=N|0,this.B=K|0,this.C=$|0,this.D=Y|0,this.E=U|0,this.F=Q|0,this.G=J|0,this.H=Z|0}process(N,K){for(let X=0;X<16;X++,K+=4)f[X]=N.getUint32(K,!1);for(let X=16;X<64;X++){let k=f[X-15],D=f[X-2],P=C(k,7)^C(k,18)^k>>>3,I=C(D,17)^C(D,19)^D>>>10;f[X]=I+f[X-7]+P+f[X-16]|0}let{A:$,B:Y,C:U,D:Q,E:J,F:Z,G:q,H:R}=this;for(let X=0;X<64;X++){let k=C(J,6)^C(J,11)^C(J,25),D=R+k+u0(J,Z,q)+kN[X]+f[X]|0,I=(C($,2)^C($,13)^C($,22))+A0($,Y,U)|0;R=q,q=Z,Z=J,J=Q+D|0,Q=U,U=Y,Y=$,$=D+I|0}$=$+this.A|0,Y=Y+this.B|0,U=U+this.C|0,Q=Q+this.D|0,J=J+this.E|0,Z=Z+this.F|0,q=q+this.G|0,R=R+this.H|0,this.set($,Y,U,Q,J,Z,q,R)}roundClean(){i(f)}destroy(){this.set(0,0,0,0,0,0,0,0),i(this.buffer)}}var E0=V0(()=>new f0);async function _(N){return E0(N)}var v0=typeof process!=="undefined"&&typeof window==="undefined"&&!!(process.versions&&process.versions.node||process.versions.bun),y0=["node","fs"].join(":"),r=null,Z0=null,b0=async()=>{if(!v0)throw new Error("Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)");if(r)return r;if(Z0)return Z0;return Z0=(async()=>{let N=globalThis.require;if(typeof N==="function"){try{let K=N(y0);return r=K,K}catch{}try{let K=N("fs");return r=K,K}catch{}}try{let K=await import(y0);return r=K,K}catch{}try{let K=await import("fs");return r=K,K}catch{}throw new Error("Filesystem access is not available in this environment (unable to load fs)")})(),Z0},DN=(N)=>{try{let K=N.includes("localhost")?"http":"https";return new URL(`${K}://${N}`).hostname}catch{return N}};var xN=async(N,K)=>{let $=await b0();try{let Y=N.substring(0,N.lastIndexOf("/"));if(Y&&!$.existsSync(Y))$.mkdirSync(Y,{recursive:!0});$.writeFileSync(N,JSON.stringify(K[0])+`
+var o0=Object.create;var{getPrototypeOf:NN,defineProperty:g0,getOwnPropertyNames:KN}=Object;var $N=Object.prototype.hasOwnProperty;var YN=(N,K,$)=>{$=N!=null?o0(NN(N)):{};let Y=K||!N||!N.__esModule?g0($,"default",{value:N,enumerable:!0}):$;for(let U of KN(N))if(!$N.call(Y,U))g0(Y,U,{get:()=>N[U],enumerable:!0});return Y};var UN=((N)=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(N,{get:(K,$)=>(typeof require!=="undefined"?require:K)[$]}):N)(function(N){if(typeof require!=="undefined")return require.apply(this,arguments);throw Error('Dynamic require of "'+N+'" is not supported')});function M(N){var K="";return $(N),K;function $(U){if(U===null||typeof U!=="object"||U.toJSON!=null)K+=JSON.stringify(U);else if(Array.isArray(U)){K+="[";var Q=!1;U.forEach(function(Z){if(Q)K+=",";if(Q=!0,Z===void 0)Z=null;$(Z)}),K+="]"}else{K+="{";var J=Object.keys(U).filter(function(Z){return U[Z]!==void 0}).sort();J.forEach(function(Z,q){return Y(U,Z,q)}),K+="}"}}function Y(U,Q,J){if(J>0)K+=",";K+=JSON.stringify(Q),K+=":",$(U[Q])}}var ZN=(N)=>{return Array.from(N).map((K)=>K.toString(16).padStart(2,"0")).join("")};var k0=(N,K)=>{if(!B.isBrowser)return Buffer.from(N,K);if(K==="base64"){let $=atob(N);return new Uint8Array($.length).map((Y,U)=>$.charCodeAt(U))}return new TextEncoder().encode(N)},D0=(N,K)=>{if(!B.isBrowser)return Buffer.from(N).toString(K);if(K==="hex")return ZN(N);if(K==="base64"){let $=String.fromCharCode(...N);return btoa($)}return new TextDecoder().decode(N)},d=(...N)=>{if(!B.isBrowser)return Buffer.concat(N);let K=N.reduce((U,Q)=>U+Q.length,0),$=new Uint8Array(K),Y=0;for(let U of N)$.set(U,Y),Y+=U.length;return $};var _0=typeof window!=="undefined",N0=(N)=>{if(_0)return;try{return process?.env?.[N]}catch{return}},B={getEnvValue:N0,isBrowser:_0,isTestEnvironment:N0("NODE_ENV")==="test",logResolves:N0("LOG_RESOLVES")==="true",getVerificationMethods:()=>{let N=N0("DID_VERIFICATION_METHODS");if(!N)return[];try{let K=k0(N,"base64");return JSON.parse(D0(K))}catch{return[]}}};var w="{SCID}",r="webvh",S0=["https://www.w3.org/ns/did/v1","https://w3id.org/security/multikey/v1"];var C0;(($)=>{$.BASE64URL_NO_PAD="u";$.BASE58_BTC="z"})(C0||={});var K0={["u"]:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",["z"]:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"};function QN(N){return Buffer.from(N).toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}function JN(N){let K=N.length%4===0?0:4-N.length%4,$=N.replace(/-/g,"+").replace(/_/g,"/")+"=".repeat(K),Y=atob($),U=new Uint8Array(Y.length);for(let Q=0;Q<Y.length;Q++)U[Q]=Y.charCodeAt(Q);return U}function $0(N){let K=K0.z,$=0;for(let Q=0;Q<N.length&&N[Q]===0;Q++)$++;let Y=0n;for(let Q=0;Q<N.length;Q++)Y=Y*256n+BigInt(N[Q]);let U="";while(Y>0n){let Q=Number(Y%58n);Y=Y/58n,U=K[Q]+U}return"1".repeat($)+U}function XN(N){let K=K0.z,$=0;for(let Q=0;Q<N.length&&N[Q]==="1";Q++)$++;let Y=0n;for(let Q=$;Q<N.length;Q++){let J=N[Q],Z=K.indexOf(J);if(Z===-1)throw new Error(`Invalid Base58 character: ${J}`);Y=Y*58n+BigInt(Z)}let U=[];while(Y>0n)U.unshift(Number(Y%256n)),Y=Y/256n;return new Uint8Array([...new Array($).fill(0),...U])}function qN(N,K="u"){let $;switch(K){case"u":$=QN(N);break;case"z":$=$0(N);break;default:throw new Error(`Unsupported multibase encoding: ${K}`)}return`${K}${$}`}function H(N){if(!N||N.length<2)throw new Error("Invalid multibase string: too short");let K=N[0],$=N.slice(1),Y;switch(K){case"u":Y=JN($);break;case"z":Y=XN($);break;default:throw new Error(`Unsupported multibase encoding prefix: ${K}`)}return{bytes:Y,encoding:K}}var RN={[18]:32,[32]:48,[22]:32,[21]:48};function M0(N){let K=[];while(N>=128)K.push(N&127|128),N>>>=7;return K.push(N&127),new Uint8Array(K)}function x0(N,K){let $=RN[K];if(N.length!==$)throw new Error(`Invalid digest length for algorithm ${K.toString(16)}: expected ${$}, got ${N.length}`);let Y=M0(K),U=M0(N.length),Q=new Uint8Array(Y.length+U.length+N.length);return Q.set(Y,0),Q.set(U,Y.length),Q.set(N,Y.length+U.length),Q}/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */function ON(N){return N instanceof Uint8Array||ArrayBuffer.isView(N)&&N.constructor.name==="Uint8Array"}function Y0(N,...K){if(!ON(N))throw new Error("Uint8Array expected");if(K.length>0&&!K.includes(N.length))throw new Error("Uint8Array expected of length "+K+", got length="+N.length)}function F0(N,K=!0){if(N.destroyed)throw new Error("Hash instance has been destroyed");if(K&&N.finished)throw new Error("Hash#digest() has already been called")}function L0(N,K){Y0(N);let $=K.outputLen;if(N.length<$)throw new Error("digestInto() expects output buffer of length at least "+$)}function i(...N){for(let K=0;K<N.length;K++)N[K].fill(0)}function U0(N){return new DataView(N.buffer,N.byteOffset,N.byteLength)}function C(N,K){return N<<32-K|N>>>K}function PN(N){if(typeof N!=="string")throw new Error("string expected");return new Uint8Array(new TextEncoder().encode(N))}function G0(N){if(typeof N==="string")N=PN(N);return Y0(N),N}class I0{}function V0(N){let K=(Y)=>N().update(G0(Y)).digest(),$=N();return K.outputLen=$.outputLen,K.blockLen=$.blockLen,K.create=()=>N(),K}function zN(N,K,$,Y){if(typeof N.setBigUint64==="function")return N.setBigUint64(K,$,Y);let U=BigInt(32),Q=BigInt(4294967295),J=Number($>>U&Q),Z=Number($&Q),q=Y?4:0,R=Y?0:4;N.setUint32(K+q,J,Y),N.setUint32(K+R,Z,Y)}function u0(N,K,$){return N&K^~N&$}function A0(N,K,$){return N&K^N&$^K&$}class w0 extends I0{constructor(N,K,$,Y){super();this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.blockLen=N,this.outputLen=K,this.padOffset=$,this.isLE=Y,this.buffer=new Uint8Array(N),this.view=U0(this.buffer)}update(N){F0(this),N=G0(N),Y0(N);let{view:K,buffer:$,blockLen:Y}=this,U=N.length;for(let Q=0;Q<U;){let J=Math.min(Y-this.pos,U-Q);if(J===Y){let Z=U0(N);for(;Y<=U-Q;Q+=Y)this.process(Z,Q);continue}if($.set(N.subarray(Q,Q+J),this.pos),this.pos+=J,Q+=J,this.pos===Y)this.process(K,0),this.pos=0}return this.length+=N.length,this.roundClean(),this}digestInto(N){F0(this),L0(N,this),this.finished=!0;let{buffer:K,view:$,blockLen:Y,isLE:U}=this,{pos:Q}=this;if(K[Q++]=128,i(this.buffer.subarray(Q)),this.padOffset>Y-Q)this.process($,0),Q=0;for(let X=Q;X<Y;X++)K[X]=0;zN($,Y-8,BigInt(this.length*8),U),this.process($,0);let J=U0(N),Z=this.outputLen;if(Z%4)throw new Error("_sha2: outputLen should be aligned to 32bit");let q=Z/4,R=this.get();if(q>R.length)throw new Error("_sha2: outputLen bigger than state");for(let X=0;X<q;X++)J.setUint32(4*X,R[X],U)}digest(){let{buffer:N,outputLen:K}=this;this.digestInto(N);let $=N.slice(0,K);return this.destroy(),$}_cloneInto(N){N||(N=new this.constructor),N.set(...this.get());let{blockLen:K,buffer:$,length:Y,finished:U,destroyed:Q,pos:J}=this;if(N.destroyed=Q,N.finished=U,N.length=Y,N.pos=J,Y%K)N.buffer.set($);return N}clone(){return this._cloneInto()}}var u=Uint32Array.from([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]);var kN=Uint32Array.from([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),f=new Uint32Array(64);class f0 extends w0{constructor(N=32){super(64,N,8,!1);this.A=u[0]|0,this.B=u[1]|0,this.C=u[2]|0,this.D=u[3]|0,this.E=u[4]|0,this.F=u[5]|0,this.G=u[6]|0,this.H=u[7]|0}get(){let{A:N,B:K,C:$,D:Y,E:U,F:Q,G:J,H:Z}=this;return[N,K,$,Y,U,Q,J,Z]}set(N,K,$,Y,U,Q,J,Z){this.A=N|0,this.B=K|0,this.C=$|0,this.D=Y|0,this.E=U|0,this.F=Q|0,this.G=J|0,this.H=Z|0}process(N,K){for(let X=0;X<16;X++,K+=4)f[X]=N.getUint32(K,!1);for(let X=16;X<64;X++){let k=f[X-15],D=f[X-2],P=C(k,7)^C(k,18)^k>>>3,I=C(D,17)^C(D,19)^D>>>10;f[X]=I+f[X-7]+P+f[X-16]|0}let{A:$,B:Y,C:U,D:Q,E:J,F:Z,G:q,H:R}=this;for(let X=0;X<64;X++){let k=C(J,6)^C(J,11)^C(J,25),D=R+k+u0(J,Z,q)+kN[X]+f[X]|0,I=(C($,2)^C($,13)^C($,22))+A0($,Y,U)|0;R=q,q=Z,Z=J,J=Q+D|0,Q=U,U=Y,Y=$,$=D+I|0}$=$+this.A|0,Y=Y+this.B|0,U=U+this.C|0,Q=Q+this.D|0,J=J+this.E|0,Z=Z+this.F|0,q=q+this.G|0,R=R+this.H|0,this.set($,Y,U,Q,J,Z,q,R)}roundClean(){i(f)}destroy(){this.set(0,0,0,0,0,0,0,0),i(this.buffer)}}var E0=V0(()=>new f0);async function _(N){return E0(N)}var b0=typeof process!=="undefined"&&typeof window==="undefined"&&!!(process.versions&&process.versions.node||process.versions.bun),y0=["node","fs"].join(":"),h=null,Z0=null,v0=async()=>{if(!b0)throw new Error("Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)");if(h)return h;if(Z0)return Z0;return Z0=(async()=>{let N=globalThis.require;if(typeof N==="function"){try{let K=N(y0);return h=K,K}catch{}try{let K=N("fs");return h=K,K}catch{}}try{let K=await import(y0);return h=K,K}catch{}try{let K=await import("fs");return h=K,K}catch{}throw new Error("Filesystem access is not available in this environment (unable to load fs)")})(),Z0},DN=(N)=>{try{let K=N.includes("localhost")?"http":"https";return new URL(`${K}://${N}`).hostname}catch{return N}};var xN=async(N,K)=>{let $=await v0();try{let Y=N.substring(0,N.lastIndexOf("/"));if(Y&&!$.existsSync(Y))$.mkdirSync(Y,{recursive:!0});$.writeFileSync(N,JSON.stringify(K[0])+`
 `);for(let U=1;U<K.length;U++)$.appendFileSync(N,JSON.stringify(K[U])+`
-`)}catch(Y){throw console.error("Error writing log to disk:",Y),Y}},E=async(N,K)=>{if(!B.isTestEnvironment)return;try{let Y=`./test/logs/${N.replace(/[^a-zA-Z0-9]+/g,"_")}.jsonl`;await xN(Y,K)}catch($){console.error("Error writing test log:",$)}};function W(N){if(N===null||typeof N!=="object")return N;if(N instanceof Date)return new Date(N.getTime());if(Array.isArray(N))return N.map(($)=>W($));let K={};for(let[$,Y]of Object.entries(N))K[$]=W(Y);return K}var a=(N)=>{let K=N.split(":");if(!N.startsWith("did:webvh:")||K.length<4)throw new Error(`${N} is not a valid did:webvh identifier`);let $=decodeURIComponent(K.slice(3).join("/")),Y=$.includes("localhost")?"http":"https",[U,...Q]=$.split("/"),[J,Z]=decodeURIComponent(U).split(":");J=J.split(".").map((X)=>DN(X.normalize("NFC"))).join(".");let q=Z?`${J}:${Z}`:J,R=Q.join("/");return`${Y}://${q}${R?"/"+R:""}`},T0=(N)=>{let K=a(N);if(K.indexOf("/",K.indexOf("://")+3)!==-1)return`${K}/did.jsonl`;return`${K}/.well-known/did.jsonl`};async function H0(N,K=!1){try{if(K){let Z=`./src/routes/${N.split(":").slice(4).join(":")||".well-known"}/did.jsonl`;try{let q;if(typeof Bun!=="undefined"&&Bun.file)q=(await Bun.file(Z).text()).trim();else if(v0)q=(await b0()).readFileSync(Z,"utf8").trim();else throw new Error("Local log retrieval not supported in this environment");if(!q)return[];return q.split(`
+`)}catch(Y){throw console.error("Error writing log to disk:",Y),Y}},E=async(N,K)=>{if(!B.isTestEnvironment)return;try{let Y=`./test/logs/${N.replace(/[^a-zA-Z0-9]+/g,"_")}.jsonl`;await xN(Y,K)}catch($){console.error("Error writing test log:",$)}};function W(N){if(N===null||typeof N!=="object")return N;if(N instanceof Date)return new Date(N.getTime());if(Array.isArray(N))return N.map(($)=>W($));let K={};for(let[$,Y]of Object.entries(N))K[$]=W(Y);return K}var a=(N)=>{let K=N.split(":");if(!N.startsWith("did:webvh:")||K.length<4)throw new Error(`${N} is not a valid did:webvh identifier`);let $=decodeURIComponent(K.slice(3).join("/")),Y=$.includes("localhost")?"http":"https",[U,...Q]=$.split("/"),[J,Z]=decodeURIComponent(U).split(":");J=J.split(".").map((X)=>DN(X.normalize("NFC"))).join(".");let q=Z?`${J}:${Z}`:J,R=Q.join("/");return`${Y}://${q}${R?"/"+R:""}`},T0=(N)=>{let K=a(N);if(K.indexOf("/",K.indexOf("://")+3)!==-1)return`${K}/did.jsonl`;return`${K}/.well-known/did.jsonl`};async function H0(N,K=!1){try{if(K){let Z=`./src/routes/${N.split(":").slice(4).join(":")||".well-known"}/did.jsonl`;try{let q;if(typeof Bun!=="undefined"&&Bun.file)q=(await Bun.file(Z).text()).trim();else if(b0)q=(await v0()).readFileSync(Z,"utf8").trim();else throw new Error("Local log retrieval not supported in this environment");if(!q)return[];return q.split(`
 `).map((R)=>JSON.parse(R))}catch(q){throw new Error(`Error reading local DID log: ${q}`)}}let $=T0(N),Y=await fetch($);if(!Y.ok)throw new Error(`HTTP error! status: ${Y.status}`);let U=(await Y.text()).trim();if(!U)throw new Error(`DID log not found for ${N}`);return U.split(`
-`).map((Q)=>JSON.parse(Q))}catch($){throw console.error("Error fetching DID log:",$),$}}var V=(N)=>new Date(N??Date.now()).toISOString().slice(0,-5)+"Z";var n=async(N)=>{return N},c0=new Map;function FN(N){try{let K=JSON.stringify(N);return c0.get(K)}catch{return}}function GN(N,K){try{let $=JSON.stringify(N);c0.set($,K)}catch{}}async function g(N){let K=FN(N);if(K)return K;let $=M(N),Y=await _($),U=x0(new Uint8Array(Y),18),Q=$0(U);return GN(N,Q),Q}var d0=async(N)=>{let K=await _(N),$=x0(new Uint8Array(K),18);return $0($)},p=async(N)=>{let{controller:K}=N,$=wN(N.verificationMethods,K),Y={"@context":N.context||S0,id:K,controller:K};if($&&typeof $==="object"){if($.verificationMethod)Y.verificationMethod=$.verificationMethod;if($.authentication)Y.authentication=$.authentication;if($.assertionMethod)Y.assertionMethod=$.assertionMethod;if($.keyAgreement)Y.keyAgreement=$.keyAgreement;if($.capabilityDelegation)Y.capabilityDelegation=$.capabilityDelegation;if($.capabilityInvocation)Y.capabilityInvocation=$.capabilityInvocation}if(N.authentication)Y.authentication=N.authentication;if(N.assertionMethod)Y.assertionMethod=N.assertionMethod;if(N.keyAgreement)Y.keyAgreement=N.keyAgreement;if(N.alsoKnownAs)Y.alsoKnownAs=N.alsoKnownAs;return{doc:Y}},IN=(N=8)=>{let $="",Y=36;for(let U=0;U<N;U++)$+="abcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(Math.random()*Y));return $},h=(N,K)=>{return`${K??""}#${N.publicKeyMultibase?.slice(-8)||IN(8)}`},wN=(N,K=null)=>{let $={verificationMethod:[],authentication:[],assertionMethod:[],keyAgreement:[],capabilityDelegation:[],capabilityInvocation:[]};if(!N||N.length===0)return $;let Y=N.map((U)=>({...U,id:h(U,K)}));return $.verificationMethod=Y,$.authentication=N.filter((U)=>!U.purpose||U.purpose==="authentication").map((U)=>h(U,K)),$.assertionMethod=N.filter((U)=>U.purpose==="assertionMethod").map((U)=>h(U,K)),$.keyAgreement=N.filter((U)=>U.purpose==="keyAgreement").map((U)=>h(U,K)),$.capabilityDelegation=N.filter((U)=>U.purpose==="capabilityDelegation").map((U)=>h(U,K)),$.capabilityInvocation=N.filter((U)=>U.purpose==="capabilityInvocation").map((U)=>h(U,K)),$},Q0=async(N)=>{try{if(N.startsWith("did:key:"))return{publicKeyMultibase:N.split("did:key:")[1].split("#")[0]};else if(N.startsWith("did:webvh:")){let K=T0(N.split("#")[0]),Y=(await(await fetch(K)).text()).trim().split(`
-`).map((Q)=>JSON.parse(Q)),{doc:U}=await W0(Y,{verificationMethod:N});return s(U,N)}throw new Error(`Verification method ${N} not found`)}catch(K){throw new Error(`Error resolving VM ${N}`)}},s=(N,K)=>{if(N.verificationMethod&&N.verificationMethod.some((Y)=>Y.id===K))return N.verificationMethod.find((Y)=>Y.id===K);let $=["authentication","assertionMethod","keyAgreement","capabilityInvocation","capabilityDelegation"];for(let Y of $)if(N[Y]){if(N[Y].some((U)=>U.id===K))return N[Y].find((U)=>U.id===K)}return null};async function m0(){let N=[];try{for(let K of B.getVerificationMethods()){let $=K.controller||K.id.split("#")[0];N.push($)}}catch(K){console.error("Error processing verification methods:",K)}return N}async function t(N){try{let K=T0(N).replace("did.jsonl","did-witness.json"),$=await fetch(K);if(!$.ok)return[];return await $.json()}catch(K){return console.error("Error fetching witness proofs:",K),[]}}function L(N,K,$){if(typeof N==="string")return N.replaceAll(K,$);if(Array.isArray(N))return N.map((Y)=>L(Y,K,$));if(N&&typeof N==="object"){let Y={};for(let[U,Q]of Object.entries(N))Y[U]=L(Q,K,$);return Y}return N}function l(N){if(!N.witnesses||!Array.isArray(N.witnesses)||N.witnesses.length===0)throw new Error("Witness list cannot be empty");if(!N.threshold||parseInt(N.threshold.toString())<1||parseInt(N.threshold.toString())>N.witnesses.length)throw new Error("Witness threshold must be between 1 and the number of witnesses");let K=new Set;for(let $ of N.witnesses){if(!$.id.startsWith("did:key:"))throw new Error("Witness DIDs must be did:key format");if(K.has($.id))throw new Error(`Duplicate witness id: ${$.id}`);K.add($.id)}}async function J0(N,K,$,Y){if(!Y)throw new Error("Verifier implementation is required");let U=0,Q=new Set;for(let J of K)for(let Z of J.proof){if(Z.cryptosuite!=="eddsa-jcs-2022")throw new Error("Invalid witness proof cryptosuite");let q=$.witnesses?.find((R)=>Z.verificationMethod.startsWith(R.id));if(!q)throw new Error("Proof from unauthorized witness");if(Q.has(q.id))continue;try{let R=await Q0(Z.verificationMethod);if(!R)throw new Error(`Verification Method ${Z.verificationMethod} not found`);let X;try{X=H(R.publicKeyMultibase).bytes}catch(j){throw new Error(`Failed to decode public key: ${j.message}`)}if(X.length!==34)throw new Error(`Invalid public key length ${X.length} (should be 34 bytes)`);let{proofValue:k,...D}=Z,P=M({versionId:N.versionId}),I=M(D),F=await _(P),x=await _(I),z=d(x,F),O;try{O=H(k).bytes}catch(j){throw new Error(`Failed to decode signature: ${j.message}`)}if(!await Y.verify(O,z,X.slice(2)))throw new Error("Invalid witness proof signature");U++,Q.add(q.id)}catch(R){throw new Error(`Invalid witness proof: ${R.message}`)}}if(U<parseInt($.threshold?.toString()??"0"))throw new Error(`Witness threshold not met: got ${U}, need ${$.threshold}`)}var TN=(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_KEY_IS_AUTHORIZED")==="true")return!0;if(N.startsWith("did:key:")){let Y=N.split("did:key:")[1].split("#")[0];return K.some((Q)=>{let J=Q;if(Q.startsWith("did:key:"))J=Q.split("did:key:")[1].split("#")[0];return J===Y})}return!1},WN=(N,K)=>{if(B.getEnvValue("IGNORE_WITNESS_IS_AUTHORIZED")==="true")return!0;if(N.startsWith("did:webvh:")){let $=N.split("#")[0];return K.includes($)}return!1},S=async(N,K,$,Y,U)=>{if(B.getEnvValue("IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID")==="true")return!0;if(!U)throw new Error("Verifier implementation is required");let{proof:Q,...J}=N;if(!Array.isArray(Q))Q=[Q];if($&&$.witnesses&&$.witnesses.length>0){if(!Y)l($)}for(let Z=0;Z<Q.length;Z++){let q=Q[Z];if(q.verificationMethod.startsWith("did:key:")){if(!TN(q.verificationMethod,K))throw new Error(`Key ${q.verificationMethod} is not authorized to update.`)}else if(q.verificationMethod.startsWith("did:webvh:")){if($&&$.witnesses&&$.witnesses.length>0&&!WN(q.verificationMethod,$.witnesses.map((O)=>O.id)))throw new Error(`Key ${q.verificationMethod} is not from an authorized witness.`)}else throw new Error(`Unsupported verification method: ${q.verificationMethod}`);if(q.type!=="DataIntegrityProof")throw new Error(`Unknown proof type ${q.type}`);if(q.proofPurpose!=="authentication"&&q.proofPurpose!=="assertionMethod")throw new Error(`Unknown proof purpose ${q.proofPurpose}`);if(q.cryptosuite!=="eddsa-jcs-2022")throw new Error(`Unknown cryptosuite ${q.cryptosuite}`);let R=await Q0(q.verificationMethod);if(!R)throw new Error(`Verification Method ${q.verificationMethod} not found`);let X=H(R.publicKeyMultibase).bytes;if(X[0]!==237||X[1]!==1)throw new Error("multiKey doesn't include ed25519 header (0xed01)");let{proofValue:k,...D}=q,P=H(k).bytes,I=await _(M(J)),F=await _(M(D)),x=d(F,I);if(!await U.verify(P,x,X.slice(2)))throw new Error(`Proof ${Z} failed verification (proofValue: ${k})`)}return!0},X0=(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_HASH_CHAIN_IS_VALID")==="true")return!0;return N===K},q0=async(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_NEW_KEYS_ARE_VALID")==="true")return!0;if(K.length>0)for(let $ of N){let Y=await d0($);if(!K.includes(Y))throw new Error(`Invalid update key ${Y}. Not found in nextKeyHashes ${K}`)}return!0},R0=async(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_SCID_IS_FROM_HASH")==="true")return!0;return N===await n(K)};var jN="1.0",BN=`did:${m}:${jN}`,r0=async(N)=>{if(!N.updateKeys)throw new Error("Update keys not supplied");if(N.witness&&N.witness.witnesses&&N.witness.witnesses.length>0)l(N.witness);let K=encodeURIComponent(N.domain),$=N.paths?.join(":"),Y=`did:${m}:${w}:${K}${$?`:${$}`:""}`,U=V(N.created),Q=N.verificationMethods?.map((F)=>{if(F.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:x,...z}=F;return z}return F}),{doc:J}=await p({...N,controller:Y,verificationMethods:Q}),Z={scid:w,updateKeys:N.updateKeys,portable:N.portable??!1,nextKeyHashes:N.nextKeyHashes??[],watchers:N.watchers??[],witness:N.witness??{},deactivated:!1},q={versionId:w,versionTime:U,parameters:{method:BN,...Z},state:J},R=await g(q);Z.scid=await n(R),q.state=J;let X=JSON.parse(JSON.stringify(q).replaceAll(w,Z.scid)),k=await g(X);X.versionId=`1-${k}`;let D=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod"}}),P=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod",proofValue:D.proofValue}];if(X.proof=P,!await S({...X,versionId:`1-${k}`},Z.updateKeys,Z.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);return{did:X.state.id,doc:X.state,meta:{versionId:X.versionId,created:X.versionTime,updated:X.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z},log:[X]}},e=async(N,K={})=>{if(K.verificationMethod&&(K.versionNumber||K.versionId))throw new Error("Cannot specify both verificationMethod and version number/id");let $=N.map((x)=>W(x)),Y="",U=null,Q=null,J=null,Z={versionId:"",created:"",updated:"",deactivated:!1,portable:!1,scid:"",updateKeys:[],nextKeyHashes:[],prerotation:!1,witness:void 0,watchers:null},q=null,R=null,X=0,k="",D=K.fastResolve??!0,P=(x)=>x===0,I=(x)=>x>=$.length-10,F=(x)=>!D||P(x)||I(x);try{while(X<$.length){let{versionId:x,versionTime:z,parameters:O,state:y,proof:j}=$[X],[c,v]=x.split("-");if(parseInt(c)!==X+1)throw new Error(`version '${c}' in log doesn't match expected '${X+1}'.`);Z.versionId=x,Z.updated=z;let A=y;if(c==="1"){if(Z.created=z,A=y,k=A.id.split(":").at(-1),Z.scid=O.scid,Z.portable=O.portable??Z.portable,Z.updateKeys=O.updateKeys,Z.nextKeyHashes=O.nextKeyHashes||[],Z.prerotation=Z.nextKeyHashes.length>0,Z.witness=O.witness||Z.witness,Z.watchers=O.watchers??null,F(X)){let G={versionId:w,versionTime:Z.created,parameters:L(O,Z.scid,w),state:L(A,Z.scid,w)},T=await g(G);if(Z.previousLogEntryHash=T,!await R0(Z.scid,T))throw new Error(`SCID '${Z.scid}' not derived from logEntryHash '${T}'`);let b=L(G,w,Z.scid),z0=await g(b);if(!await S({...b,versionId:`1-${z0}`,proof:j},Z.updateKeys,Z.witness,!1,K.verifier))throw new Error(`version ${Z.versionId} failed verification of the proof.`)}}else{let G=A.id.split(":").at(-1);if(!Z.portable&&G!==k)throw new Error("Cannot move DID: portability is disabled");else if(G!==k)k=G;if(F(X)){let T=Z.prerotation?O.updateKeys:Z.updateKeys;if(!await S($[X],T,Z.witness,!1,K.verifier))throw new Error(`version ${Z.versionId} failed verification of the proof.`);if(!X0(`${X+1}-${v}`,x))throw new Error(`Hash chain broken at '${Z.versionId}'`);if(Z.prerotation)await q0(O.updateKeys??[],Z.nextKeyHashes??[])}if(O.updateKeys)Z.updateKeys=O.updateKeys;if(O.deactivated===!0)Z.deactivated=!0;if(O.nextKeyHashes)Z.nextKeyHashes=O.nextKeyHashes,Z.prerotation=!0;else Z.nextKeyHashes=[],Z.prerotation=!1;if("witness"in O)Z.witness=O.witness;else if(O.witnesses)Z.witness={witnesses:O.witnesses,threshold:O.witnessThreshold||O.witnesses.length};if("watchers"in O)Z.watchers=O.watchers??null}if(U=W(A),Y=U.id,F(X)||X===$.length-1){U.service=U.service||[];let G=a(Y);if(!U.service.some((T)=>T.id==="#files"))U.service.push({id:"#files",type:"relativeRef",serviceEndpoint:G});if(!U.service.some((T)=>T.id==="#whois"))U.service.push({"@context":"https://identity.foundation/linked-vp/contexts/v1",id:"#whois",type:"LinkedVerifiablePresentation",serviceEndpoint:`${G}/whois.vp`})}if(K.verificationMethod&&s(U,K.verificationMethod)){if(!Q)Q=W(U),q={...Z}}if(K.versionNumber===parseInt(c)||K.versionId===Z.versionId){if(!Q)Q=W(U),q={...Z}}if(K.versionTime&&K.versionTime>new Date(Z.updated)){if($[X+1]&&K.versionTime<new Date($[X+1].versionTime)){if(!Q)Q=W(U),q={...Z}}else if(!$[X+1]){if(!Q)Q=W(U),q={...Z}}}if(Z.witness&&X===$.length-1){if(!K.witnessProofs)K.witnessProofs=await t(Y);let G=K.witnessProofs.filter((T)=>{return T.versionId===Z.versionId});if(G.length>0)await J0($[X],G,Z.witness,K.verifier);else if(Z.witness&&Z.witness.threshold&&parseInt(Z.witness.threshold.toString())>0)throw new Error("No witness proofs found for version "+Z.versionId)}J=W(U),R={...Z},X++}}catch(x){if(!Q)throw x}if(!Q)Q=J,q=R;if(!q)throw new Error("DID resolution failed: No valid metadata found");return{did:Y,doc:Q,meta:q}},h0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await e(K,{verifier:N.verifier,witnessProofs:N.witnessProofs})).meta;if(Y.deactivated)throw new Error("Cannot update deactivated DID");let U=K.length+1,Q=V(N.updated),J=N.watchers!==void 0?N.watchers:Y.watchers,Z={updateKeys:N.updateKeys??[],nextKeyHashes:N.nextKeyHashes??[],witness:N.witness!==void 0&&N.witness!==null?{witnesses:N.witness?.witnesses||[],threshold:N.witness?.threshold||0}:{},watchers:J??[]},q=N.verificationMethods?.map((O)=>{if(O.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:y,...j}=O;return j}return O}),{doc:R}=await p({...N,controller:N.controller||$.state.id||"",context:N.context||$.state["@context"],domain:N.domain??$.state.id?.split(":").at(-1)??"",updateKeys:N.updateKeys??[],verificationMethods:q??[]});if(N.services&&N.services.length>0)R.service=N.services;if(N.assertionMethod)R.assertionMethod=N.assertionMethod;if(N.keyAgreement)R.keyAgreement=N.keyAgreement;let X={versionId:w,versionTime:Q,parameters:Z,state:R},k=await g(X),D=`${U}-${k}`,P={...X,versionId:D},I=await N.signer.sign({document:P,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),F=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:I.proofValue}];if(P.proof=F,!await S(P,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${P.versionId} is invalid.`);let z={...Y,versionId:P.versionId,updated:P.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z};return{did:P.state.id,doc:P.state,meta:z,log:[...K,P]}},n0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await e(K,{verifier:N.verifier})).meta;if(Y.deactivated)throw new Error("DID already deactivated");let U=K.length+1,Q=V(),J={updateKeys:N.updateKeys??Y.updateKeys,deactivated:!0},Z={versionId:w,versionTime:Q,parameters:J,state:$.state},q=await g(Z),R=`${U}-${q}`,X={...Z,versionId:R},k=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),D=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:k.proofValue}];if(X.proof=D,!await S(X,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let I={...Y,versionId:X.versionId,updated:X.versionTime,deactivated:!0,updateKeys:J.updateKeys};return{did:X.state.id,doc:X.state,meta:I,log:[...K,X]}};var _N="0.5",p0=`did:${m}:${_N}`,l0=async(N)=>{if(!N.updateKeys)throw new Error("Update keys not supplied");if(N.witness&&N.witness.witnesses&&N.witness.witnesses.length>0)l(N.witness);let K=encodeURIComponent(N.domain),$=N.paths?.join(":"),Y=`did:${m}:${w}:${K}${$?`:${$}`:""}`,U=V(N.created),Q=N.verificationMethods?.map((x)=>{if(x.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:z,...O}=x;return O}return x}),{doc:J}=await p({...N,controller:Y,verificationMethods:Q}),Z={scid:w,updateKeys:N.updateKeys,portable:N.portable??!1,nextKeyHashes:N.nextKeyHashes??[],watchers:N.watchers??null,...N.witness?{witness:N.witness}:{},deactivated:!1},q={versionId:w,versionTime:U,parameters:{method:p0,...Z},state:J},R=await g(q);Z.scid=await n(R),q.state=J;let X=JSON.parse(JSON.stringify(q).replaceAll(w,Z.scid)),k=await g(X);X.versionId=`1-${k}`;let D=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod"}}),P=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod",proofValue:D.proofValue}];if(X.proof=P,!await S({...X,versionId:`1-${k}`,proof:X.proof},Z.updateKeys,Z.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let F={};if(Z.witness)F={...Z.witness,threshold:Z.witness.threshold?.toString()||"0"};return{did:X.state.id,doc:X.state,meta:{versionId:X.versionId,created:X.versionTime,updated:X.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z,witness:F},log:[X]}},o=async(N,K={})=>{if(K.verificationMethod&&(K.versionNumber||K.versionId))throw new Error("Cannot specify both verificationMethod and version number/id");let $=N.map((F)=>W(F)),Y=$[0].parameters.method;if(Y!==p0)throw new Error(`'${Y}' protocol unknown.`);let U={},Q="",J={versionId:"",created:"",updated:"",previousLogEntryHash:"",scid:"",prerotation:!1,portable:!1,nextKeyHashes:[],deactivated:!1,updateKeys:[],witness:void 0,watchers:null},Z="",q=0,R=null,X=null,k=null,D=null;try{while(q<$.length){let{versionId:F,versionTime:x,parameters:z,state:O,proof:y}=$[q],[j,c]=F.split("-");if(parseInt(j)!==q+1)throw new Error(`version '${j}' in log doesn't match expected '${q+1}'.`);J.versionId=F,J.updated=x;let v=O;if(j==="1"){J.created=x,v=O,Z=v.id.split(":").at(-1),J.scid=z.scid,J.portable=z.portable??J.portable,J.updateKeys=z.updateKeys,J.nextKeyHashes=z.nextKeyHashes||[],J.prerotation=J.nextKeyHashes.length>0,J.witness=z.witness||J.witness,J.watchers=z.watchers??null,J.nextKeyHashes=z.nextKeyHashes??[];let G={versionId:w,versionTime:J.created,parameters:L(z,J.scid,w),state:L(v,J.scid,w)},T=await g(G);if(J.previousLogEntryHash=T,!await R0(J.scid,T))throw new Error(`SCID '${J.scid}' not derived from logEntryHash '${T}'`);let b=L(G,w,J.scid),z0=await g(b);if(!await S({...b,versionId:`1-${z0}`,proof:y},J.updateKeys,J.witness,!1,K.verifier))throw new Error(`version ${J.versionId} failed verification of the proof.`)}else{let G=v.id.split(":").at(-1);if(!J.portable&&G!==Z)throw new Error("Cannot move DID: portability is disabled");else if(G!==Z)Z=G;let T=J.prerotation?z.updateKeys:J.updateKeys;if(!await S($[q],T,J.witness,!1,K.verifier))throw new Error(`version ${J.versionId} failed verification of the proof.`);if(!X0(`${q+1}-${c}`,F))throw new Error(`Hash chain broken at '${J.versionId}'`);if(J.prerotation)await q0(z.updateKeys??[],J.nextKeyHashes??[]);if(z.updateKeys)J.updateKeys=z.updateKeys;if(z.deactivated===!0)J.deactivated=!0;if(z.nextKeyHashes)J.nextKeyHashes=z.nextKeyHashes,J.prerotation=!0;else J.nextKeyHashes=[],J.prerotation=!1;if("witness"in z)J.witness=z.witness;else if(z.witnesses)J.witness={witnesses:z.witnesses,threshold:z.witnessThreshold||z.witnesses.length.toString()};if("watchers"in z)J.watchers=z.watchers??null}U=W(v),Q=U.id,U.service=U.service||[];let A=a(Q);if(!U.service.some((G)=>G.id==="#files"))U.service.push({id:"#files",type:"relativeRef",serviceEndpoint:A});if(!U.service.some((G)=>G.id==="#whois"))U.service.push({"@context":"https://identity.foundation/linked-vp/contexts/v1",id:"#whois",type:"LinkedVerifiablePresentation",serviceEndpoint:`${A}/whois.vp`});if(K.verificationMethod&&s(U,K.verificationMethod)){if(!R)R=W(U),X={...J}}if(K.versionNumber===parseInt(j)||K.versionId===J.versionId){if(!R)R=W(U),X={...J}}if(K.versionTime&&K.versionTime>new Date(J.updated)){if($[q+1]&&K.versionTime<new Date($[q+1].versionTime)){if(!R)R=W(U),X={...J}}else if(!$[q+1]){if(!R)R=W(U),X={...J}}}if(J.witness&&q===$.length-1){if(!K.witnessProofs)K.witnessProofs=await t(Q);let G=K.witnessProofs.filter((T)=>{return T.versionId===J.versionId});if(G.length>0)await J0($[q],G,J.witness,K.verifier);else if(J.witness&&J.witness.threshold&&parseInt(J.witness.threshold.toString())>0)throw new Error("No witness proofs found for version "+J.versionId)}k=W(U),D={...J},q++}}catch(F){if(!R)throw F}if(!k||!D)throw new Error("DID log is invalid");let P=R||k,I=X||D;if(I.latestVersionId=D.versionId,I.witness)I.witness.threshold=I.witness.threshold?.toString()||"0";return{did:P.id,doc:P,meta:I}},i0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await o(K,{verifier:N.verifier,witnessProofs:N.witnessProofs})).meta;if(Y.deactivated)throw new Error("Cannot update deactivated DID");let U=K.length+1,Q=V(N.updated),J=N.watchers!==void 0?N.watchers:Y.watchers,Z={updateKeys:N.updateKeys??[],nextKeyHashes:N.nextKeyHashes??[],...N.witness===null?{witness:{}}:N.witness!==void 0?{witnesses:N.witness?.witnesses||[],threshold:N.witness?.threshold||"0"}:{},watchers:J??null},q=N.verificationMethods?.map((O)=>{if(O.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:y,...j}=O;return j}return O}),{doc:R}=await p({...N,controller:N.controller||$.state.id||"",context:N.context||$.state["@context"],domain:N.domain??$.state.id?.split(":").at(-1)??"",updateKeys:N.updateKeys??[],verificationMethods:q??[]});if(N.services&&N.services.length>0)R.service=N.services;if(N.assertionMethod)R.assertionMethod=N.assertionMethod;if(N.keyAgreement)R.keyAgreement=N.keyAgreement;let X={versionId:w,versionTime:Q,parameters:Z,state:R},k=await g(X),D=`${U}-${k}`,P={...X,versionId:D},I=await N.signer.sign({document:P,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),F=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:I.proofValue}];if(P.proof=F,!await S(P,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${P.versionId} is invalid.`);let z={...Y,versionId:P.versionId,updated:P.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z};return{did:P.state.id,doc:P.state,meta:z,log:[...K,P]}},a0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await o(K,{verifier:N.verifier})).meta;if(Y.deactivated)throw new Error("DID already deactivated");let U=K.length+1,Q=V(),J={updateKeys:N.updateKeys??Y.updateKeys,deactivated:!0},Z={versionId:w,versionTime:Q,parameters:J,state:$.state},q=await g(Z),R=`${U}-${q}`,X={...Z,versionId:R},k=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),D=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:k.proofValue}];if(X.proof=D,!await S(X,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let I={...Y,versionId:X.versionId,updated:X.versionTime,deactivated:!0,updateKeys:J.updateKeys};return{did:X.state.id,doc:X.state,meta:I,log:[...K,X]}};var O0="1.0";function s0(N){if(!N)return O0;let K=N.match(/^did:webvh:(\d+\.\d+)$/);return K?K[1]:O0}function P0(N){if(N&&N.length>0&&N[0].parameters&&N[0].parameters.method)return s0(N[0].parameters.method);return O0}function j0(N){if(N&&N.method)return s0(N.method);return O0}var MN=async(N)=>{let $=j0(N)==="0.5"?await l0(N):await r0(N);return E($.did,$.log),$},CN=async(N,K={})=>{let Y=(await m0()).includes(N),U=void 0,Q=N.split(":");if(Q.length>2&&Q[0]==="did"&&Q[1]==="webvh")U=Q[2];try{let J=await H0(N,Y),Z=P0(J),q={...K,scid:U};if(Z==="0.5"){let X=await o(J,q);return E(X.did,J),{...X,controlled:Y}}let R=await e(J,q);return E(R.did,J),{...R,controlled:Y}}catch(J){let Z="INVALID_DID",q=J instanceof Error?J.message:String(J);if(/not found/i.test(q)||/404/.test(q))Z="notFound";return{did:N,doc:null,meta:{error:Z,problemDetails:{type:Z==="notFound"?"https://w3id.org/security#NOT_FOUND":"https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID",title:Z==="notFound"?"The DID Log or resource was not found.":"The resolved DID is invalid.",detail:q}},controlled:Y}}},W0=async(N,K={})=>{if(P0(N)==="0.5"){let U=await o(N,K);return E(U.did,N),U}let Y=await e(N,K);return E(Y.did,N),Y},LN=async(N)=>{let $=(N.log?P0(N.log):j0(N))==="0.5"?await i0(N):await h0(N);return E($.did,$.log),$},VN=async(N)=>{let $=(N.log?P0(N.log):j0(N))==="0.5"?await a0(N):await n0(N);return E($.did,$.log),$};var B0=(N)=>{return{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N,created:V(),proofPurpose:"assertionMethod"}},uN=async(N,K)=>{let $=await _(M(N)),Y=await _(M(K));return d(Y,$)};class t0{verificationMethod;useStaticId;constructor(N){if(N.verificationMethod)this.verificationMethod=N.verificationMethod;this.useStaticId=N.useStaticId!==void 0?N.useStaticId:!0}getVerificationMethodId(){if(!this.verificationMethod)throw new Error("Verification method not set");return this.useStaticId?`did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`:this.verificationMethod.id||""}}var AN=(N,K)=>{return async($)=>{try{let Y=B0(K),U=await N.sign({document:$,proof:Y});return Y.proofValue=U.proofValue,{...$,proof:Y}}catch(Y){throw console.error(Y),new Error(`Document signing failure: ${Y.message||Y}`)}}},fN=(N,K=!0)=>{return console.warn("createSigner is deprecated. Use createDocumentSigner with your own Signer implementation instead."),async($)=>{try{let Y=K?`did:key:${N.publicKeyMultibase}#${N.publicKeyMultibase}`:N.id||"",U=B0(Y);throw new Error("createSigner is deprecated. Implement your own Signer and use createDocumentSigner instead.")}catch(Y){throw console.error(Y),new Error(`Document signing failure: ${Y.message||Y}`)}}};export{LN as updateDID,W0 as resolveDIDFromLog,CN as resolveDID,uN as prepareDataForSigning,qN as multibaseEncode,H as multibaseDecode,VN as deactivateDID,fN as createSigner,B0 as createProof,AN as createDocumentSigner,MN as createDID,C0 as MultibaseEncoding,t0 as AbstractCrypto};
+`).map((Q)=>JSON.parse(Q))}catch($){throw console.error("Error fetching DID log:",$),$}}var V=(N)=>new Date(N??Date.now()).toISOString().slice(0,-5)+"Z";var n=async(N)=>{return N},c0=new Map;function FN(N){try{let K=JSON.stringify(N);return c0.get(K)}catch{return}}function GN(N,K){try{let $=JSON.stringify(N);c0.set($,K)}catch{}}async function g(N){let K=FN(N);if(K)return K;let $=M(N),Y=await _($),U=x0(new Uint8Array(Y),18),Q=$0(U);return GN(N,Q),Q}var d0=async(N)=>{let K=await _(N),$=x0(new Uint8Array(K),18);return $0($)},p=async(N)=>{let{controller:K}=N,$=wN(N.verificationMethods,K),Y={"@context":N.context||S0,id:K,controller:K};if($&&typeof $==="object"){if($.verificationMethod)Y.verificationMethod=$.verificationMethod;if($.authentication)Y.authentication=$.authentication;if($.assertionMethod)Y.assertionMethod=$.assertionMethod;if($.keyAgreement)Y.keyAgreement=$.keyAgreement;if($.capabilityDelegation)Y.capabilityDelegation=$.capabilityDelegation;if($.capabilityInvocation)Y.capabilityInvocation=$.capabilityInvocation}if(N.authentication)Y.authentication=N.authentication;if(N.assertionMethod)Y.assertionMethod=N.assertionMethod;if(N.keyAgreement)Y.keyAgreement=N.keyAgreement;if(N.alsoKnownAs)Y.alsoKnownAs=N.alsoKnownAs;return{doc:Y}},IN=(N=8)=>{let $="",Y=36;for(let U=0;U<N;U++)$+="abcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(Math.random()*Y));return $},m=(N,K)=>{return`${K??""}#${N.publicKeyMultibase?.slice(-8)||IN(8)}`},wN=(N,K=null)=>{let $={verificationMethod:[],authentication:[],assertionMethod:[],keyAgreement:[],capabilityDelegation:[],capabilityInvocation:[]};if(!N||N.length===0)return $;let Y=N.map((U)=>({...U,id:U.id??m(U,K)}));return $.verificationMethod=Y,$.authentication=N.filter((U)=>!U.purpose||U.purpose==="authentication").map((U)=>U.id??m(U,K)),$.assertionMethod=N.filter((U)=>U.purpose==="assertionMethod").map((U)=>U.id??m(U,K)),$.keyAgreement=N.filter((U)=>U.purpose==="keyAgreement").map((U)=>U.id??m(U,K)),$.capabilityDelegation=N.filter((U)=>U.purpose==="capabilityDelegation").map((U)=>U.id??m(U,K)),$.capabilityInvocation=N.filter((U)=>U.purpose==="capabilityInvocation").map((U)=>U.id??m(U,K)),$},Q0=async(N)=>{try{if(N.startsWith("did:key:"))return{publicKeyMultibase:N.split("did:key:")[1].split("#")[0]};else if(N.startsWith("did:webvh:")){let K=T0(N.split("#")[0]),Y=(await(await fetch(K)).text()).trim().split(`
+`).map((Q)=>JSON.parse(Q)),{doc:U}=await W0(Y,{verificationMethod:N});return s(U,N)}throw new Error(`Verification method ${N} not found`)}catch(K){throw new Error(`Error resolving VM ${N}`)}},s=(N,K)=>{if(N.verificationMethod&&N.verificationMethod.some((Y)=>Y.id===K))return N.verificationMethod.find((Y)=>Y.id===K);let $=["authentication","assertionMethod","keyAgreement","capabilityInvocation","capabilityDelegation"];for(let Y of $)if(N[Y]){if(N[Y].some((U)=>U.id===K))return N[Y].find((U)=>U.id===K)}return null};async function r0(){let N=[];try{for(let K of B.getVerificationMethods()){let $=K.controller||K.id.split("#")[0];N.push($)}}catch(K){console.error("Error processing verification methods:",K)}return N}async function t(N){try{let K=T0(N).replace("did.jsonl","did-witness.json"),$=await fetch(K);if(!$.ok)return[];return await $.json()}catch(K){return console.error("Error fetching witness proofs:",K),[]}}function L(N,K,$){if(typeof N==="string")return N.replaceAll(K,$);if(Array.isArray(N))return N.map((Y)=>L(Y,K,$));if(N&&typeof N==="object"){let Y={};for(let[U,Q]of Object.entries(N))Y[U]=L(Q,K,$);return Y}return N}function l(N){if(!N.witnesses||!Array.isArray(N.witnesses)||N.witnesses.length===0)throw new Error("Witness list cannot be empty");if(!N.threshold||parseInt(N.threshold.toString())<1||parseInt(N.threshold.toString())>N.witnesses.length)throw new Error("Witness threshold must be between 1 and the number of witnesses");let K=new Set;for(let $ of N.witnesses){if(!$.id.startsWith("did:key:"))throw new Error("Witness DIDs must be did:key format");if(K.has($.id))throw new Error(`Duplicate witness id: ${$.id}`);K.add($.id)}}async function J0(N,K,$,Y){if(!Y)throw new Error("Verifier implementation is required");let U=0,Q=new Set;for(let J of K)for(let Z of J.proof){if(Z.cryptosuite!=="eddsa-jcs-2022")throw new Error("Invalid witness proof cryptosuite");let q=$.witnesses?.find((R)=>Z.verificationMethod.startsWith(R.id));if(!q)throw new Error("Proof from unauthorized witness");if(Q.has(q.id))continue;try{let R=await Q0(Z.verificationMethod);if(!R)throw new Error(`Verification Method ${Z.verificationMethod} not found`);let X;try{X=H(R.publicKeyMultibase).bytes}catch(j){throw new Error(`Failed to decode public key: ${j.message}`)}if(X.length!==34)throw new Error(`Invalid public key length ${X.length} (should be 34 bytes)`);let{proofValue:k,...D}=Z,P=M({versionId:N.versionId}),I=M(D),F=await _(P),x=await _(I),z=d(x,F),O;try{O=H(k).bytes}catch(j){throw new Error(`Failed to decode signature: ${j.message}`)}if(!await Y.verify(O,z,X.slice(2)))throw new Error("Invalid witness proof signature");U++,Q.add(q.id)}catch(R){throw new Error(`Invalid witness proof: ${R.message}`)}}if(U<parseInt($.threshold?.toString()??"0"))throw new Error(`Witness threshold not met: got ${U}, need ${$.threshold}`)}var TN=(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_KEY_IS_AUTHORIZED")==="true")return!0;if(N.startsWith("did:key:")){let Y=N.split("did:key:")[1].split("#")[0];return K.some((Q)=>{let J=Q;if(Q.startsWith("did:key:"))J=Q.split("did:key:")[1].split("#")[0];return J===Y})}return!1},WN=(N,K)=>{if(B.getEnvValue("IGNORE_WITNESS_IS_AUTHORIZED")==="true")return!0;if(N.startsWith("did:webvh:")){let $=N.split("#")[0];return K.includes($)}return!1},S=async(N,K,$,Y,U)=>{if(B.getEnvValue("IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID")==="true")return!0;if(!U)throw new Error("Verifier implementation is required");let{proof:Q,...J}=N;if(!Array.isArray(Q))Q=[Q];if($&&$.witnesses&&$.witnesses.length>0){if(!Y)l($)}for(let Z=0;Z<Q.length;Z++){let q=Q[Z];if(q.verificationMethod.startsWith("did:key:")){if(!TN(q.verificationMethod,K))throw new Error(`Key ${q.verificationMethod} is not authorized to update.`)}else if(q.verificationMethod.startsWith("did:webvh:")){if($&&$.witnesses&&$.witnesses.length>0&&!WN(q.verificationMethod,$.witnesses.map((O)=>O.id)))throw new Error(`Key ${q.verificationMethod} is not from an authorized witness.`)}else throw new Error(`Unsupported verification method: ${q.verificationMethod}`);if(q.type!=="DataIntegrityProof")throw new Error(`Unknown proof type ${q.type}`);if(q.proofPurpose!=="authentication"&&q.proofPurpose!=="assertionMethod")throw new Error(`Unknown proof purpose ${q.proofPurpose}`);if(q.cryptosuite!=="eddsa-jcs-2022")throw new Error(`Unknown cryptosuite ${q.cryptosuite}`);let R=await Q0(q.verificationMethod);if(!R)throw new Error(`Verification Method ${q.verificationMethod} not found`);let X=H(R.publicKeyMultibase).bytes;if(X[0]!==237||X[1]!==1)throw new Error("multiKey doesn't include ed25519 header (0xed01)");let{proofValue:k,...D}=q,P=H(k).bytes,I=await _(M(J)),F=await _(M(D)),x=d(F,I);if(!await U.verify(P,x,X.slice(2)))throw new Error(`Proof ${Z} failed verification (proofValue: ${k})`)}return!0},X0=(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_HASH_CHAIN_IS_VALID")==="true")return!0;return N===K},q0=async(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_NEW_KEYS_ARE_VALID")==="true")return!0;if(K.length>0)for(let $ of N){let Y=await d0($);if(!K.includes(Y))throw new Error(`Invalid update key ${Y}. Not found in nextKeyHashes ${K}`)}return!0},R0=async(N,K)=>{if(B.getEnvValue("IGNORE_ASSERTION_SCID_IS_FROM_HASH")==="true")return!0;return N===await n(K)};var jN="1.0",BN=`did:${r}:${jN}`,h0=async(N)=>{if(!N.updateKeys)throw new Error("Update keys not supplied");if(N.witness&&N.witness.witnesses&&N.witness.witnesses.length>0)l(N.witness);let K=encodeURIComponent(N.domain),$=N.paths?.join(":"),Y=`did:${r}:${w}:${K}${$?`:${$}`:""}`,U=V(N.created),Q=N.verificationMethods?.map((F)=>{if(F.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:x,...z}=F;return z}return F}),{doc:J}=await p({...N,controller:Y,verificationMethods:Q}),Z={scid:w,updateKeys:N.updateKeys,portable:N.portable??!1,nextKeyHashes:N.nextKeyHashes??[],watchers:N.watchers??[],witness:N.witness??{},deactivated:!1},q={versionId:w,versionTime:U,parameters:{method:BN,...Z},state:J},R=await g(q);Z.scid=await n(R),q.state=J;let X=JSON.parse(JSON.stringify(q).replaceAll(w,Z.scid)),k=await g(X);X.versionId=`1-${k}`;let D=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod"}}),P=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod",proofValue:D.proofValue}];if(X.proof=P,!await S({...X,versionId:`1-${k}`},Z.updateKeys,Z.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);return{did:X.state.id,doc:X.state,meta:{versionId:X.versionId,created:X.versionTime,updated:X.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z},log:[X]}},e=async(N,K={})=>{if(K.verificationMethod&&(K.versionNumber||K.versionId))throw new Error("Cannot specify both verificationMethod and version number/id");let $=N.map((x)=>W(x)),Y="",U=null,Q=null,J=null,Z={versionId:"",created:"",updated:"",deactivated:!1,portable:!1,scid:"",updateKeys:[],nextKeyHashes:[],prerotation:!1,witness:void 0,watchers:null},q=null,R=null,X=0,k="",D=K.fastResolve??!0,P=(x)=>x===0,I=(x)=>x>=$.length-10,F=(x)=>!D||P(x)||I(x);try{while(X<$.length){let{versionId:x,versionTime:z,parameters:O,state:y,proof:j}=$[X],[c,b]=x.split("-");if(parseInt(c)!==X+1)throw new Error(`version '${c}' in log doesn't match expected '${X+1}'.`);Z.versionId=x,Z.updated=z;let A=y;if(c==="1"){if(Z.created=z,A=y,k=A.id.split(":").at(-1),Z.scid=O.scid,Z.portable=O.portable??Z.portable,Z.updateKeys=O.updateKeys,Z.nextKeyHashes=O.nextKeyHashes||[],Z.prerotation=Z.nextKeyHashes.length>0,Z.witness=O.witness||Z.witness,Z.watchers=O.watchers??null,F(X)){let G={versionId:w,versionTime:Z.created,parameters:L(O,Z.scid,w),state:L(A,Z.scid,w)},T=await g(G);if(Z.previousLogEntryHash=T,!await R0(Z.scid,T))throw new Error(`SCID '${Z.scid}' not derived from logEntryHash '${T}'`);let v=L(G,w,Z.scid),z0=await g(v);if(!await S({...v,versionId:`1-${z0}`,proof:j},Z.updateKeys,Z.witness,!1,K.verifier))throw new Error(`version ${Z.versionId} failed verification of the proof.`)}}else{let G=A.id.split(":").at(-1);if(!Z.portable&&G!==k)throw new Error("Cannot move DID: portability is disabled");else if(G!==k)k=G;if(F(X)){let T=Z.prerotation?O.updateKeys:Z.updateKeys;if(!await S($[X],T,Z.witness,!1,K.verifier))throw new Error(`version ${Z.versionId} failed verification of the proof.`);if(!X0(`${X+1}-${b}`,x))throw new Error(`Hash chain broken at '${Z.versionId}'`);if(Z.prerotation)await q0(O.updateKeys??[],Z.nextKeyHashes??[])}if(O.updateKeys)Z.updateKeys=O.updateKeys;if(O.deactivated===!0)Z.deactivated=!0;if(O.nextKeyHashes)Z.nextKeyHashes=O.nextKeyHashes,Z.prerotation=!0;else Z.nextKeyHashes=[],Z.prerotation=!1;if("witness"in O)Z.witness=O.witness;else if(O.witnesses)Z.witness={witnesses:O.witnesses,threshold:O.witnessThreshold||O.witnesses.length};if("watchers"in O)Z.watchers=O.watchers??null}if(U=W(A),Y=U.id,F(X)||X===$.length-1){U.service=U.service||[];let G=a(Y);if(!U.service.some((T)=>T.id==="#files"))U.service.push({id:"#files",type:"relativeRef",serviceEndpoint:G});if(!U.service.some((T)=>T.id==="#whois"))U.service.push({"@context":"https://identity.foundation/linked-vp/contexts/v1",id:"#whois",type:"LinkedVerifiablePresentation",serviceEndpoint:`${G}/whois.vp`})}if(K.verificationMethod&&s(U,K.verificationMethod)){if(!Q)Q=W(U),q={...Z}}if(K.versionNumber===parseInt(c)||K.versionId===Z.versionId){if(!Q)Q=W(U),q={...Z}}if(K.versionTime&&K.versionTime>new Date(Z.updated)){if($[X+1]&&K.versionTime<new Date($[X+1].versionTime)){if(!Q)Q=W(U),q={...Z}}else if(!$[X+1]){if(!Q)Q=W(U),q={...Z}}}if(Z.witness&&X===$.length-1){if(!K.witnessProofs)K.witnessProofs=await t(Y);let G=K.witnessProofs.filter((T)=>{return T.versionId===Z.versionId});if(G.length>0)await J0($[X],G,Z.witness,K.verifier);else if(Z.witness&&Z.witness.threshold&&parseInt(Z.witness.threshold.toString())>0)throw new Error("No witness proofs found for version "+Z.versionId)}J=W(U),R={...Z},X++}}catch(x){if(!Q)throw x}if(!Q)Q=J,q=R;if(!q)throw new Error("DID resolution failed: No valid metadata found");return{did:Y,doc:Q,meta:q}},m0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await e(K,{verifier:N.verifier,witnessProofs:N.witnessProofs})).meta;if(Y.deactivated)throw new Error("Cannot update deactivated DID");let U=K.length+1,Q=V(N.updated),J=N.watchers!==void 0?N.watchers:Y.watchers,Z={updateKeys:N.updateKeys??[],nextKeyHashes:N.nextKeyHashes??[],witness:N.witness!==void 0&&N.witness!==null?{witnesses:N.witness?.witnesses||[],threshold:N.witness?.threshold||0}:{},watchers:J??[]},q=N.verificationMethods?.map((O)=>{if(O.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:y,...j}=O;return j}return O}),{doc:R}=await p({...N,controller:N.controller||$.state.id||"",context:N.context||$.state["@context"],domain:N.domain??$.state.id?.split(":").at(-1)??"",updateKeys:N.updateKeys??[],verificationMethods:q??[]});if(N.services&&N.services.length>0)R.service=N.services;if(N.assertionMethod)R.assertionMethod=N.assertionMethod;if(N.keyAgreement)R.keyAgreement=N.keyAgreement;let X={versionId:w,versionTime:Q,parameters:Z,state:R},k=await g(X),D=`${U}-${k}`,P={...X,versionId:D},I=await N.signer.sign({document:P,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),F=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:I.proofValue}];if(P.proof=F,!await S(P,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${P.versionId} is invalid.`);let z={...Y,versionId:P.versionId,updated:P.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z};return{did:P.state.id,doc:P.state,meta:z,log:[...K,P]}},n0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await e(K,{verifier:N.verifier})).meta;if(Y.deactivated)throw new Error("DID already deactivated");let U=K.length+1,Q=V(),J={updateKeys:N.updateKeys??Y.updateKeys,deactivated:!0},Z={versionId:w,versionTime:Q,parameters:J,state:$.state},q=await g(Z),R=`${U}-${q}`,X={...Z,versionId:R},k=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),D=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:k.proofValue}];if(X.proof=D,!await S(X,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let I={...Y,versionId:X.versionId,updated:X.versionTime,deactivated:!0,updateKeys:J.updateKeys};return{did:X.state.id,doc:X.state,meta:I,log:[...K,X]}};var _N="0.5",p0=`did:${r}:${_N}`,l0=async(N)=>{if(!N.updateKeys)throw new Error("Update keys not supplied");if(N.witness&&N.witness.witnesses&&N.witness.witnesses.length>0)l(N.witness);let K=encodeURIComponent(N.domain),$=N.paths?.join(":"),Y=`did:${r}:${w}:${K}${$?`:${$}`:""}`,U=V(N.created),Q=N.verificationMethods?.map((x)=>{if(x.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:z,...O}=x;return O}return x}),{doc:J}=await p({...N,controller:Y,verificationMethods:Q}),Z={scid:w,updateKeys:N.updateKeys,portable:N.portable??!1,nextKeyHashes:N.nextKeyHashes??[],watchers:N.watchers??null,...N.witness?{witness:N.witness}:{},deactivated:!1},q={versionId:w,versionTime:U,parameters:{method:p0,...Z},state:J},R=await g(q);Z.scid=await n(R),q.state=J;let X=JSON.parse(JSON.stringify(q).replaceAll(w,Z.scid)),k=await g(X);X.versionId=`1-${k}`;let D=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod"}}),P=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:U,proofPurpose:"assertionMethod",proofValue:D.proofValue}];if(X.proof=P,!await S({...X,versionId:`1-${k}`,proof:X.proof},Z.updateKeys,Z.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let F={};if(Z.witness)F={...Z.witness,threshold:Z.witness.threshold?.toString()||"0"};return{did:X.state.id,doc:X.state,meta:{versionId:X.versionId,created:X.versionTime,updated:X.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z,witness:F},log:[X]}},o=async(N,K={})=>{if(K.verificationMethod&&(K.versionNumber||K.versionId))throw new Error("Cannot specify both verificationMethod and version number/id");let $=N.map((F)=>W(F)),Y=$[0].parameters.method;if(Y!==p0)throw new Error(`'${Y}' protocol unknown.`);let U={},Q="",J={versionId:"",created:"",updated:"",previousLogEntryHash:"",scid:"",prerotation:!1,portable:!1,nextKeyHashes:[],deactivated:!1,updateKeys:[],witness:void 0,watchers:null},Z="",q=0,R=null,X=null,k=null,D=null;try{while(q<$.length){let{versionId:F,versionTime:x,parameters:z,state:O,proof:y}=$[q],[j,c]=F.split("-");if(parseInt(j)!==q+1)throw new Error(`version '${j}' in log doesn't match expected '${q+1}'.`);J.versionId=F,J.updated=x;let b=O;if(j==="1"){J.created=x,b=O,Z=b.id.split(":").at(-1),J.scid=z.scid,J.portable=z.portable??J.portable,J.updateKeys=z.updateKeys,J.nextKeyHashes=z.nextKeyHashes||[],J.prerotation=J.nextKeyHashes.length>0,J.witness=z.witness||J.witness,J.watchers=z.watchers??null,J.nextKeyHashes=z.nextKeyHashes??[];let G={versionId:w,versionTime:J.created,parameters:L(z,J.scid,w),state:L(b,J.scid,w)},T=await g(G);if(J.previousLogEntryHash=T,!await R0(J.scid,T))throw new Error(`SCID '${J.scid}' not derived from logEntryHash '${T}'`);let v=L(G,w,J.scid),z0=await g(v);if(!await S({...v,versionId:`1-${z0}`,proof:y},J.updateKeys,J.witness,!1,K.verifier))throw new Error(`version ${J.versionId} failed verification of the proof.`)}else{let G=b.id.split(":").at(-1);if(!J.portable&&G!==Z)throw new Error("Cannot move DID: portability is disabled");else if(G!==Z)Z=G;let T=J.prerotation?z.updateKeys:J.updateKeys;if(!await S($[q],T,J.witness,!1,K.verifier))throw new Error(`version ${J.versionId} failed verification of the proof.`);if(!X0(`${q+1}-${c}`,F))throw new Error(`Hash chain broken at '${J.versionId}'`);if(J.prerotation)await q0(z.updateKeys??[],J.nextKeyHashes??[]);if(z.updateKeys)J.updateKeys=z.updateKeys;if(z.deactivated===!0)J.deactivated=!0;if(z.nextKeyHashes)J.nextKeyHashes=z.nextKeyHashes,J.prerotation=!0;else J.nextKeyHashes=[],J.prerotation=!1;if("witness"in z)J.witness=z.witness;else if(z.witnesses)J.witness={witnesses:z.witnesses,threshold:z.witnessThreshold||z.witnesses.length.toString()};if("watchers"in z)J.watchers=z.watchers??null}U=W(b),Q=U.id,U.service=U.service||[];let A=a(Q);if(!U.service.some((G)=>G.id==="#files"))U.service.push({id:"#files",type:"relativeRef",serviceEndpoint:A});if(!U.service.some((G)=>G.id==="#whois"))U.service.push({"@context":"https://identity.foundation/linked-vp/contexts/v1",id:"#whois",type:"LinkedVerifiablePresentation",serviceEndpoint:`${A}/whois.vp`});if(K.verificationMethod&&s(U,K.verificationMethod)){if(!R)R=W(U),X={...J}}if(K.versionNumber===parseInt(j)||K.versionId===J.versionId){if(!R)R=W(U),X={...J}}if(K.versionTime&&K.versionTime>new Date(J.updated)){if($[q+1]&&K.versionTime<new Date($[q+1].versionTime)){if(!R)R=W(U),X={...J}}else if(!$[q+1]){if(!R)R=W(U),X={...J}}}if(J.witness&&q===$.length-1){if(!K.witnessProofs)K.witnessProofs=await t(Q);let G=K.witnessProofs.filter((T)=>{return T.versionId===J.versionId});if(G.length>0)await J0($[q],G,J.witness,K.verifier);else if(J.witness&&J.witness.threshold&&parseInt(J.witness.threshold.toString())>0)throw new Error("No witness proofs found for version "+J.versionId)}k=W(U),D={...J},q++}}catch(F){if(!R)throw F}if(!k||!D)throw new Error("DID log is invalid");let P=R||k,I=X||D;if(I.latestVersionId=D.versionId,I.witness)I.witness.threshold=I.witness.threshold?.toString()||"0";return{did:P.id,doc:P,meta:I}},i0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await o(K,{verifier:N.verifier,witnessProofs:N.witnessProofs})).meta;if(Y.deactivated)throw new Error("Cannot update deactivated DID");let U=K.length+1,Q=V(N.updated),J=N.watchers!==void 0?N.watchers:Y.watchers,Z={updateKeys:N.updateKeys??[],nextKeyHashes:N.nextKeyHashes??[],...N.witness===null?{witness:{}}:N.witness!==void 0?{witnesses:N.witness?.witnesses||[],threshold:N.witness?.threshold||"0"}:{},watchers:J??null},q=N.verificationMethods?.map((O)=>{if(O.secretKeyMultibase){console.warn("Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents");let{secretKeyMultibase:y,...j}=O;return j}return O}),{doc:R}=await p({...N,controller:N.controller||$.state.id||"",context:N.context||$.state["@context"],domain:N.domain??$.state.id?.split(":").at(-1)??"",updateKeys:N.updateKeys??[],verificationMethods:q??[]});if(N.services&&N.services.length>0)R.service=N.services;if(N.assertionMethod)R.assertionMethod=N.assertionMethod;if(N.keyAgreement)R.keyAgreement=N.keyAgreement;let X={versionId:w,versionTime:Q,parameters:Z,state:R},k=await g(X),D=`${U}-${k}`,P={...X,versionId:D},I=await N.signer.sign({document:P,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),F=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:I.proofValue}];if(P.proof=F,!await S(P,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${P.versionId} is invalid.`);let z={...Y,versionId:P.versionId,updated:P.versionTime,prerotation:(Z.nextKeyHashes?.length??0)>0,...Z};return{did:P.state.id,doc:P.state,meta:z,log:[...K,P]}},a0=async(N)=>{let K=N.log,$=K[K.length-1],Y=(await o(K,{verifier:N.verifier})).meta;if(Y.deactivated)throw new Error("DID already deactivated");let U=K.length+1,Q=V(),J={updateKeys:N.updateKeys??Y.updateKeys,deactivated:!0},Z={versionId:w,versionTime:Q,parameters:J,state:$.state},q=await g(Z),R=`${U}-${q}`,X={...Z,versionId:R},k=await N.signer.sign({document:X,proof:{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod"}}),D=[{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N.signer.getVerificationMethodId(),created:Q,proofPurpose:"assertionMethod",proofValue:k.proofValue}];if(X.proof=D,!await S(X,Y.updateKeys,Y.witness,!0,N.verifier))throw new Error(`version ${X.versionId} is invalid.`);let I={...Y,versionId:X.versionId,updated:X.versionTime,deactivated:!0,updateKeys:J.updateKeys};return{did:X.state.id,doc:X.state,meta:I,log:[...K,X]}};var O0="1.0";function s0(N){if(!N)return O0;let K=N.match(/^did:webvh:(\d+\.\d+)$/);return K?K[1]:O0}function P0(N){if(N&&N.length>0&&N[0].parameters&&N[0].parameters.method)return s0(N[0].parameters.method);return O0}function j0(N){if(N&&N.method)return s0(N.method);return O0}var MN=async(N)=>{let $=j0(N)==="0.5"?await l0(N):await h0(N);return E($.did,$.log),$},CN=async(N,K={})=>{let Y=(await r0()).includes(N),U=void 0,Q=N.split(":");if(Q.length>2&&Q[0]==="did"&&Q[1]==="webvh")U=Q[2];try{let J=await H0(N,Y),Z=P0(J),q={...K,scid:U};if(Z==="0.5"){let X=await o(J,q);return E(X.did,J),{...X,controlled:Y}}let R=await e(J,q);return E(R.did,J),{...R,controlled:Y}}catch(J){let Z="INVALID_DID",q=J instanceof Error?J.message:String(J);if(/not found/i.test(q)||/404/.test(q))Z="notFound";return{did:N,doc:null,meta:{error:Z,problemDetails:{type:Z==="notFound"?"https://w3id.org/security#NOT_FOUND":"https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID",title:Z==="notFound"?"The DID Log or resource was not found.":"The resolved DID is invalid.",detail:q}},controlled:Y}}},W0=async(N,K={})=>{if(P0(N)==="0.5"){let U=await o(N,K);return E(U.did,N),U}let Y=await e(N,K);return E(Y.did,N),Y},LN=async(N)=>{let $=(N.log?P0(N.log):j0(N))==="0.5"?await i0(N):await m0(N);return E($.did,$.log),$},VN=async(N)=>{let $=(N.log?P0(N.log):j0(N))==="0.5"?await a0(N):await n0(N);return E($.did,$.log),$};var B0=(N)=>{return{type:"DataIntegrityProof",cryptosuite:"eddsa-jcs-2022",verificationMethod:N,created:V(),proofPurpose:"assertionMethod"}},uN=async(N,K)=>{let $=await _(M(N)),Y=await _(M(K));return d(Y,$)};class t0{verificationMethod;useStaticId;constructor(N){if(N.verificationMethod)this.verificationMethod=N.verificationMethod;this.useStaticId=N.useStaticId!==void 0?N.useStaticId:!0}getVerificationMethodId(){if(!this.verificationMethod)throw new Error("Verification method not set");return this.useStaticId?`did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`:this.verificationMethod.id||""}}var AN=(N,K)=>{return async($)=>{try{let Y=B0(K),U=await N.sign({document:$,proof:Y});return Y.proofValue=U.proofValue,{...$,proof:Y}}catch(Y){throw console.error(Y),new Error(`Document signing failure: ${Y.message||Y}`)}}},fN=(N,K=!0)=>{return console.warn("createSigner is deprecated. Use createDocumentSigner with your own Signer implementation instead."),async($)=>{try{let Y=K?`did:key:${N.publicKeyMultibase}#${N.publicKeyMultibase}`:N.id||"",U=B0(Y);throw new Error("createSigner is deprecated. Implement your own Signer and use createDocumentSigner instead.")}catch(Y){throw console.error(Y),new Error(`Document signing failure: ${Y.message||Y}`)}}};export{LN as updateDID,W0 as resolveDIDFromLog,CN as resolveDID,uN as prepareDataForSigning,qN as multibaseEncode,H as multibaseDecode,VN as deactivateDID,fN as createSigner,B0 as createProof,AN as createDocumentSigner,MN as createDID,C0 as MultibaseEncoding,t0 as AbstractCrypto};
 
-//# debugId=5703E6BC291103D464756E2164756E21
+//# debugId=17BC6A038725D66464756E2164756E21
diff --git a/dist/browser/index.js.map b/dist/browser/index.js.map
index 2683cbac6993e7f3f7a1936f7769514afef3b176..5c9f72c82ed288d521d1623c14510e2df0166263 100644
--- a/dist/browser/index.js.map
+++ b/dist/browser/index.js.map
@@ -11,15 +11,15 @@
     "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map",
     "/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map",
     "/// <reference lib=\"dom\" />\nimport { sha256 } from '@noble/hashes/sha2';\n\nfunction arrayBufferToHex(buffer: ArrayBufferLike | Uint8Array): string {\n  const view = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  return Array.from(view)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport async function createHash(data: string): Promise<Uint8Array> {\n  return sha256(data);\n}\n\nexport async function createHashHex(data: string): Promise<string> {\n  const hash = await createHash(data);\n  const view = new Uint8Array(hash.buffer);\n  return arrayBufferToHex(view);\n} ",
-    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
+    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: vm.id ?? createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
     "import { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { DataIntegrityProof, DIDLogEntry, WitnessEntry, WitnessProofFileEntry, Verifier, WitnessParameterResolution } from './interfaces';\nimport { resolveVM } from \"./utils\";\nimport { concatBuffers } from './utils/buffer';\nimport { fetchWitnessProofs } from './utils';\nimport { multibaseDecode } from './utils/multiformats';\n\nexport async function createWitnessProof(\n  signer: (doc: any) => Promise<{proof: any}>,\n  versionId: string\n): Promise<DataIntegrityProof> {\n  const proof = {\n    type: \"DataIntegrityProof\",\n    cryptosuite: \"eddsa-jcs-2022\",\n    created: new Date().toISOString(),\n    proofPurpose: \"authentication\"\n  };\n\n  const signedData = await signer({versionId});\n  \n  return {\n    ...proof,\n    ...signedData.proof\n  };\n}\n\nexport function validateWitnessParameter(witness: WitnessParameterResolution): void {\n  if (!witness.witnesses || !Array.isArray(witness.witnesses) || witness.witnesses.length === 0) {\n    throw new Error('Witness list cannot be empty');\n  }\n\n  if (!witness.threshold || parseInt(witness.threshold.toString()) < 1 || parseInt(witness.threshold.toString()) > witness.witnesses.length) {\n    throw new Error('Witness threshold must be between 1 and the number of witnesses');\n  }\n\n  const ids = new Set<string>();\n  for (const w of witness.witnesses) {\n    if (!w.id.startsWith('did:key:')) {\n      throw new Error('Witness DIDs must be did:key format');\n    }\n    if (ids.has(w.id)) {\n      throw new Error(`Duplicate witness id: ${w.id}`);\n    }\n    ids.add(w.id);\n  }\n}\n\nexport function calculateWitnessWeight(proofs: DataIntegrityProof[], witnesses: WitnessEntry[]): number {\n  const processed = new Set<string>();\n\n  for (const proof of proofs) {\n    const witness = witnesses.find(w => proof.verificationMethod.startsWith(w.id));\n    if (witness) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n      processed.add(witness.id);\n    }\n  }\n\n  return processed.size;\n}\n\nexport async function verifyWitnessProofs(\n  logEntry: DIDLogEntry,\n  witnessProofs: WitnessProofFileEntry[],\n  currentWitness: WitnessParameterResolution,\n  verifier?: Verifier\n): Promise<void> {\n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n\n  let approvals = 0;\n  const processedWitnesses = new Set<string>();\n\n  // Process each proof set\n  for (const proofSet of witnessProofs) {\n    // Process each proof in the set\n    for (const proof of proofSet.proof) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n\n      const witness = currentWitness.witnesses?.find(w => proof.verificationMethod.startsWith(w.id));\n      if (!witness) {\n        throw new Error('Proof from unauthorized witness');\n      }\n\n      if (processedWitnesses.has(witness.id)) {\n        continue; // Skip duplicate proofs from same witness\n      }\n\n      try {\n        // Resolve verification method\n        const vm = await resolveVM(proof.verificationMethod);\n        if (!vm) {\n          throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n        }\n\n        // Decode public key\n        let publicKey: Uint8Array;\n        try {\n          publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode public key: ${error.message}`);\n        }\n        \n        if (publicKey.length !== 34) {\n          throw new Error(`Invalid public key length ${publicKey.length} (should be 34 bytes)`);\n        }\n\n        // Extract proof value and prepare data for verification\n        const { proofValue, ...proofWithoutValue } = proof;\n        \n        // Create hashes\n        const canonicalizedData = canonicalize({versionId: logEntry.versionId});\n        const canonicalizedProof = canonicalize(proofWithoutValue);\n        \n        const dataHash = await createHash(canonicalizedData);\n        const proofHash = await createHash(canonicalizedProof);\n        \n        // Concatenate buffers\n        const input = concatBuffers(proofHash, dataHash);\n\n        // Decode signature\n        let signature: Uint8Array;\n        try {\n          signature = multibaseDecode(proofValue).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode signature: ${error.message}`);\n        }\n\n        // Verify signature\n        const verified = await verifier.verify(\n          signature,\n          input,\n          publicKey.slice(2)\n        );\n\n        if (!verified) {\n          throw new Error('Invalid witness proof signature');\n        }\n\n        approvals++;\n        processedWitnesses.add(witness.id);\n\n      } catch (error: any) {\n        throw new Error(`Invalid witness proof: ${error.message}`);\n      }\n    }\n  }\n\n  if (approvals < parseInt(currentWitness.threshold?.toString() ?? '0')) {\n    throw new Error(`Witness threshold not met: got ${approvals}, need ${currentWitness.threshold}`);\n  }\n}\n\nexport { fetchWitnessProofs }; ",
     "import { createSCID, deriveNextKeyHash, resolveVM } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport { config } from './config';\nimport { concatBuffers } from './utils/buffer';\nimport { WitnessParameter, Verifier, WitnessParameterResolution } from './interfaces';\nimport { validateWitnessParameter } from './witness';\nimport { multibaseDecode } from \"./utils/multiformats\";\n\nconst isKeyAuthorized = (verificationMethod: string, updateKeys: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_ASSERTION_KEY_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:key:')) {\n    const keyParts = verificationMethod.split('did:key:')[1].split('#');\n    const key = keyParts[0];\n    \n    const authorized = updateKeys.some(updateKey => {\n      let updateKeyPart = updateKey;\n      if (updateKey.startsWith('did:key:')) {\n        updateKeyPart = updateKey.split('did:key:')[1].split('#')[0];\n      }\n      \n      return updateKeyPart === key;\n    });\n    \n    return authorized;\n  }\n  return false;\n};\n\nconst isWitnessAuthorized = (verificationMethod: string, witnesses: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_WITNESS_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:webvh:')) {\n    const didWithoutFragment = verificationMethod.split('#')[0];\n    return witnesses.includes(didWithoutFragment);\n  }\n  return false;\n};\n\nexport const documentStateIsValid = async (\n  doc: any, \n  updateKeys: string[], \n  witness: WitnessParameterResolution | undefined | null,\n  skipWitnessVerification?: boolean,\n  verifier?: Verifier\n) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID') === 'true') {\n    return true;\n  }\n  \n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n  \n  let {proof: proofs, ...rest} = doc;\n  if (!Array.isArray(proofs)) {\n    proofs = [proofs];\n  }\n\n  if (witness && witness.witnesses && witness.witnesses.length > 0) {\n    if (!skipWitnessVerification) {\n      validateWitnessParameter(witness);\n    }\n  }\n\n  for (let i = 0; i < proofs.length; i++) {\n    const proof = proofs[i];\n\n    if (proof.verificationMethod.startsWith('did:key:')) {\n      if (!isKeyAuthorized(proof.verificationMethod, updateKeys)) {\n        throw new Error(`Key ${proof.verificationMethod} is not authorized to update.`);\n      }\n    } else if (proof.verificationMethod.startsWith('did:webvh:')) {\n      if (witness && witness.witnesses && witness.witnesses.length > 0 && !isWitnessAuthorized(proof.verificationMethod, witness.witnesses.map((w: {id: string}) => w.id))) {\n        throw new Error(`Key ${proof.verificationMethod} is not from an authorized witness.`);\n      }\n    } else {\n      throw new Error(`Unsupported verification method: ${proof.verificationMethod}`);\n    }\n    \n    if (proof.type !== 'DataIntegrityProof') {\n      throw new Error(`Unknown proof type ${proof.type}`);\n    }\n    if (proof.proofPurpose !== 'authentication' && proof.proofPurpose !== 'assertionMethod') {\n      throw new Error(`Unknown proof purpose ${proof.proofPurpose}`);\n    }\n    if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n      throw new Error(`Unknown cryptosuite ${proof.cryptosuite}`);\n    }\n\n    const vm = await resolveVM(proof.verificationMethod);\n    if (!vm) {\n      throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n    }\n\n    const publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n    if (publicKey[0] !== 0xed || publicKey[1] !== 0x01) {\n      throw new Error(`multiKey doesn't include ed25519 header (0xed01)`);\n    }\n\n    const {proofValue, ...restProof} = proof;\n    const signature = multibaseDecode(proofValue).bytes;\n    const dataHash = await createHash(canonicalize(rest));\n    const proofHash = await createHash(canonicalize(restProof));\n    const input = concatBuffers(proofHash, dataHash);\n\n    const verified = await verifier.verify(\n      signature,\n      input,\n      publicKey.slice(2)\n    );\n    \n    if (!verified) {\n      throw new Error(`Proof ${i} failed verification (proofValue: ${proofValue})`);\n    }\n  }\n  return true;\n}\n\nexport const hashChainValid = (derivedHash: string, logEntryHash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_HASH_CHAIN_IS_VALID') === 'true') return true;\n  return derivedHash === logEntryHash;\n}\n\nexport const newKeysAreInNextKeys = async (updateKeys: string[], previousNextKeyHashes: string[]) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_NEW_KEYS_ARE_VALID') === 'true') return true;\n\n  if (previousNextKeyHashes.length > 0) {\n    for (const key of updateKeys) {\n      const keyHash = await deriveNextKeyHash(key);\n      if (!previousNextKeyHashes.includes(keyHash)) {\n        throw new Error(`Invalid update key ${keyHash}. Not found in nextKeyHashes ${previousNextKeyHashes}`);\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const scidIsFromHash = async (scid: string, hash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_SCID_IS_FROM_HASH') === 'true') return true;\n  return scid === await createSCID(hash);\n}\n",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
     "import { fetchLogFromIdentifier, getActiveDIDs, maybeWriteTestLog } from \"./utils\";\nimport type { CreateDIDInterface, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry } from './interfaces';\nimport * as v1 from './method_versions/method.v1.0';\nimport * as v0_5 from './method_versions/method.v0.5';\n\nconst LATEST_VERSION = '1.0';\n\nfunction getWebvhVersionFromMethod(method?: string): string {\n  if (!method) return LATEST_VERSION;\n  const match = method.match(/^did:webvh:(\\d+\\.\\d+)$/);\n  return match ? match[1] : LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromLog(log: DIDLog): string {\n  if (log && log.length > 0 && log[0].parameters && log[0].parameters.method) {\n    return getWebvhVersionFromMethod(log[0].parameters.method);\n  }\n  return LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromOptions(options: any): string {\n  if (options && options.method) {\n    return getWebvhVersionFromMethod(options.method);\n  }\n  return LATEST_VERSION;\n}\n\nexport const createDID = async (options: CreateDIDInterface) => {\n  const version = getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.createDID(options)\n    : await v1.createDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const resolveDID = async (did: string, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], scid?: string } = {}) => {\n  const activeDIDs = await getActiveDIDs();\n  const controlled = activeDIDs.includes(did);\n  let scid: string | undefined = undefined;\n  const didParts = did.split(\":\");\n  if (didParts.length > 2 && didParts[0] === \"did\" && didParts[1] === \"webvh\") {\n    scid = didParts[2];\n  }\n  try {\n    const log = await fetchLogFromIdentifier(did, controlled);\n    const version = getWebvhVersionFromLog(log);\n    const optsWithScid = { ...options, scid };\n    if (version === '0.5') {\n      const result = await v0_5.resolveDIDFromLog(log, optsWithScid);\n      maybeWriteTestLog(result.did, log);\n      return { ...result, controlled };\n    }\n    const result = await v1.resolveDIDFromLog(log, optsWithScid);\n    maybeWriteTestLog(result.did, log);\n    return { ...result, controlled };\n  } catch (e: any) {\n    let errorType = 'INVALID_DID';\n    const message = e instanceof Error ? e.message : String(e);\n    if (/not found/i.test(message) || /404/.test(message)) {\n      errorType = 'notFound';\n    }\n    return {\n      did,\n      doc: null,\n      meta: {\n        error: errorType,\n        problemDetails: {\n          type: errorType === 'notFound'\n            ? 'https://w3id.org/security#NOT_FOUND'\n            : 'https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID',\n          title: errorType === 'notFound'\n            ? 'The DID Log or resource was not found.'\n            : 'The resolved DID is invalid.',\n          detail: message\n        }\n      },\n      controlled\n    };\n  }\n};\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}) => {\n  const version = getWebvhVersionFromLog(log);\n  if (version === '0.5') {\n    const result = await v0_5.resolveDIDFromLog(log, options);\n    maybeWriteTestLog(result.did, log);\n    return result;\n  }\n  const result = await v1.resolveDIDFromLog(log, options);\n  maybeWriteTestLog(result.did, log);\n  return result;\n};\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.updateDID(options)\n    : await v1.updateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.deactivateDID(options)\n    : await v1.deactivateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n",
     "import { createDate } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { VerificationMethod, SigningInput, SigningOutput, Signer, SignerOptions, Verifier } from './interfaces';\nimport { concatBuffers } from './utils/buffer';\n\n/**\n * Creates a proof object for a document\n * @param verificationMethodId - The verification method ID to use in the proof\n * @returns A proof object with type, cryptosuite, verificationMethod, created, and proofPurpose\n */\nexport const createProof = (verificationMethodId: string): any => {\n  return {\n    type: 'DataIntegrityProof',\n    cryptosuite: 'eddsa-jcs-2022',\n    verificationMethod: verificationMethodId,\n    created: createDate(),\n    proofPurpose: 'assertionMethod'\n  };\n};\n\n/**\n * Prepares data for signing by hashing and concatenating the document and proof\n * @param document - The document to sign\n * @param proof - The proof object\n * @returns The prepared data for signing as a Uint8Array\n */\nexport const prepareDataForSigning = async (document: any, proof: any): Promise<Uint8Array> => {\n  const dataHash = await createHash(canonicalize(document));\n  const proofHash = await createHash(canonicalize(proof));\n  return concatBuffers(proofHash, dataHash);\n};\n\n/**\n * Abstract base class for signers\n * Users should extend this class to implement their own signing logic\n */\nexport abstract class AbstractCrypto implements Signer, Verifier {\n  protected verificationMethod?: VerificationMethod | null;\n  protected useStaticId: boolean;\n\n  constructor(options: SignerOptions) {\n    if (options.verificationMethod) {\n      this.verificationMethod = options.verificationMethod;\n    }\n    this.useStaticId = options.useStaticId !== undefined ? options.useStaticId : true;\n  }\n\n  /**\n   * Sign the input data\n   * @param input - The signing input containing the document and proof\n   * @returns The signing output containing the proof value\n   */\n  abstract sign(input: SigningInput): Promise<SigningOutput>;\n\n  /**\n   * Verify a signature\n   * @param signature - The signature to verify\n   * @param message - The message to verify\n   * @param publicKey - The public key to verify the signature with\n   */\n  abstract verify(signature: Uint8Array, message: Uint8Array, publicKey: Uint8Array): Promise<boolean>;\n\n  /**\n   * Get the verification method ID\n   * @returns The verification method ID\n   */\n  getVerificationMethodId(): string {\n    if (!this.verificationMethod) {\n      throw new Error('Verification method not set');\n    }\n    return this.useStaticId \n      ? `did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`\n      : this.verificationMethod.id || '';\n  }\n}\n\n/**\n * Creates a document signer from any Signer implementation\n * @param signer - The signer to use\n * @param verificationMethodId - The verification method ID to use in proofs\n * @returns A function that signs a document and returns the document with proof\n */\nexport const createDocumentSigner = (signer: Signer, verificationMethodId: string) => {\n  return async (doc: any) => {\n    try {\n      const proof = createProof(verificationMethodId);\n      const result = await signer.sign({ document: doc, proof });\n      \n      proof.proofValue = result.proofValue;\n      return { ...doc, proof };\n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n\n/**\n * @deprecated Use createDocumentSigner with your own Signer implementation instead\n */\nexport const createSigner = (vm: VerificationMethod, useStatic: boolean = true) => {\n  console.warn('createSigner is deprecated. Use createDocumentSigner with your own Signer implementation instead.');\n  \n  return async (doc: any) => {\n    try {\n      const verificationMethodId = useStatic \n        ? `did:key:${vm.publicKeyMultibase}#${vm.publicKeyMultibase}` \n        : vm.id || '';\n      \n      const proof = createProof(verificationMethodId);\n      \n      // This is a placeholder for backward compatibility\n      // Users should implement their own signing logic\n      throw new Error('createSigner is deprecated. Implement your own Signer and use createDocumentSigner instead.');\n      \n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n"
   ],
-  "mappings": "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",
-  "debugId": "5703E6BC291103D464756E2164756E21",
+  "mappings": "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",
+  "debugId": "17BC6A038725D66464756E2164756E21",
   "names": []
 }
\ No newline at end of file
diff --git a/dist/cjs/index.cjs b/dist/cjs/index.cjs
index 82106b50b0133bef42934a030c6d1fe49bb09e32..c4015e8330b3c91f7f54a1bf11eb35787918b108 100644
--- a/dist/cjs/index.cjs
+++ b/dist/cjs/index.cjs
@@ -722,23 +722,27 @@ var getFS = async () => {
         const module2 = maybeRequire(fsModuleSpecifier);
         fsModule = module2;
         return module2;
-      } catch {}
+      } catch {
+      }
       try {
         const module2 = maybeRequire("fs");
         fsModule = module2;
         return module2;
-      } catch {}
+      } catch {
+      }
     }
     try {
       const module2 = require(fsModuleSpecifier);
       fsModule = module2;
       return module2;
-    } catch {}
+    } catch {
+    }
     try {
       const module2 = require("fs");
       fsModule = module2;
       return module2;
-    } catch {}
+    } catch {
+    }
     throw new Error("Filesystem access is not available in this environment (unable to load fs)");
   })();
   return fsImportPromise;
@@ -873,7 +877,8 @@ function setCachedHash(input, hash) {
   try {
     const key = JSON.stringify(input);
     hashCache.set(key, hash);
-  } catch {}
+  } catch {
+  }
 }
 async function deriveHash(input) {
   const cached = getCachedHash(input);
@@ -960,14 +965,14 @@ var normalizeVMs = (verificationMethod, did = null) => {
   }
   const vms = verificationMethod.map((vm) => ({
     ...vm,
-    id: createVMID(vm, did)
+    id: vm.id ?? createVMID(vm, did)
   }));
   all.verificationMethod = vms;
-  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => createVMID(vm, did));
-  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => createVMID(vm, did));
-  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => createVMID(vm, did));
-  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => createVMID(vm, did));
-  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => createVMID(vm, did));
+  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => vm.id ?? createVMID(vm, did));
+  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => vm.id ?? createVMID(vm, did));
+  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => vm.id ?? createVMID(vm, did));
   return all;
 };
 var resolveVM = async (vm) => {
@@ -1342,7 +1347,8 @@ var resolveDIDFromLog2 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -1740,7 +1746,8 @@ var resolveDIDFromLog3 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -2168,4 +2175,4 @@ var createSigner = (vm, useStatic = true) => {
   };
 };
 
-//# debugId=6CB4433AE48BF2A764756E2164756E21
+//# debugId=9BD49C3FACD4DB7464756E2164756E21
diff --git a/dist/cjs/index.js.map b/dist/cjs/index.js.map
index cd9918b024f0bc046667c47647d35bd7f8f214ae..650aefdebc3760c454f91528e5d1c129a672ebbf 100644
--- a/dist/cjs/index.js.map
+++ b/dist/cjs/index.js.map
@@ -3,7 +3,7 @@
   "sources": ["../../node_modules/json-canonicalize/bundles/index.umd.js", "../../src/utils.ts", "../../src/utils/buffer.ts", "../../src/config.ts", "../../src/constants.ts", "../../src/utils/multiformats.ts", "../../node_modules/@noble/hashes/esm/utils.js", "../../node_modules/@noble/hashes/esm/_md.js", "../../node_modules/@noble/hashes/esm/sha2.js", "../../src/utils/crypto.ts", "../../src/assertions.ts", "../../src/witness.ts", "../../src/method_versions/method.v1.0.ts", "../../src/method_versions/method.v0.5.ts", "../../src/method.ts", "../../src/cryptography.ts"],
   "sourcesContent": [
     "(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JsonCanonicalize = {}));\n}(this, (function (exports) { 'use strict';\n\n    function canonicalize(obj) {\n        var buffer = '';\n        serialize(obj);\n        return buffer;\n        function serialize(object) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    if (element === undefined) {\n                        element = null;\n                    }\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                var vKeys = Object.keys(object).filter(function (k) { return object[k] !== undefined; }).sort();\n                vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property]);\n        }\n    }\n\n    function canonicalizeEx(obj, options) {\n        var buffer = '';\n        var vInclude = options && options.include;\n        var vExclude = options && options.exclude;\n        if (vExclude) {\n            if (typeof vExclude === 'string')\n                vExclude = [vExclude];\n        }\n        if (vInclude)\n            vInclude.sort();\n        serialize(obj);\n        return buffer;\n        function serialize(object, parent) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element, object);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                if (!parent && vInclude) {\n                    vInclude.forEach(function (property, index) {\n                        if (!object.hasOwnProperty(property))\n                            return;\n                        addProp(object, property, index);\n                    });\n                }\n                else {\n                    var vKeys = Object.keys(object).sort();\n                    vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                }\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (vExclude && vExclude.length) {\n                for (var _i = 0, vExclude_1 = vExclude; _i < vExclude_1.length; _i++) {\n                    var v = vExclude_1[_i];\n                    if (v === property)\n                        return;\n                }\n            }\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property], object);\n        }\n    }\n\n    exports.canonicalize = canonicalize;\n    exports.canonicalizeEx = canonicalizeEx;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n",
-    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = require(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = require('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
+    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = require(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = require('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: vm.id ?? createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
     "import { config } from '../config';\n\n// Helper to convert bytes to hex string\nconst bytesToHex = (bytes: Uint8Array): string => {\n  return Array.from(bytes)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\n// Helper to convert hex string to bytes\nconst hexToBytes = (hex: string): Uint8Array => {\n  if (hex.length % 2 !== 0) {\n    throw new Error('Hex string must have an even number of characters');\n  }\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n  }\n  return bytes;\n};\n\n// Buffer polyfill for browser environments\nexport const createBuffer = (input: string, encoding?: BufferEncoding): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.from(input, encoding);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binaryString = atob(input);\n    return new Uint8Array(binaryString.length).map((_, i) => binaryString.charCodeAt(i));\n  }\n\n  // Default to UTF-8 encoding\n  return new TextEncoder().encode(input);\n};\n\nexport const bufferToString = (buffer: Uint8Array, encoding?: BufferEncoding): string => {\n  if (!config.isBrowser) {\n    return Buffer.from(buffer).toString(encoding);\n  }\n\n  // Handle hex encoding specifically\n  if (encoding === 'hex') {\n    return bytesToHex(buffer);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binary = String.fromCharCode(...buffer);\n    return btoa(binary);\n  }\n\n  // Default to UTF-8 encoding\n  return new TextDecoder().decode(buffer);\n};\n\nexport const concatBuffers = (...buffers: Uint8Array[]): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.concat(buffers);\n  }\n\n  // Calculate total length\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  \n  // Create new array and copy all buffers into it\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    result.set(buffer, offset);\n    offset += buffer.length;\n  }\n  \n  return result;\n}; ",
     "import { createBuffer, bufferToString } from './utils/buffer';\n\n// Helper to safely access environment variables\nconst isBrowser = typeof window !== 'undefined';\n\nconst getEnvValue = (key: string): string | undefined => {\n  if (isBrowser) return undefined;\n  try {\n    return process?.env?.[key];\n  } catch {\n    return undefined;\n  }\n};\n\nexport const config = {\n  // Helper functions\n  getEnvValue,\n  isBrowser,\n  \n  // Environment checks\n  isTestEnvironment: getEnvValue('NODE_ENV') === 'test',\n  \n  // Feature flags\n  logResolves: getEnvValue('LOG_RESOLVES') === 'true',\n  \n  // Get verification methods from env\n  getVerificationMethods: () => {\n    const encoded = getEnvValue('DID_VERIFICATION_METHODS');\n    if (!encoded) return [];\n    try {\n      const decoded = createBuffer(encoded, 'base64');\n      return JSON.parse(bufferToString(decoded));\n    } catch {\n      return [];\n    }\n  }\n}; ",
     "export const PLACEHOLDER = \"{SCID}\";\nexport const METHOD = \"webvh\";\nexport const BASE_CONTEXT = [\n  \"https://www.w3.org/ns/did/v1\",\n  \"https://w3id.org/security/multikey/v1\"\n];",
@@ -14,12 +14,12 @@
     "/// <reference lib=\"dom\" />\nimport { sha256 } from '@noble/hashes/sha2';\n\nfunction arrayBufferToHex(buffer: ArrayBufferLike | Uint8Array): string {\n  const view = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  return Array.from(view)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport async function createHash(data: string): Promise<Uint8Array> {\n  return sha256(data);\n}\n\nexport async function createHashHex(data: string): Promise<string> {\n  const hash = await createHash(data);\n  const view = new Uint8Array(hash.buffer);\n  return arrayBufferToHex(view);\n} ",
     "import { createSCID, deriveNextKeyHash, resolveVM } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport { config } from './config';\nimport { concatBuffers } from './utils/buffer';\nimport { WitnessParameter, Verifier, WitnessParameterResolution } from './interfaces';\nimport { validateWitnessParameter } from './witness';\nimport { multibaseDecode } from \"./utils/multiformats\";\n\nconst isKeyAuthorized = (verificationMethod: string, updateKeys: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_ASSERTION_KEY_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:key:')) {\n    const keyParts = verificationMethod.split('did:key:')[1].split('#');\n    const key = keyParts[0];\n    \n    const authorized = updateKeys.some(updateKey => {\n      let updateKeyPart = updateKey;\n      if (updateKey.startsWith('did:key:')) {\n        updateKeyPart = updateKey.split('did:key:')[1].split('#')[0];\n      }\n      \n      return updateKeyPart === key;\n    });\n    \n    return authorized;\n  }\n  return false;\n};\n\nconst isWitnessAuthorized = (verificationMethod: string, witnesses: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_WITNESS_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:webvh:')) {\n    const didWithoutFragment = verificationMethod.split('#')[0];\n    return witnesses.includes(didWithoutFragment);\n  }\n  return false;\n};\n\nexport const documentStateIsValid = async (\n  doc: any, \n  updateKeys: string[], \n  witness: WitnessParameterResolution | undefined | null,\n  skipWitnessVerification?: boolean,\n  verifier?: Verifier\n) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID') === 'true') {\n    return true;\n  }\n  \n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n  \n  let {proof: proofs, ...rest} = doc;\n  if (!Array.isArray(proofs)) {\n    proofs = [proofs];\n  }\n\n  if (witness && witness.witnesses && witness.witnesses.length > 0) {\n    if (!skipWitnessVerification) {\n      validateWitnessParameter(witness);\n    }\n  }\n\n  for (let i = 0; i < proofs.length; i++) {\n    const proof = proofs[i];\n\n    if (proof.verificationMethod.startsWith('did:key:')) {\n      if (!isKeyAuthorized(proof.verificationMethod, updateKeys)) {\n        throw new Error(`Key ${proof.verificationMethod} is not authorized to update.`);\n      }\n    } else if (proof.verificationMethod.startsWith('did:webvh:')) {\n      if (witness && witness.witnesses && witness.witnesses.length > 0 && !isWitnessAuthorized(proof.verificationMethod, witness.witnesses.map((w: {id: string}) => w.id))) {\n        throw new Error(`Key ${proof.verificationMethod} is not from an authorized witness.`);\n      }\n    } else {\n      throw new Error(`Unsupported verification method: ${proof.verificationMethod}`);\n    }\n    \n    if (proof.type !== 'DataIntegrityProof') {\n      throw new Error(`Unknown proof type ${proof.type}`);\n    }\n    if (proof.proofPurpose !== 'authentication' && proof.proofPurpose !== 'assertionMethod') {\n      throw new Error(`Unknown proof purpose ${proof.proofPurpose}`);\n    }\n    if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n      throw new Error(`Unknown cryptosuite ${proof.cryptosuite}`);\n    }\n\n    const vm = await resolveVM(proof.verificationMethod);\n    if (!vm) {\n      throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n    }\n\n    const publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n    if (publicKey[0] !== 0xed || publicKey[1] !== 0x01) {\n      throw new Error(`multiKey doesn't include ed25519 header (0xed01)`);\n    }\n\n    const {proofValue, ...restProof} = proof;\n    const signature = multibaseDecode(proofValue).bytes;\n    const dataHash = await createHash(canonicalize(rest));\n    const proofHash = await createHash(canonicalize(restProof));\n    const input = concatBuffers(proofHash, dataHash);\n\n    const verified = await verifier.verify(\n      signature,\n      input,\n      publicKey.slice(2)\n    );\n    \n    if (!verified) {\n      throw new Error(`Proof ${i} failed verification (proofValue: ${proofValue})`);\n    }\n  }\n  return true;\n}\n\nexport const hashChainValid = (derivedHash: string, logEntryHash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_HASH_CHAIN_IS_VALID') === 'true') return true;\n  return derivedHash === logEntryHash;\n}\n\nexport const newKeysAreInNextKeys = async (updateKeys: string[], previousNextKeyHashes: string[]) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_NEW_KEYS_ARE_VALID') === 'true') return true;\n\n  if (previousNextKeyHashes.length > 0) {\n    for (const key of updateKeys) {\n      const keyHash = await deriveNextKeyHash(key);\n      if (!previousNextKeyHashes.includes(keyHash)) {\n        throw new Error(`Invalid update key ${keyHash}. Not found in nextKeyHashes ${previousNextKeyHashes}`);\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const scidIsFromHash = async (scid: string, hash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_SCID_IS_FROM_HASH') === 'true') return true;\n  return scid === await createSCID(hash);\n}\n",
     "import { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { DataIntegrityProof, DIDLogEntry, WitnessEntry, WitnessProofFileEntry, Verifier, WitnessParameterResolution } from './interfaces';\nimport { resolveVM } from \"./utils\";\nimport { concatBuffers } from './utils/buffer';\nimport { fetchWitnessProofs } from './utils';\nimport { multibaseDecode } from './utils/multiformats';\n\nexport async function createWitnessProof(\n  signer: (doc: any) => Promise<{proof: any}>,\n  versionId: string\n): Promise<DataIntegrityProof> {\n  const proof = {\n    type: \"DataIntegrityProof\",\n    cryptosuite: \"eddsa-jcs-2022\",\n    created: new Date().toISOString(),\n    proofPurpose: \"authentication\"\n  };\n\n  const signedData = await signer({versionId});\n  \n  return {\n    ...proof,\n    ...signedData.proof\n  };\n}\n\nexport function validateWitnessParameter(witness: WitnessParameterResolution): void {\n  if (!witness.witnesses || !Array.isArray(witness.witnesses) || witness.witnesses.length === 0) {\n    throw new Error('Witness list cannot be empty');\n  }\n\n  if (!witness.threshold || parseInt(witness.threshold.toString()) < 1 || parseInt(witness.threshold.toString()) > witness.witnesses.length) {\n    throw new Error('Witness threshold must be between 1 and the number of witnesses');\n  }\n\n  const ids = new Set<string>();\n  for (const w of witness.witnesses) {\n    if (!w.id.startsWith('did:key:')) {\n      throw new Error('Witness DIDs must be did:key format');\n    }\n    if (ids.has(w.id)) {\n      throw new Error(`Duplicate witness id: ${w.id}`);\n    }\n    ids.add(w.id);\n  }\n}\n\nexport function calculateWitnessWeight(proofs: DataIntegrityProof[], witnesses: WitnessEntry[]): number {\n  const processed = new Set<string>();\n\n  for (const proof of proofs) {\n    const witness = witnesses.find(w => proof.verificationMethod.startsWith(w.id));\n    if (witness) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n      processed.add(witness.id);\n    }\n  }\n\n  return processed.size;\n}\n\nexport async function verifyWitnessProofs(\n  logEntry: DIDLogEntry,\n  witnessProofs: WitnessProofFileEntry[],\n  currentWitness: WitnessParameterResolution,\n  verifier?: Verifier\n): Promise<void> {\n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n\n  let approvals = 0;\n  const processedWitnesses = new Set<string>();\n\n  // Process each proof set\n  for (const proofSet of witnessProofs) {\n    // Process each proof in the set\n    for (const proof of proofSet.proof) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n\n      const witness = currentWitness.witnesses?.find(w => proof.verificationMethod.startsWith(w.id));\n      if (!witness) {\n        throw new Error('Proof from unauthorized witness');\n      }\n\n      if (processedWitnesses.has(witness.id)) {\n        continue; // Skip duplicate proofs from same witness\n      }\n\n      try {\n        // Resolve verification method\n        const vm = await resolveVM(proof.verificationMethod);\n        if (!vm) {\n          throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n        }\n\n        // Decode public key\n        let publicKey: Uint8Array;\n        try {\n          publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode public key: ${error.message}`);\n        }\n        \n        if (publicKey.length !== 34) {\n          throw new Error(`Invalid public key length ${publicKey.length} (should be 34 bytes)`);\n        }\n\n        // Extract proof value and prepare data for verification\n        const { proofValue, ...proofWithoutValue } = proof;\n        \n        // Create hashes\n        const canonicalizedData = canonicalize({versionId: logEntry.versionId});\n        const canonicalizedProof = canonicalize(proofWithoutValue);\n        \n        const dataHash = await createHash(canonicalizedData);\n        const proofHash = await createHash(canonicalizedProof);\n        \n        // Concatenate buffers\n        const input = concatBuffers(proofHash, dataHash);\n\n        // Decode signature\n        let signature: Uint8Array;\n        try {\n          signature = multibaseDecode(proofValue).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode signature: ${error.message}`);\n        }\n\n        // Verify signature\n        const verified = await verifier.verify(\n          signature,\n          input,\n          publicKey.slice(2)\n        );\n\n        if (!verified) {\n          throw new Error('Invalid witness proof signature');\n        }\n\n        approvals++;\n        processedWitnesses.add(witness.id);\n\n      } catch (error: any) {\n        throw new Error(`Invalid witness proof: ${error.message}`);\n      }\n    }\n  }\n\n  if (approvals < parseInt(currentWitness.threshold?.toString() ?? '0')) {\n    throw new Error(`Witness threshold not met: got ${approvals}, need ${currentWitness.threshold}`);\n  }\n}\n\nexport { fetchWitnessProofs }; ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
     "import { fetchLogFromIdentifier, getActiveDIDs, maybeWriteTestLog } from \"./utils\";\nimport type { CreateDIDInterface, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry } from './interfaces';\nimport * as v1 from './method_versions/method.v1.0';\nimport * as v0_5 from './method_versions/method.v0.5';\n\nconst LATEST_VERSION = '1.0';\n\nfunction getWebvhVersionFromMethod(method?: string): string {\n  if (!method) return LATEST_VERSION;\n  const match = method.match(/^did:webvh:(\\d+\\.\\d+)$/);\n  return match ? match[1] : LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromLog(log: DIDLog): string {\n  if (log && log.length > 0 && log[0].parameters && log[0].parameters.method) {\n    return getWebvhVersionFromMethod(log[0].parameters.method);\n  }\n  return LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromOptions(options: any): string {\n  if (options && options.method) {\n    return getWebvhVersionFromMethod(options.method);\n  }\n  return LATEST_VERSION;\n}\n\nexport const createDID = async (options: CreateDIDInterface) => {\n  const version = getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.createDID(options)\n    : await v1.createDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const resolveDID = async (did: string, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], scid?: string } = {}) => {\n  const activeDIDs = await getActiveDIDs();\n  const controlled = activeDIDs.includes(did);\n  let scid: string | undefined = undefined;\n  const didParts = did.split(\":\");\n  if (didParts.length > 2 && didParts[0] === \"did\" && didParts[1] === \"webvh\") {\n    scid = didParts[2];\n  }\n  try {\n    const log = await fetchLogFromIdentifier(did, controlled);\n    const version = getWebvhVersionFromLog(log);\n    const optsWithScid = { ...options, scid };\n    if (version === '0.5') {\n      const result = await v0_5.resolveDIDFromLog(log, optsWithScid);\n      maybeWriteTestLog(result.did, log);\n      return { ...result, controlled };\n    }\n    const result = await v1.resolveDIDFromLog(log, optsWithScid);\n    maybeWriteTestLog(result.did, log);\n    return { ...result, controlled };\n  } catch (e: any) {\n    let errorType = 'INVALID_DID';\n    const message = e instanceof Error ? e.message : String(e);\n    if (/not found/i.test(message) || /404/.test(message)) {\n      errorType = 'notFound';\n    }\n    return {\n      did,\n      doc: null,\n      meta: {\n        error: errorType,\n        problemDetails: {\n          type: errorType === 'notFound'\n            ? 'https://w3id.org/security#NOT_FOUND'\n            : 'https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID',\n          title: errorType === 'notFound'\n            ? 'The DID Log or resource was not found.'\n            : 'The resolved DID is invalid.',\n          detail: message\n        }\n      },\n      controlled\n    };\n  }\n};\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}) => {\n  const version = getWebvhVersionFromLog(log);\n  if (version === '0.5') {\n    const result = await v0_5.resolveDIDFromLog(log, options);\n    maybeWriteTestLog(result.did, log);\n    return result;\n  }\n  const result = await v1.resolveDIDFromLog(log, options);\n  maybeWriteTestLog(result.did, log);\n  return result;\n};\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.updateDID(options)\n    : await v1.updateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.deactivateDID(options)\n    : await v1.deactivateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n",
     "import { createDate } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { VerificationMethod, SigningInput, SigningOutput, Signer, SignerOptions, Verifier } from './interfaces';\nimport { concatBuffers } from './utils/buffer';\n\n/**\n * Creates a proof object for a document\n * @param verificationMethodId - The verification method ID to use in the proof\n * @returns A proof object with type, cryptosuite, verificationMethod, created, and proofPurpose\n */\nexport const createProof = (verificationMethodId: string): any => {\n  return {\n    type: 'DataIntegrityProof',\n    cryptosuite: 'eddsa-jcs-2022',\n    verificationMethod: verificationMethodId,\n    created: createDate(),\n    proofPurpose: 'assertionMethod'\n  };\n};\n\n/**\n * Prepares data for signing by hashing and concatenating the document and proof\n * @param document - The document to sign\n * @param proof - The proof object\n * @returns The prepared data for signing as a Uint8Array\n */\nexport const prepareDataForSigning = async (document: any, proof: any): Promise<Uint8Array> => {\n  const dataHash = await createHash(canonicalize(document));\n  const proofHash = await createHash(canonicalize(proof));\n  return concatBuffers(proofHash, dataHash);\n};\n\n/**\n * Abstract base class for signers\n * Users should extend this class to implement their own signing logic\n */\nexport abstract class AbstractCrypto implements Signer, Verifier {\n  protected verificationMethod?: VerificationMethod | null;\n  protected useStaticId: boolean;\n\n  constructor(options: SignerOptions) {\n    if (options.verificationMethod) {\n      this.verificationMethod = options.verificationMethod;\n    }\n    this.useStaticId = options.useStaticId !== undefined ? options.useStaticId : true;\n  }\n\n  /**\n   * Sign the input data\n   * @param input - The signing input containing the document and proof\n   * @returns The signing output containing the proof value\n   */\n  abstract sign(input: SigningInput): Promise<SigningOutput>;\n\n  /**\n   * Verify a signature\n   * @param signature - The signature to verify\n   * @param message - The message to verify\n   * @param publicKey - The public key to verify the signature with\n   */\n  abstract verify(signature: Uint8Array, message: Uint8Array, publicKey: Uint8Array): Promise<boolean>;\n\n  /**\n   * Get the verification method ID\n   * @returns The verification method ID\n   */\n  getVerificationMethodId(): string {\n    if (!this.verificationMethod) {\n      throw new Error('Verification method not set');\n    }\n    return this.useStaticId \n      ? `did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`\n      : this.verificationMethod.id || '';\n  }\n}\n\n/**\n * Creates a document signer from any Signer implementation\n * @param signer - The signer to use\n * @param verificationMethodId - The verification method ID to use in proofs\n * @returns A function that signs a document and returns the document with proof\n */\nexport const createDocumentSigner = (signer: Signer, verificationMethodId: string) => {\n  return async (doc: any) => {\n    try {\n      const proof = createProof(verificationMethodId);\n      const result = await signer.sign({ document: doc, proof });\n      \n      proof.proofValue = result.proofValue;\n      return { ...doc, proof };\n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n\n/**\n * @deprecated Use createDocumentSigner with your own Signer implementation instead\n */\nexport const createSigner = (vm: VerificationMethod, useStatic: boolean = true) => {\n  console.warn('createSigner is deprecated. Use createDocumentSigner with your own Signer implementation instead.');\n  \n  return async (doc: any) => {\n    try {\n      const verificationMethodId = useStatic \n        ? `did:key:${vm.publicKeyMultibase}#${vm.publicKeyMultibase}` \n        : vm.id || '';\n      \n      const proof = createProof(verificationMethodId);\n      \n      // This is a placeholder for backward compatibility\n      // Users should implement their own signing logic\n      throw new Error('createSigner is deprecated. Implement your own Signer and use createDocumentSigner instead.');\n      \n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n"
   ],
-  "mappings": "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",
-  "debugId": "6CB4433AE48BF2A764756E2164756E21",
+  "mappings": "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",
+  "debugId": "9BD49C3FACD4DB7464756E2164756E21",
   "names": []
 }
\ No newline at end of file
diff --git a/dist/cli/didwebvh.js b/dist/cli/didwebvh.js
index ba47be4fae1cce30a78f99b5cd2741935c06de73..1c1288f68bda834a0686d38459630eb61566cec4 100755
--- a/dist/cli/didwebvh.js
+++ b/dist/cli/didwebvh.js
@@ -677,23 +677,27 @@ var getFS = async () => {
         const module = maybeRequire(fsModuleSpecifier);
         fsModule = module;
         return module;
-      } catch {}
+      } catch {
+      }
       try {
         const module = maybeRequire("fs");
         fsModule = module;
         return module;
-      } catch {}
+      } catch {
+      }
     }
     try {
       const module = await import(fsModuleSpecifier);
       fsModule = module;
       return module;
-    } catch {}
+    } catch {
+    }
     try {
       const module = await import("fs");
       fsModule = module;
       return module;
-    } catch {}
+    } catch {
+    }
     throw new Error("Filesystem access is not available in this environment (unable to load fs)");
   })();
   return fsImportPromise;
@@ -883,7 +887,8 @@ function setCachedHash(input, hash) {
   try {
     const key = JSON.stringify(input);
     hashCache.set(key, hash);
-  } catch {}
+  } catch {
+  }
 }
 async function deriveHash(input) {
   const cached = getCachedHash(input);
@@ -970,14 +975,14 @@ var normalizeVMs = (verificationMethod, did = null) => {
   }
   const vms = verificationMethod.map((vm) => ({
     ...vm,
-    id: createVMID(vm, did)
+    id: vm.id ?? createVMID(vm, did)
   }));
   all.verificationMethod = vms;
-  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => createVMID(vm, did));
-  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => createVMID(vm, did));
-  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => createVMID(vm, did));
-  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => createVMID(vm, did));
-  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => createVMID(vm, did));
+  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => vm.id ?? createVMID(vm, did));
+  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => vm.id ?? createVMID(vm, did));
+  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => vm.id ?? createVMID(vm, did));
   return all;
 };
 var resolveVM = async (vm) => {
@@ -1353,7 +1358,8 @@ var resolveDIDFromLog2 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -1751,7 +1757,8 @@ var resolveDIDFromLog3 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -2108,7 +2115,9 @@ class SystemRandomSource {
 }
 
 // node_modules/@stablelib/int/lib/int.js
+var isInteger = Number.isInteger;
 var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
+var isSafeInteger = Number.isSafeInteger;
 
 // node_modules/@stablelib/binary/lib/binary.js
 function readUint32BE(array, offset = 0) {
@@ -4072,4 +4081,4 @@ export {
   handleCreate
 };
 
-//# debugId=2F649D20B48F477764756E2164756E21
+//# debugId=89F56FAD0280F75864756E2164756E21
diff --git a/dist/cli/didwebvh.js.map b/dist/cli/didwebvh.js.map
index 520d199da69ee22f60e1d8285bc65b308fa205fd..92bcdd3939287b2fbbd3d6926761081b88987f9d 100644
--- a/dist/cli/didwebvh.js.map
+++ b/dist/cli/didwebvh.js.map
@@ -3,7 +3,7 @@
   "sources": ["../../node_modules/json-canonicalize/bundles/index.umd.js", "../../src/utils.ts", "../../src/utils/buffer.ts", "../../src/config.ts", "../../src/constants.ts", "../../src/utils/multiformats.ts", "../../node_modules/@noble/hashes/esm/utils.js", "../../node_modules/@noble/hashes/esm/_md.js", "../../node_modules/@noble/hashes/esm/sha2.js", "../../src/utils/crypto.ts", "../../src/assertions.ts", "../../src/witness.ts", "../../src/method_versions/method.v1.0.ts", "../../src/method_versions/method.v0.5.ts", "../../src/method.ts", "../../src/cli.ts", "../../node_modules/@stablelib/random/lib/source/system.js", "../../node_modules/@stablelib/int/lib/int.js", "../../node_modules/@stablelib/binary/lib/binary.js", "../../node_modules/@stablelib/wipe/lib/wipe.js", "../../node_modules/@stablelib/random/lib/random.js", "../../node_modules/@stablelib/sha512/lib/sha512.js", "../../node_modules/@stablelib/ed25519/lib/ed25519.js"],
   "sourcesContent": [
     "(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JsonCanonicalize = {}));\n}(this, (function (exports) { 'use strict';\n\n    function canonicalize(obj) {\n        var buffer = '';\n        serialize(obj);\n        return buffer;\n        function serialize(object) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    if (element === undefined) {\n                        element = null;\n                    }\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                var vKeys = Object.keys(object).filter(function (k) { return object[k] !== undefined; }).sort();\n                vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property]);\n        }\n    }\n\n    function canonicalizeEx(obj, options) {\n        var buffer = '';\n        var vInclude = options && options.include;\n        var vExclude = options && options.exclude;\n        if (vExclude) {\n            if (typeof vExclude === 'string')\n                vExclude = [vExclude];\n        }\n        if (vInclude)\n            vInclude.sort();\n        serialize(obj);\n        return buffer;\n        function serialize(object, parent) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element, object);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                if (!parent && vInclude) {\n                    vInclude.forEach(function (property, index) {\n                        if (!object.hasOwnProperty(property))\n                            return;\n                        addProp(object, property, index);\n                    });\n                }\n                else {\n                    var vKeys = Object.keys(object).sort();\n                    vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                }\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (vExclude && vExclude.length) {\n                for (var _i = 0, vExclude_1 = vExclude; _i < vExclude_1.length; _i++) {\n                    var v = vExclude_1[_i];\n                    if (v === property)\n                        return;\n                }\n            }\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property], object);\n        }\n    }\n\n    exports.canonicalize = canonicalize;\n    exports.canonicalizeEx = canonicalizeEx;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n",
-    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
+    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: vm.id ?? createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
     "import { config } from '../config';\n\n// Helper to convert bytes to hex string\nconst bytesToHex = (bytes: Uint8Array): string => {\n  return Array.from(bytes)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\n// Helper to convert hex string to bytes\nconst hexToBytes = (hex: string): Uint8Array => {\n  if (hex.length % 2 !== 0) {\n    throw new Error('Hex string must have an even number of characters');\n  }\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n  }\n  return bytes;\n};\n\n// Buffer polyfill for browser environments\nexport const createBuffer = (input: string, encoding?: BufferEncoding): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.from(input, encoding);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binaryString = atob(input);\n    return new Uint8Array(binaryString.length).map((_, i) => binaryString.charCodeAt(i));\n  }\n\n  // Default to UTF-8 encoding\n  return new TextEncoder().encode(input);\n};\n\nexport const bufferToString = (buffer: Uint8Array, encoding?: BufferEncoding): string => {\n  if (!config.isBrowser) {\n    return Buffer.from(buffer).toString(encoding);\n  }\n\n  // Handle hex encoding specifically\n  if (encoding === 'hex') {\n    return bytesToHex(buffer);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binary = String.fromCharCode(...buffer);\n    return btoa(binary);\n  }\n\n  // Default to UTF-8 encoding\n  return new TextDecoder().decode(buffer);\n};\n\nexport const concatBuffers = (...buffers: Uint8Array[]): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.concat(buffers);\n  }\n\n  // Calculate total length\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  \n  // Create new array and copy all buffers into it\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    result.set(buffer, offset);\n    offset += buffer.length;\n  }\n  \n  return result;\n}; ",
     "import { createBuffer, bufferToString } from './utils/buffer';\n\n// Helper to safely access environment variables\nconst isBrowser = typeof window !== 'undefined';\n\nconst getEnvValue = (key: string): string | undefined => {\n  if (isBrowser) return undefined;\n  try {\n    return process?.env?.[key];\n  } catch {\n    return undefined;\n  }\n};\n\nexport const config = {\n  // Helper functions\n  getEnvValue,\n  isBrowser,\n  \n  // Environment checks\n  isTestEnvironment: getEnvValue('NODE_ENV') === 'test',\n  \n  // Feature flags\n  logResolves: getEnvValue('LOG_RESOLVES') === 'true',\n  \n  // Get verification methods from env\n  getVerificationMethods: () => {\n    const encoded = getEnvValue('DID_VERIFICATION_METHODS');\n    if (!encoded) return [];\n    try {\n      const decoded = createBuffer(encoded, 'base64');\n      return JSON.parse(bufferToString(decoded));\n    } catch {\n      return [];\n    }\n  }\n}; ",
     "export const PLACEHOLDER = \"{SCID}\";\nexport const METHOD = \"webvh\";\nexport const BASE_CONTEXT = [\n  \"https://www.w3.org/ns/did/v1\",\n  \"https://w3id.org/security/multikey/v1\"\n];",
@@ -14,8 +14,8 @@
     "/// <reference lib=\"dom\" />\nimport { sha256 } from '@noble/hashes/sha2';\n\nfunction arrayBufferToHex(buffer: ArrayBufferLike | Uint8Array): string {\n  const view = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  return Array.from(view)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport async function createHash(data: string): Promise<Uint8Array> {\n  return sha256(data);\n}\n\nexport async function createHashHex(data: string): Promise<string> {\n  const hash = await createHash(data);\n  const view = new Uint8Array(hash.buffer);\n  return arrayBufferToHex(view);\n} ",
     "import { createSCID, deriveNextKeyHash, resolveVM } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport { config } from './config';\nimport { concatBuffers } from './utils/buffer';\nimport { WitnessParameter, Verifier, WitnessParameterResolution } from './interfaces';\nimport { validateWitnessParameter } from './witness';\nimport { multibaseDecode } from \"./utils/multiformats\";\n\nconst isKeyAuthorized = (verificationMethod: string, updateKeys: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_ASSERTION_KEY_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:key:')) {\n    const keyParts = verificationMethod.split('did:key:')[1].split('#');\n    const key = keyParts[0];\n    \n    const authorized = updateKeys.some(updateKey => {\n      let updateKeyPart = updateKey;\n      if (updateKey.startsWith('did:key:')) {\n        updateKeyPart = updateKey.split('did:key:')[1].split('#')[0];\n      }\n      \n      return updateKeyPart === key;\n    });\n    \n    return authorized;\n  }\n  return false;\n};\n\nconst isWitnessAuthorized = (verificationMethod: string, witnesses: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_WITNESS_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:webvh:')) {\n    const didWithoutFragment = verificationMethod.split('#')[0];\n    return witnesses.includes(didWithoutFragment);\n  }\n  return false;\n};\n\nexport const documentStateIsValid = async (\n  doc: any, \n  updateKeys: string[], \n  witness: WitnessParameterResolution | undefined | null,\n  skipWitnessVerification?: boolean,\n  verifier?: Verifier\n) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID') === 'true') {\n    return true;\n  }\n  \n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n  \n  let {proof: proofs, ...rest} = doc;\n  if (!Array.isArray(proofs)) {\n    proofs = [proofs];\n  }\n\n  if (witness && witness.witnesses && witness.witnesses.length > 0) {\n    if (!skipWitnessVerification) {\n      validateWitnessParameter(witness);\n    }\n  }\n\n  for (let i = 0; i < proofs.length; i++) {\n    const proof = proofs[i];\n\n    if (proof.verificationMethod.startsWith('did:key:')) {\n      if (!isKeyAuthorized(proof.verificationMethod, updateKeys)) {\n        throw new Error(`Key ${proof.verificationMethod} is not authorized to update.`);\n      }\n    } else if (proof.verificationMethod.startsWith('did:webvh:')) {\n      if (witness && witness.witnesses && witness.witnesses.length > 0 && !isWitnessAuthorized(proof.verificationMethod, witness.witnesses.map((w: {id: string}) => w.id))) {\n        throw new Error(`Key ${proof.verificationMethod} is not from an authorized witness.`);\n      }\n    } else {\n      throw new Error(`Unsupported verification method: ${proof.verificationMethod}`);\n    }\n    \n    if (proof.type !== 'DataIntegrityProof') {\n      throw new Error(`Unknown proof type ${proof.type}`);\n    }\n    if (proof.proofPurpose !== 'authentication' && proof.proofPurpose !== 'assertionMethod') {\n      throw new Error(`Unknown proof purpose ${proof.proofPurpose}`);\n    }\n    if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n      throw new Error(`Unknown cryptosuite ${proof.cryptosuite}`);\n    }\n\n    const vm = await resolveVM(proof.verificationMethod);\n    if (!vm) {\n      throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n    }\n\n    const publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n    if (publicKey[0] !== 0xed || publicKey[1] !== 0x01) {\n      throw new Error(`multiKey doesn't include ed25519 header (0xed01)`);\n    }\n\n    const {proofValue, ...restProof} = proof;\n    const signature = multibaseDecode(proofValue).bytes;\n    const dataHash = await createHash(canonicalize(rest));\n    const proofHash = await createHash(canonicalize(restProof));\n    const input = concatBuffers(proofHash, dataHash);\n\n    const verified = await verifier.verify(\n      signature,\n      input,\n      publicKey.slice(2)\n    );\n    \n    if (!verified) {\n      throw new Error(`Proof ${i} failed verification (proofValue: ${proofValue})`);\n    }\n  }\n  return true;\n}\n\nexport const hashChainValid = (derivedHash: string, logEntryHash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_HASH_CHAIN_IS_VALID') === 'true') return true;\n  return derivedHash === logEntryHash;\n}\n\nexport const newKeysAreInNextKeys = async (updateKeys: string[], previousNextKeyHashes: string[]) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_NEW_KEYS_ARE_VALID') === 'true') return true;\n\n  if (previousNextKeyHashes.length > 0) {\n    for (const key of updateKeys) {\n      const keyHash = await deriveNextKeyHash(key);\n      if (!previousNextKeyHashes.includes(keyHash)) {\n        throw new Error(`Invalid update key ${keyHash}. Not found in nextKeyHashes ${previousNextKeyHashes}`);\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const scidIsFromHash = async (scid: string, hash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_SCID_IS_FROM_HASH') === 'true') return true;\n  return scid === await createSCID(hash);\n}\n",
     "import { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { DataIntegrityProof, DIDLogEntry, WitnessEntry, WitnessProofFileEntry, Verifier, WitnessParameterResolution } from './interfaces';\nimport { resolveVM } from \"./utils\";\nimport { concatBuffers } from './utils/buffer';\nimport { fetchWitnessProofs } from './utils';\nimport { multibaseDecode } from './utils/multiformats';\n\nexport async function createWitnessProof(\n  signer: (doc: any) => Promise<{proof: any}>,\n  versionId: string\n): Promise<DataIntegrityProof> {\n  const proof = {\n    type: \"DataIntegrityProof\",\n    cryptosuite: \"eddsa-jcs-2022\",\n    created: new Date().toISOString(),\n    proofPurpose: \"authentication\"\n  };\n\n  const signedData = await signer({versionId});\n  \n  return {\n    ...proof,\n    ...signedData.proof\n  };\n}\n\nexport function validateWitnessParameter(witness: WitnessParameterResolution): void {\n  if (!witness.witnesses || !Array.isArray(witness.witnesses) || witness.witnesses.length === 0) {\n    throw new Error('Witness list cannot be empty');\n  }\n\n  if (!witness.threshold || parseInt(witness.threshold.toString()) < 1 || parseInt(witness.threshold.toString()) > witness.witnesses.length) {\n    throw new Error('Witness threshold must be between 1 and the number of witnesses');\n  }\n\n  const ids = new Set<string>();\n  for (const w of witness.witnesses) {\n    if (!w.id.startsWith('did:key:')) {\n      throw new Error('Witness DIDs must be did:key format');\n    }\n    if (ids.has(w.id)) {\n      throw new Error(`Duplicate witness id: ${w.id}`);\n    }\n    ids.add(w.id);\n  }\n}\n\nexport function calculateWitnessWeight(proofs: DataIntegrityProof[], witnesses: WitnessEntry[]): number {\n  const processed = new Set<string>();\n\n  for (const proof of proofs) {\n    const witness = witnesses.find(w => proof.verificationMethod.startsWith(w.id));\n    if (witness) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n      processed.add(witness.id);\n    }\n  }\n\n  return processed.size;\n}\n\nexport async function verifyWitnessProofs(\n  logEntry: DIDLogEntry,\n  witnessProofs: WitnessProofFileEntry[],\n  currentWitness: WitnessParameterResolution,\n  verifier?: Verifier\n): Promise<void> {\n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n\n  let approvals = 0;\n  const processedWitnesses = new Set<string>();\n\n  // Process each proof set\n  for (const proofSet of witnessProofs) {\n    // Process each proof in the set\n    for (const proof of proofSet.proof) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n\n      const witness = currentWitness.witnesses?.find(w => proof.verificationMethod.startsWith(w.id));\n      if (!witness) {\n        throw new Error('Proof from unauthorized witness');\n      }\n\n      if (processedWitnesses.has(witness.id)) {\n        continue; // Skip duplicate proofs from same witness\n      }\n\n      try {\n        // Resolve verification method\n        const vm = await resolveVM(proof.verificationMethod);\n        if (!vm) {\n          throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n        }\n\n        // Decode public key\n        let publicKey: Uint8Array;\n        try {\n          publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode public key: ${error.message}`);\n        }\n        \n        if (publicKey.length !== 34) {\n          throw new Error(`Invalid public key length ${publicKey.length} (should be 34 bytes)`);\n        }\n\n        // Extract proof value and prepare data for verification\n        const { proofValue, ...proofWithoutValue } = proof;\n        \n        // Create hashes\n        const canonicalizedData = canonicalize({versionId: logEntry.versionId});\n        const canonicalizedProof = canonicalize(proofWithoutValue);\n        \n        const dataHash = await createHash(canonicalizedData);\n        const proofHash = await createHash(canonicalizedProof);\n        \n        // Concatenate buffers\n        const input = concatBuffers(proofHash, dataHash);\n\n        // Decode signature\n        let signature: Uint8Array;\n        try {\n          signature = multibaseDecode(proofValue).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode signature: ${error.message}`);\n        }\n\n        // Verify signature\n        const verified = await verifier.verify(\n          signature,\n          input,\n          publicKey.slice(2)\n        );\n\n        if (!verified) {\n          throw new Error('Invalid witness proof signature');\n        }\n\n        approvals++;\n        processedWitnesses.add(witness.id);\n\n      } catch (error: any) {\n        throw new Error(`Invalid witness proof: ${error.message}`);\n      }\n    }\n  }\n\n  if (approvals < parseInt(currentWitness.threshold?.toString() ?? '0')) {\n    throw new Error(`Witness threshold not met: got ${approvals}, need ${currentWitness.threshold}`);\n  }\n}\n\nexport { fetchWitnessProofs }; ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
     "import { fetchLogFromIdentifier, getActiveDIDs, maybeWriteTestLog } from \"./utils\";\nimport type { CreateDIDInterface, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry } from './interfaces';\nimport * as v1 from './method_versions/method.v1.0';\nimport * as v0_5 from './method_versions/method.v0.5';\n\nconst LATEST_VERSION = '1.0';\n\nfunction getWebvhVersionFromMethod(method?: string): string {\n  if (!method) return LATEST_VERSION;\n  const match = method.match(/^did:webvh:(\\d+\\.\\d+)$/);\n  return match ? match[1] : LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromLog(log: DIDLog): string {\n  if (log && log.length > 0 && log[0].parameters && log[0].parameters.method) {\n    return getWebvhVersionFromMethod(log[0].parameters.method);\n  }\n  return LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromOptions(options: any): string {\n  if (options && options.method) {\n    return getWebvhVersionFromMethod(options.method);\n  }\n  return LATEST_VERSION;\n}\n\nexport const createDID = async (options: CreateDIDInterface) => {\n  const version = getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.createDID(options)\n    : await v1.createDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const resolveDID = async (did: string, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], scid?: string } = {}) => {\n  const activeDIDs = await getActiveDIDs();\n  const controlled = activeDIDs.includes(did);\n  let scid: string | undefined = undefined;\n  const didParts = did.split(\":\");\n  if (didParts.length > 2 && didParts[0] === \"did\" && didParts[1] === \"webvh\") {\n    scid = didParts[2];\n  }\n  try {\n    const log = await fetchLogFromIdentifier(did, controlled);\n    const version = getWebvhVersionFromLog(log);\n    const optsWithScid = { ...options, scid };\n    if (version === '0.5') {\n      const result = await v0_5.resolveDIDFromLog(log, optsWithScid);\n      maybeWriteTestLog(result.did, log);\n      return { ...result, controlled };\n    }\n    const result = await v1.resolveDIDFromLog(log, optsWithScid);\n    maybeWriteTestLog(result.did, log);\n    return { ...result, controlled };\n  } catch (e: any) {\n    let errorType = 'INVALID_DID';\n    const message = e instanceof Error ? e.message : String(e);\n    if (/not found/i.test(message) || /404/.test(message)) {\n      errorType = 'notFound';\n    }\n    return {\n      did,\n      doc: null,\n      meta: {\n        error: errorType,\n        problemDetails: {\n          type: errorType === 'notFound'\n            ? 'https://w3id.org/security#NOT_FOUND'\n            : 'https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID',\n          title: errorType === 'notFound'\n            ? 'The DID Log or resource was not found.'\n            : 'The resolved DID is invalid.',\n          detail: message\n        }\n      },\n      controlled\n    };\n  }\n};\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}) => {\n  const version = getWebvhVersionFromLog(log);\n  if (version === '0.5') {\n    const result = await v0_5.resolveDIDFromLog(log, options);\n    maybeWriteTestLog(result.did, log);\n    return result;\n  }\n  const result = await v1.resolveDIDFromLog(log, options);\n  maybeWriteTestLog(result.did, log);\n  return result;\n};\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.updateDID(options)\n    : await v1.updateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.deactivateDID(options)\n    : await v1.deactivateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n",
     "#!/usr/bin/env node\n\nimport { createDID, updateDID, deactivateDID, resolveDIDFromLog } from './method';\nimport { fetchLogFromIdentifier, readLogFromDisk, writeLogToDisk, writeVerificationMethodToEnv } from './utils';\nimport { dirname } from 'path';\nimport fs from 'fs';\nimport { DIDLog, ServiceEndpoint, VerificationMethod, Verifier } from './interfaces';\nimport { createBuffer } from './utils/buffer';\nimport { bufferToString } from './utils/buffer';\nimport { Signer, SigningInput, SigningOutput } from './interfaces';\nimport { multibaseEncode } from './utils/multiformats';\nimport { MultibaseEncoding } from './utils/multiformats';\nimport { verify as ed25519Verify } from '@stablelib/ed25519';\nimport { sign as ed25519Sign } from '@stablelib/ed25519';\nimport { canonicalize } from 'json-canonicalize';\nimport { concatBuffers } from './utils/buffer';\nimport { createHash } from './utils/crypto';\nimport { multibaseDecode } from './utils/multiformats';\nimport { generateKeyPair } from '@stablelib/ed25519';\n\nimport { createWitnessProof } from './witness';\n\nconst usage = `\nUsage: bun run cli [command] [options]\n\nCommands:\n  create     Create a new DID\n  resolve    Resolve a DID\n  update     Update an existing DID\n  deactivate Deactivate an existing DID\n  generate-witness-proof Generate witness proofs for a DID version\n  generate-vm Generate a new verification method keypair\n\nOptions:\n  --domain [domain]         Domain for the DID (required for create)\n  --log [file]              Path to the DID log file (required for resolve, update, deactivate)\n  --output [file]           Path to save the updated DID log (optional for create, update, deactivate)\n  --portable                Make the DID portable (optional for create)\n  --witness [witness]       Add a witness (can be used multiple times)\n  --witness-threshold [n]   Set witness threshold (optional, defaults to number of witnesses)\n  --watcher [url]           Add a watcher URL (can be used multiple times)\n  --service [service]       Add a service (format: type,endpoint) (can be used multiple times)\n  --add-vm [type]           Add a verification method (type can be authentication, assertionMethod, keyAgreement, capabilityInvocation, capabilityDelegation)\n  --also-known-as [alias]   Add an alsoKnownAs alias (can be used multiple times)\n  --next-key-hash [hash]    Add a nextKeyHash (can be used multiple times)\n  --witness-file [file]     Path to witness proofs file (optional for resolve)\n\n  # Options for generate-witness-proof:\n  --version-id [id]         The version ID to generate proofs for (required)\n  --witness-did [did]       Witness DID (did:key) (can be used multiple times)\n  --witness-secret [secret] Witness secret key multibase (matches witness-did order)\n\nExamples:\n  bun run cli create --domain example.com --portable --witness did:example:witness1 --witness did:example:witness2\n  bun run cli resolve --did did:webvh:123456:example.com\n  bun run cli resolve --log ./did.jsonl --witness-file ./did-witness.json\n  bun run cli update --log ./did.jsonl --output ./updated-did.jsonl --add-vm keyAgreement --service LinkedDomains,https://example.com\n  bun run cli deactivate --log ./did.jsonl --output ./deactivated-did.jsonl\n  bun run cli generate-witness-proof --version-id 1-abc123 --witness-did did:key:z6Mk... --witness-secret z1A... --output did-witness.json\n  bun run cli generate-vm\n`;\n\n// Add this function at the top with the other constants\nfunction showHelp() {\n  console.log(usage);\n}\n\nasync function generateVerificationMethod(purpose: \"authentication\" | \"assertionMethod\" | \"keyAgreement\" | \"capabilityInvocation\" | \"capabilityDelegation\" = 'authentication'): Promise<VerificationMethod> {\n  const keyPair = generateKeyPair();\n  const publicKeyBytes = new Uint8Array([0xed, 0x01, ...keyPair.publicKey]);\n  const secretKeyBytes = new Uint8Array([0x80, 0x26, ...keyPair.secretKey]);\n  return {\n    type: 'Multikey',\n    publicKeyMultibase: multibaseEncode(publicKeyBytes, MultibaseEncoding.BASE58_BTC),\n    secretKeyMultibase: multibaseEncode(secretKeyBytes, MultibaseEncoding.BASE58_BTC),\n    purpose\n  };\n}\nclass CustomCryptoImplementation implements Signer, Verifier {\n  private verificationMethod?: VerificationMethod;\n  \n  constructor(verificationMethod?: VerificationMethod) {\n    this.verificationMethod = verificationMethod;\n  }\n  \n  getVerificationMethodId(): string {\n    if (!this.verificationMethod) {\n      throw new Error('Verification method not set');\n    }\n    return `did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`;\n  }\n  \n  async sign(input: SigningInput): Promise<SigningOutput> {\n    if (!this.verificationMethod) {\n      throw new Error('Verification method not set');\n    }\n    const { document, proof } = input;\n    const dataHash = await createHash(canonicalize(document));\n    const proofHash = await createHash(canonicalize(proof));\n    const message = concatBuffers(proofHash, dataHash);\n    const secretKey = multibaseDecode(this.verificationMethod.secretKeyMultibase!).bytes.slice(2);\n    const signature = ed25519Sign(secretKey, message);\n    return {\n      proofValue: multibaseEncode(signature, MultibaseEncoding.BASE58_BTC)\n    };\n  }\n\n  async verify(signature: Uint8Array, message: Uint8Array, publicKey: Uint8Array): Promise<boolean> {\n    return ed25519Verify(publicKey, message, signature);\n  }\n}\n\nfunction createCustomCrypto(verificationMethod?: VerificationMethod): Signer & Verifier {\n  return new CustomCryptoImplementation(verificationMethod);\n}\n\nexport async function handleCreate(args: string[]) {\n  const options = parseOptions(args);\n  const domainInput = options['domain'] as string;\n  const parts = domainInput.split('/');\n  const domain = parts[0];\n  const paths = parts.length > 1 ? parts.slice(1) : undefined;\n  const output = options['output'] as string | undefined;\n  const portable = options['portable'] !== undefined;\n  const nextKeyHashes = options['next-key-hash'] as string[] | undefined;\n  const witnesses = options['witness'] as string[] | undefined;\n  const watchers = options['watcher'] as string[] | undefined;\n  const witnessThreshold = options['witness-threshold'] ? parseInt(options['witness-threshold'] as string) : witnesses?.length ?? 0;\n\n  if (!domain) {\n    console.error('Domain is required for create command');\n    process.exit(1);\n  }\n\n  try {\n    const authKey = await generateVerificationMethod();\n    const crypto = createCustomCrypto(authKey)\n    \n    // Strip secret key from verification method for DID document (security)\n    const publicAuthKey = {\n      id: authKey.id,\n      type: authKey.type,\n      controller: authKey.controller,\n      publicKeyMultibase: authKey.publicKeyMultibase,\n      purpose: authKey.purpose\n    };\n    \n    const { did, doc, meta, log } = await createDID({\n      domain,\n      paths,\n      signer: crypto,\n      verifier: crypto,\n      updateKeys: [authKey.publicKeyMultibase!],\n      verificationMethods: [publicAuthKey],\n      portable,\n      witness: witnesses?.length ? {\n        witnesses: witnesses.map(witness => ({id: witness})),\n        threshold: witnessThreshold\n      } : undefined,\n      watchers: watchers ?? undefined,\n      nextKeyHashes,\n    });\n\n    console.log('Created DID:', did);\n\n    if (output) {\n      // Ensure output directory exists\n      const outputDir = dirname(output);\n      if (!fs.existsSync(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n      }\n\n      // Write log to file\n      await writeLogToDisk(output, log);\n      console.log(`DID log written to ${output}`);\n\n      // Save verification method to env\n      await writeVerificationMethodToEnv({\n        ...authKey, \n        controller: did, \n        id: `${did}#${authKey.publicKeyMultibase?.slice(-8)}`\n      });\n      console.log(`DID verification method saved to env`);\n\n    } else {\n      // If no output specified, print to console\n      console.log('DID Document:', JSON.stringify(doc, null, 2));\n      console.log('DID Log:', JSON.stringify(log, null, 2));\n    }\n\n    return { did, doc, meta, log };\n  } catch (error) {\n    console.error('Error creating DID:', error);\n    process.exit(1);\n  }\n}\n\nexport async function handleResolve(args: string[]) {\n  const options = parseOptions(args);\n  const didIdentifier = options['did'] as string;\n  const logFile = options['log'] as string;\n  const witnessFile = options['witness-file'] as string | undefined;\n\n  if (!didIdentifier && !logFile) {\n    console.error('Either --did or --log is required for resolve command');\n    process.exit(1);\n  }\n\n  try {\n    let log: DIDLog;\n    if (logFile) {\n      log = await readLogFromDisk(logFile);\n    } else {\n      log = await fetchLogFromIdentifier(didIdentifier);\n    }\n\n    let resolutionOptions: any = {};\n    if (witnessFile) {\n      const witnessProofs = JSON.parse(fs.readFileSync(witnessFile, 'utf8'));\n      resolutionOptions.witnessProofs = witnessProofs;\n    }\n    const crypto = createCustomCrypto();\n    resolutionOptions.verifier = crypto;\n\n    console.time('Resolution time');\n    const { did, doc, meta } = await resolveDIDFromLog(log, resolutionOptions);\n    console.timeEnd('Resolution time');\n\n    console.log('Resolved DID:', did);\n    console.log('DID Document:', JSON.stringify(doc, null, 2));\n    console.log('Metadata:', JSON.stringify(meta, null, 2));\n\n    return { did, doc, meta };\n  } catch (error) {\n    console.error('Error resolving DID:', error);\n    process.exit(1);\n  }\n}\n\nexport async function handleUpdate(args: string[]) {\n  const options = parseOptions(args);\n  const logFile = options['log'] as string;\n  const output = options['output'] as string | undefined;\n  const witnesses = options['witness'] as string[] | undefined;\n  const witnessThreshold = options['witness-threshold'] ? parseInt(options['witness-threshold'] as string) : undefined;\n  const services = options['service'] ? parseServices(options['service'] as string[]) : undefined;\n  const addVm = options['add-vm'] as string[] | undefined;\n  const alsoKnownAs = options['also-known-as'] as string[] | undefined;\n  const updateKey = options['update-key'] as string | undefined;\n  const watchers = options['watcher'] as string[] | undefined;\n\n  if (!logFile) {\n    console.error('Log file is required for update command');\n    process.exit(1);\n  }\n\n  try {\n    const log = await readLogFromDisk(logFile);\n    const { did, meta } = await resolveDIDFromLog(log, { verifier: createCustomCrypto() });\n    // console.log('\\nCurrent DID:', did);\n    // console.log('Current meta:', meta);\n    \n    // Get the verification method from environment\n    const envVMs = JSON.parse(bufferToString(createBuffer(process.env.DID_VERIFICATION_METHODS || 'W10=', 'base64')));\n    \n    let vm = envVMs.find((vm: any) => vm.controller === did);\n    \n    if (!vm) {\n      // Try to find VM by matching public key with current update keys\n      vm = envVMs.find((vm: any) => meta.updateKeys.includes(vm.publicKeyMultibase));\n    }\n    \n    if (!vm && envVMs.length > 0) {\n      // Fall back to first available VM with warning\n      console.warn('Warning: No matching verification method found for DID or update keys. Using first available VM.');\n      vm = envVMs[0];\n    }\n    \n    // console.log('\\nFound VM:', vm);\n    \n    if (!vm) {\n      throw new Error('No verification method found in environment');\n    }\n\n    // Create verification methods array\n    const verificationMethods: VerificationMethod[] = [];\n    \n    // If we're adding VMs, create a VM for each type\n    if (addVm && addVm.length > 0) {\n      const vmId = `${did}#${vm.publicKeyMultibase!.slice(-8)}`;\n      \n      // Add a verification method for each type\n      for (const vmType of addVm) {\n        const newVM: VerificationMethod = {\n          id: vmId,\n          type: \"Multikey\",\n          controller: did,\n          publicKeyMultibase: vm.publicKeyMultibase,\n          purpose: vmType as VerificationMethodType\n        };\n        verificationMethods.push(newVM);\n      }\n    } else {\n      // For non-VM updates (services, alsoKnownAs), still need a VM with purpose\n      verificationMethods.push({\n        id: `${did}#${vm.publicKeyMultibase!.slice(-8)}`,\n        type: \"Multikey\",\n        controller: did,\n        publicKeyMultibase: vm.publicKeyMultibase,\n        purpose: \"assertionMethod\"\n      });\n    }\n\n    const crypto = createCustomCrypto(vm);\n    const result = await updateDID({\n      log,\n      signer: crypto,\n      verifier: crypto,\n      updateKeys: [vm.publicKeyMultibase!],\n      verificationMethods,\n      witness: witnesses?.length ? {\n        witnesses: witnesses.map(witness => ({id: witness})),\n        threshold: witnessThreshold ?? witnesses.length\n      } : undefined,\n      watchers: watchers ?? undefined,\n      services,\n      alsoKnownAs\n    });\n\n    if (output) {\n      await writeLogToDisk(output, result.log);\n      console.log(`Updated DID log written to ${output}`);\n    }\n\n    return result;\n  } catch (error) {\n    console.error('Error updating DID:', error);\n    process.exit(1);\n  }\n}\n\nexport async function handleDeactivate(args: string[]) {\n  const options = parseOptions(args);\n  const logFile = options['log'] as string;\n  const output = options['output'] as string | undefined;\n\n  if (!logFile) {\n    console.error('Log file is required for deactivate command');\n    process.exit(1);\n  }\n\n  try {\n    // Read the current log to get the latest state\n    const log = await readLogFromDisk(logFile);\n    const { did, meta } = await resolveDIDFromLog(log);\n    \n    // Get the verification method from environment\n    const envContent = fs.readFileSync('.env', 'utf8');\n    const vmMatch = envContent.match(/DID_VERIFICATION_METHODS=(.+)/);\n    if (!vmMatch) {\n      throw new Error('No verification method found in .env file');\n    }\n\n    // Parse the VM from env\n    const vms = JSON.parse(bufferToString(createBuffer(vmMatch[1], 'base64')));\n    if (!vms || vms.length === 0) {\n      throw new Error('No verification method found in environment');\n    }\n\n    // Find VM that matches the current update key\n    let vm = vms.find((v: any) => v.publicKeyMultibase === meta.updateKeys[0]);\n    \n    if (!vm) {\n      // If no matching VM found, use the first one and warn\n      console.warn('Warning: No matching verification method found for current update key. Using first available VM.');\n      vm = vms[0];\n    }\n\n    // Don't modify the publicKeyMultibase - it should match the secretKeyMultibase\n\n    const crypto = createCustomCrypto(vm);\n    const result = await deactivateDID({\n      log,\n      signer: crypto,\n      verifier: crypto,\n    });\n\n    if (output) {\n      await writeLogToDisk(output, result.log);\n      console.log(`Deactivated DID log written to ${output}`);\n    }\n\n    return result;\n  } catch (error) {\n    console.error('Error deactivating DID:', error);\n    process.exit(1);\n  }\n}\n\nasync function handleGenerateWitnessProof(args: string[]) {\n  const options = parseOptions(args);\n  const versionId = options['version-id'] as string;\n  const witnessDids = options['witness-did'] as string[] | undefined;\n  const witnessSecrets = options['witness-secret'] as string[] | undefined;\n  const output = options['output'] as string;\n\n  if (!versionId) {\n    console.error('Version ID is required');\n    process.exit(1);\n  }\n  if (!output) {\n    console.error('Output file is required');\n    process.exit(1);\n  }\n  if (!witnessDids || !witnessSecrets || witnessDids.length !== witnessSecrets.length) {\n    console.error('Must provide matching number of witness DIDs and secrets');\n    process.exit(1);\n  }\n\n  const proofs = [];\n  for (let i = 0; i < witnessDids.length; i++) {\n    const did = witnessDids[i];\n    const secret = witnessSecrets[i];\n    const publicKeyMultibase = did.split(':')[2];\n    const vm: VerificationMethod = {\n      type: 'Multikey',\n      publicKeyMultibase,\n      secretKeyMultibase: secret,\n      purpose: 'authentication'\n    };\n    const crypto = createCustomCrypto(vm);\n    const signerFn = async (data: any) => {\n      const proofTemplate = {\n        type: 'DataIntegrityProof',\n        cryptosuite: 'eddsa-jcs-2022',\n        verificationMethod: `${did}#${publicKeyMultibase}`,\n        created: new Date().toISOString(),\n        proofPurpose: 'authentication'\n      };\n      const signingInput = { document: data, proof: proofTemplate };\n      const signed = await crypto.sign(signingInput);\n      return { proof: { ...proofTemplate, proofValue: signed.proofValue } };\n    };\n    const proof = await createWitnessProof(signerFn, versionId);\n    proofs.push(proof);\n  }\n\n  const witnessFileContent = [{\n    versionId,\n    proof: proofs\n  }];\n\n  fs.writeFileSync(output, JSON.stringify(witnessFileContent, null, 2));\n  console.log(`Witness proof file generated at ${output}`);\n}\n\ntype VerificationMethodType = 'authentication' | 'assertionMethod' | 'keyAgreement' | 'capabilityInvocation' | 'capabilityDelegation';\n\nfunction parseOptions(args: string[]): Record<string, string | string[] | undefined> {\n  const options: Record<string, string | string[] | undefined> = {};\n  for (let i = 0; i < args.length; i++) {\n    if (args[i].startsWith('--')) {\n      const key = args[i].slice(2);\n      if (i + 1 < args.length && !args[i + 1].startsWith('--')) {\n        if (key === 'witness' || key === 'service' || key === 'also-known-as' || key === 'next-key-hash' || key === 'watcher' || key === 'witness-did' || key === 'witness-secret') {\n          options[key] = options[key] || [];\n          (options[key] as string[]).push(args[++i]);\n        } else if (key === 'add-vm') {\n          options[key] = options[key] || [];\n          const value = args[++i];\n          if (isValidVerificationMethodType(value)) {\n            (options[key] as VerificationMethodType[]).push(value);\n          } else {\n            console.error(`Invalid verification method type: ${value}`);\n            process.exit(1);\n          }\n        } else {\n          options[key] = args[++i];\n        }\n      } else {\n        options[key] = '';\n      }\n    }\n  }\n  return options;\n}\n\n// Add this function to validate VerificationMethodType\nfunction isValidVerificationMethodType(type: string): type is VerificationMethodType {\n  return ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'].includes(type);\n}\n\nfunction parseServices(services: string[]): ServiceEndpoint[] {\n  return services.map(service => {\n    const [type, serviceEndpoint] = service.split(',');\n    return { type, serviceEndpoint };\n  });\n}\n\n// Update the main function to be exported\nexport async function main() {\n  const [command, ...args] = process.argv.slice(2);\n  // console.log('Command:', command);\n  // console.log('Args:', args);\n\n  try {\n    switch (command) {\n      case 'create':\n        console.log('Handling create command...');\n        await handleCreate(args);\n        break;\n      case 'resolve':\n        await handleResolve(args);\n        break;\n      case 'update':\n        await handleUpdate(args);\n        break;\n      case 'deactivate':\n        await handleDeactivate(args);\n        break;\n      case 'generate-witness-proof':\n        await handleGenerateWitnessProof(args);\n        break;\n      case 'generate-vm':\n        const vm = await generateVerificationMethod('authentication');\n        const publicKeyMultibase = vm.publicKeyMultibase;\n        const did = `did:key:${publicKeyMultibase}`;\n        console.log(JSON.stringify({\n          did,\n          publicKeyMultibase,\n          secretKeyMultibase: vm.secretKeyMultibase\n        }, null, 2));\n        break;\n      case 'help':\n        showHelp();\n        break;\n      default:\n        console.error('Unknown command:', command);\n        showHelp();\n        process.exit(1);\n    }\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\n// Only run main if this file is being executed directly\nif (process.argv[1] === import.meta.path) {\n  main().catch(error => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\n",
     "// Copyright (C) 2024 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nconst QUOTA = 65536;\nexport class SystemRandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n    constructor() {\n        if (typeof crypto !== \"undefined\" && 'getRandomValues' in crypto) {\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n    randomBytes(length) {\n        if (!this.isAvailable) {\n            throw new Error(\"System random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\n//# sourceMappingURL=system.js.map",
@@ -26,7 +26,7 @@
     "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nimport { readUint32BE, writeUint32BE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\nexport const DIGEST_LENGTH = 64;\nexport const BLOCK_SIZE = 128;\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */\nexport class SHA512 {\n    /** Length of hash output */\n    digestLength = DIGEST_LENGTH;\n    /** Block size */\n    blockSize = BLOCK_SIZE;\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    _stateHi = new Int32Array(8); // hash state, high bytes\n    _stateLo = new Int32Array(8); // hash state, low bytes\n    _tempHi = new Int32Array(16); // temporary state, high bytes\n    _tempLo = new Int32Array(16); // temporary state, low bytes\n    _buffer = new Uint8Array(256); // buffer for data to hash\n    _bufferLength = 0; // number of bytes in buffer\n    _bytesHashed = 0; // number of total bytes hashed\n    _finished = false; // indicates whether the hash was finalized\n    constructor() {\n        this.reset();\n    }\n    _initState() {\n        this._stateHi[0] = 0x6a09e667;\n        this._stateHi[1] = 0xbb67ae85;\n        this._stateHi[2] = 0x3c6ef372;\n        this._stateHi[3] = 0xa54ff53a;\n        this._stateHi[4] = 0x510e527f;\n        this._stateHi[5] = 0x9b05688c;\n        this._stateHi[6] = 0x1f83d9ab;\n        this._stateHi[7] = 0x5be0cd19;\n        this._stateLo[0] = 0xf3bcc908;\n        this._stateLo[1] = 0x84caa73b;\n        this._stateLo[2] = 0xfe94f82b;\n        this._stateLo[3] = 0x5f1d36f1;\n        this._stateLo[4] = 0xade682d1;\n        this._stateLo[5] = 0x2b3e6c1f;\n        this._stateLo[6] = 0xfb41bd6b;\n        this._stateLo[7] = 0x137e2179;\n    }\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    reset() {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    }\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    clean() {\n        wipe(this._buffer);\n        wipe(this._tempHi);\n        wipe(this._tempLo);\n        this.reset();\n    }\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    update(data, dataLength = data.length) {\n        if (this._finished) {\n            throw new Error(\"SHA512: can't update because hash was finished.\");\n        }\n        let dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < BLOCK_SIZE && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    }\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    finish(out) {\n        if (!this._finished) {\n            const bytesHashed = this._bytesHashed;\n            const left = this._bufferLength;\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\n            const bitLenLo = bytesHashed << 3;\n            const padLength = (bytesHashed % 128 < 112) ? 128 : 256;\n            this._buffer[left] = 0x80;\n            for (let i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n            hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n            this._finished = true;\n        }\n        for (let i = 0; i < this.digestLength / 8; i++) {\n            writeUint32BE(this._stateHi[i], out, i * 8);\n            writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n        }\n        return this;\n    }\n    /**\n     * Returns the final hash digest.\n     */\n    digest() {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n     * used with restoreState(). Only chain value is saved, not buffers or\n     * other state variables.\n     */\n    saveState() {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            stateHi: new Int32Array(this._stateHi),\n            stateLo: new Int32Array(this._stateLo),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    }\n    /**\n     * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n     * saveState() and sets bytesHashed to the given value.\n     */\n    restoreState(savedState) {\n        this._stateHi.set(savedState.stateHi);\n        this._stateLo.set(savedState.stateLo);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    }\n    /**\n     * Cleans state returned by saveState().\n     */\n    cleanSavedState(savedState) {\n        wipe(savedState.stateHi);\n        wipe(savedState.stateLo);\n        if (savedState.buffer) {\n            wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    }\n}\n// Constants\nconst K = new Int32Array([\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]);\nfunction hashBlocks(wh, wl, hh, hl, m, pos, len) {\n    let ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];\n    let h, l;\n    let th, tl;\n    let a, b, c, d;\n    while (len >= 128) {\n        for (let i = 0; i < 16; i++) {\n            const j = 8 * i + pos;\n            wh[i] = readUint32BE(m, j);\n            wl[i] = readUint32BE(m, j + 4);\n        }\n        for (let i = 0; i < 80; i++) {\n            let bh0 = ah0;\n            let bh1 = ah1;\n            let bh2 = ah2;\n            let bh3 = ah3;\n            let bh4 = ah4;\n            let bh5 = ah5;\n            let bh6 = ah6;\n            let bh7 = ah7;\n            let bl0 = al0;\n            let bl1 = al1;\n            let bl2 = al2;\n            let bl3 = al3;\n            let bl4 = al4;\n            let bl5 = al5;\n            let bl6 = al6;\n            let bl7 = al7;\n            // add\n            h = ah7;\n            l = al7;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma1\n            h = ((ah4 >>> 14) | (al4 << (32 - 14))) ^ ((ah4 >>> 18) |\n                (al4 << (32 - 18))) ^ ((al4 >>> (41 - 32)) | (ah4 << (32 - (41 - 32))));\n            l = ((al4 >>> 14) | (ah4 << (32 - 14))) ^ ((al4 >>> 18) |\n                (ah4 << (32 - 18))) ^ ((ah4 >>> (41 - 32)) | (al4 << (32 - (41 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Ch\n            h = (ah4 & ah5) ^ (~ah4 & ah6);\n            l = (al4 & al5) ^ (~al4 & al6);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // K\n            h = K[i * 2];\n            l = K[i * 2 + 1];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // w\n            h = wh[i % 16];\n            l = wl[i % 16];\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            th = c & 0xffff | d << 16;\n            tl = a & 0xffff | b << 16;\n            // add\n            h = th;\n            l = tl;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            // Sigma0\n            h = ((ah0 >>> 28) | (al0 << (32 - 28))) ^ ((al0 >>> (34 - 32)) |\n                (ah0 << (32 - (34 - 32)))) ^ ((al0 >>> (39 - 32)) | (ah0 << (32 - (39 - 32))));\n            l = ((al0 >>> 28) | (ah0 << (32 - 28))) ^ ((ah0 >>> (34 - 32)) |\n                (al0 << (32 - (34 - 32)))) ^ ((ah0 >>> (39 - 32)) | (al0 << (32 - (39 - 32))));\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            // Maj\n            h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n            l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh7 = (c & 0xffff) | (d << 16);\n            bl7 = (a & 0xffff) | (b << 16);\n            // add\n            h = bh3;\n            l = bl3;\n            a = l & 0xffff;\n            b = l >>> 16;\n            c = h & 0xffff;\n            d = h >>> 16;\n            h = th;\n            l = tl;\n            a += l & 0xffff;\n            b += l >>> 16;\n            c += h & 0xffff;\n            d += h >>> 16;\n            b += a >>> 16;\n            c += b >>> 16;\n            d += c >>> 16;\n            bh3 = (c & 0xffff) | (d << 16);\n            bl3 = (a & 0xffff) | (b << 16);\n            ah1 = bh0;\n            ah2 = bh1;\n            ah3 = bh2;\n            ah4 = bh3;\n            ah5 = bh4;\n            ah6 = bh5;\n            ah7 = bh6;\n            ah0 = bh7;\n            al1 = bl0;\n            al2 = bl1;\n            al3 = bl2;\n            al4 = bl3;\n            al5 = bl4;\n            al6 = bl5;\n            al7 = bl6;\n            al0 = bl7;\n            if (i % 16 === 15) {\n                for (let j = 0; j < 16; j++) {\n                    // add\n                    h = wh[j];\n                    l = wl[j];\n                    a = l & 0xffff;\n                    b = l >>> 16;\n                    c = h & 0xffff;\n                    d = h >>> 16;\n                    h = wh[(j + 9) % 16];\n                    l = wl[(j + 9) % 16];\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma0\n                    th = wh[(j + 1) % 16];\n                    tl = wl[(j + 1) % 16];\n                    h = ((th >>> 1) | (tl << (32 - 1))) ^ ((th >>> 8) |\n                        (tl << (32 - 8))) ^ (th >>> 7);\n                    l = ((tl >>> 1) | (th << (32 - 1))) ^ ((tl >>> 8) |\n                        (th << (32 - 8))) ^ ((tl >>> 7) | (th << (32 - 7)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    // sigma1\n                    th = wh[(j + 14) % 16];\n                    tl = wl[(j + 14) % 16];\n                    h = ((th >>> 19) | (tl << (32 - 19))) ^ ((tl >>> (61 - 32)) |\n                        (th << (32 - (61 - 32)))) ^ (th >>> 6);\n                    l = ((tl >>> 19) | (th << (32 - 19))) ^ ((th >>> (61 - 32)) |\n                        (tl << (32 - (61 - 32)))) ^ ((tl >>> 6) | (th << (32 - 6)));\n                    a += l & 0xffff;\n                    b += l >>> 16;\n                    c += h & 0xffff;\n                    d += h >>> 16;\n                    b += a >>> 16;\n                    c += b >>> 16;\n                    d += c >>> 16;\n                    wh[j] = (c & 0xffff) | (d << 16);\n                    wl[j] = (a & 0xffff) | (b << 16);\n                }\n            }\n        }\n        // add\n        h = ah0;\n        l = al0;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[0];\n        l = hl[0];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[0] = ah0 = (c & 0xffff) | (d << 16);\n        hl[0] = al0 = (a & 0xffff) | (b << 16);\n        h = ah1;\n        l = al1;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[1];\n        l = hl[1];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[1] = ah1 = (c & 0xffff) | (d << 16);\n        hl[1] = al1 = (a & 0xffff) | (b << 16);\n        h = ah2;\n        l = al2;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[2];\n        l = hl[2];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[2] = ah2 = (c & 0xffff) | (d << 16);\n        hl[2] = al2 = (a & 0xffff) | (b << 16);\n        h = ah3;\n        l = al3;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[3];\n        l = hl[3];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[3] = ah3 = (c & 0xffff) | (d << 16);\n        hl[3] = al3 = (a & 0xffff) | (b << 16);\n        h = ah4;\n        l = al4;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[4];\n        l = hl[4];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[4] = ah4 = (c & 0xffff) | (d << 16);\n        hl[4] = al4 = (a & 0xffff) | (b << 16);\n        h = ah5;\n        l = al5;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[5];\n        l = hl[5];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[5] = ah5 = (c & 0xffff) | (d << 16);\n        hl[5] = al5 = (a & 0xffff) | (b << 16);\n        h = ah6;\n        l = al6;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[6];\n        l = hl[6];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[6] = ah6 = (c & 0xffff) | (d << 16);\n        hl[6] = al6 = (a & 0xffff) | (b << 16);\n        h = ah7;\n        l = al7;\n        a = l & 0xffff;\n        b = l >>> 16;\n        c = h & 0xffff;\n        d = h >>> 16;\n        h = hh[7];\n        l = hl[7];\n        a += l & 0xffff;\n        b += l >>> 16;\n        c += h & 0xffff;\n        d += h >>> 16;\n        b += a >>> 16;\n        c += b >>> 16;\n        d += c >>> 16;\n        hh[7] = ah7 = (c & 0xffff) | (d << 16);\n        hl[7] = al7 = (a & 0xffff) | (b << 16);\n        pos += 128;\n        len -= 128;\n    }\n    return pos;\n}\nexport function hash(data) {\n    const h = new SHA512();\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n//# sourceMappingURL=sha512.js.map",
     "// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA512 } from \"@stablelib/sha512\";\nimport { wipe } from \"@stablelib/wipe\";\nexport const SIGNATURE_LENGTH = 64;\nexport const PUBLIC_KEY_LENGTH = 32;\nexport const SECRET_KEY_LENGTH = 64;\nexport const SEED_LENGTH = 32;\n// Returns new zero-filled 16-element GF (Float64Array).\n// If passed an array of numbers, prefills the returned\n// array with them.\n//\n// We use Float64Array, because we need 48-bit numbers\n// for this implementation.\nfunction gf(init) {\n    const r = new Float64Array(16);\n    if (init) {\n        for (let i = 0; i < init.length; i++) {\n            r[i] = init[i];\n        }\n    }\n    return r;\n}\n// Base point.\nconst _9 = new Uint8Array(32);\n_9[0] = 9;\nconst gf0 = gf();\nconst gf1 = gf([1]);\nconst D = gf([\n    0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,\n    0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203\n]);\nconst D2 = gf([\n    0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,\n    0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406\n]);\nconst X = gf([\n    0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c,\n    0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169\n]);\nconst Y = gf([\n    0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666,\n    0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666\n]);\nconst I = gf([\n    0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,\n    0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83\n]);\nfunction set25519(r, a) {\n    for (let i = 0; i < 16; i++) {\n        r[i] = a[i] | 0;\n    }\n}\nfunction car25519(o) {\n    let c = 1;\n    for (let i = 0; i < 16; i++) {\n        let v = o[i] + c + 65535;\n        c = Math.floor(v / 65536);\n        o[i] = v - c * 65536;\n    }\n    o[0] += c - 1 + 37 * (c - 1);\n}\nfunction sel25519(p, q, b) {\n    const c = ~(b - 1);\n    for (let i = 0; i < 16; i++) {\n        const t = c & (p[i] ^ q[i]);\n        p[i] ^= t;\n        q[i] ^= t;\n    }\n}\nfunction pack25519(o, n) {\n    const m = gf();\n    const t = gf();\n    for (let i = 0; i < 16; i++) {\n        t[i] = n[i];\n    }\n    car25519(t);\n    car25519(t);\n    car25519(t);\n    for (let j = 0; j < 2; j++) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; i++) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        const b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        sel25519(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; i++) {\n        o[2 * i] = t[i] & 0xff;\n        o[2 * i + 1] = t[i] >> 8;\n    }\n}\nfunction verify32(x, y) {\n    let d = 0;\n    for (let i = 0; i < 32; i++) {\n        d |= x[i] ^ y[i];\n    }\n    return (1 & ((d - 1) >>> 8)) - 1;\n}\nfunction neq25519(a, b) {\n    const c = new Uint8Array(32);\n    const d = new Uint8Array(32);\n    pack25519(c, a);\n    pack25519(d, b);\n    return verify32(c, d);\n}\nfunction par25519(a) {\n    const d = new Uint8Array(32);\n    pack25519(d, a);\n    return d[0] & 1;\n}\nfunction unpack25519(o, n) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = n[2 * i] + (n[2 * i + 1] << 8);\n    }\n    o[15] &= 0x7fff;\n}\nfunction add(o, a, b) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] + b[i];\n    }\n}\nfunction sub(o, a, b) {\n    for (let i = 0; i < 16; i++) {\n        o[i] = a[i] - b[i];\n    }\n}\nfunction mul(o, a, b) {\n    let v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n    v = a[0];\n    t0 += v * b0;\n    t1 += v * b1;\n    t2 += v * b2;\n    t3 += v * b3;\n    t4 += v * b4;\n    t5 += v * b5;\n    t6 += v * b6;\n    t7 += v * b7;\n    t8 += v * b8;\n    t9 += v * b9;\n    t10 += v * b10;\n    t11 += v * b11;\n    t12 += v * b12;\n    t13 += v * b13;\n    t14 += v * b14;\n    t15 += v * b15;\n    v = a[1];\n    t1 += v * b0;\n    t2 += v * b1;\n    t3 += v * b2;\n    t4 += v * b3;\n    t5 += v * b4;\n    t6 += v * b5;\n    t7 += v * b6;\n    t8 += v * b7;\n    t9 += v * b8;\n    t10 += v * b9;\n    t11 += v * b10;\n    t12 += v * b11;\n    t13 += v * b12;\n    t14 += v * b13;\n    t15 += v * b14;\n    t16 += v * b15;\n    v = a[2];\n    t2 += v * b0;\n    t3 += v * b1;\n    t4 += v * b2;\n    t5 += v * b3;\n    t6 += v * b4;\n    t7 += v * b5;\n    t8 += v * b6;\n    t9 += v * b7;\n    t10 += v * b8;\n    t11 += v * b9;\n    t12 += v * b10;\n    t13 += v * b11;\n    t14 += v * b12;\n    t15 += v * b13;\n    t16 += v * b14;\n    t17 += v * b15;\n    v = a[3];\n    t3 += v * b0;\n    t4 += v * b1;\n    t5 += v * b2;\n    t6 += v * b3;\n    t7 += v * b4;\n    t8 += v * b5;\n    t9 += v * b6;\n    t10 += v * b7;\n    t11 += v * b8;\n    t12 += v * b9;\n    t13 += v * b10;\n    t14 += v * b11;\n    t15 += v * b12;\n    t16 += v * b13;\n    t17 += v * b14;\n    t18 += v * b15;\n    v = a[4];\n    t4 += v * b0;\n    t5 += v * b1;\n    t6 += v * b2;\n    t7 += v * b3;\n    t8 += v * b4;\n    t9 += v * b5;\n    t10 += v * b6;\n    t11 += v * b7;\n    t12 += v * b8;\n    t13 += v * b9;\n    t14 += v * b10;\n    t15 += v * b11;\n    t16 += v * b12;\n    t17 += v * b13;\n    t18 += v * b14;\n    t19 += v * b15;\n    v = a[5];\n    t5 += v * b0;\n    t6 += v * b1;\n    t7 += v * b2;\n    t8 += v * b3;\n    t9 += v * b4;\n    t10 += v * b5;\n    t11 += v * b6;\n    t12 += v * b7;\n    t13 += v * b8;\n    t14 += v * b9;\n    t15 += v * b10;\n    t16 += v * b11;\n    t17 += v * b12;\n    t18 += v * b13;\n    t19 += v * b14;\n    t20 += v * b15;\n    v = a[6];\n    t6 += v * b0;\n    t7 += v * b1;\n    t8 += v * b2;\n    t9 += v * b3;\n    t10 += v * b4;\n    t11 += v * b5;\n    t12 += v * b6;\n    t13 += v * b7;\n    t14 += v * b8;\n    t15 += v * b9;\n    t16 += v * b10;\n    t17 += v * b11;\n    t18 += v * b12;\n    t19 += v * b13;\n    t20 += v * b14;\n    t21 += v * b15;\n    v = a[7];\n    t7 += v * b0;\n    t8 += v * b1;\n    t9 += v * b2;\n    t10 += v * b3;\n    t11 += v * b4;\n    t12 += v * b5;\n    t13 += v * b6;\n    t14 += v * b7;\n    t15 += v * b8;\n    t16 += v * b9;\n    t17 += v * b10;\n    t18 += v * b11;\n    t19 += v * b12;\n    t20 += v * b13;\n    t21 += v * b14;\n    t22 += v * b15;\n    v = a[8];\n    t8 += v * b0;\n    t9 += v * b1;\n    t10 += v * b2;\n    t11 += v * b3;\n    t12 += v * b4;\n    t13 += v * b5;\n    t14 += v * b6;\n    t15 += v * b7;\n    t16 += v * b8;\n    t17 += v * b9;\n    t18 += v * b10;\n    t19 += v * b11;\n    t20 += v * b12;\n    t21 += v * b13;\n    t22 += v * b14;\n    t23 += v * b15;\n    v = a[9];\n    t9 += v * b0;\n    t10 += v * b1;\n    t11 += v * b2;\n    t12 += v * b3;\n    t13 += v * b4;\n    t14 += v * b5;\n    t15 += v * b6;\n    t16 += v * b7;\n    t17 += v * b8;\n    t18 += v * b9;\n    t19 += v * b10;\n    t20 += v * b11;\n    t21 += v * b12;\n    t22 += v * b13;\n    t23 += v * b14;\n    t24 += v * b15;\n    v = a[10];\n    t10 += v * b0;\n    t11 += v * b1;\n    t12 += v * b2;\n    t13 += v * b3;\n    t14 += v * b4;\n    t15 += v * b5;\n    t16 += v * b6;\n    t17 += v * b7;\n    t18 += v * b8;\n    t19 += v * b9;\n    t20 += v * b10;\n    t21 += v * b11;\n    t22 += v * b12;\n    t23 += v * b13;\n    t24 += v * b14;\n    t25 += v * b15;\n    v = a[11];\n    t11 += v * b0;\n    t12 += v * b1;\n    t13 += v * b2;\n    t14 += v * b3;\n    t15 += v * b4;\n    t16 += v * b5;\n    t17 += v * b6;\n    t18 += v * b7;\n    t19 += v * b8;\n    t20 += v * b9;\n    t21 += v * b10;\n    t22 += v * b11;\n    t23 += v * b12;\n    t24 += v * b13;\n    t25 += v * b14;\n    t26 += v * b15;\n    v = a[12];\n    t12 += v * b0;\n    t13 += v * b1;\n    t14 += v * b2;\n    t15 += v * b3;\n    t16 += v * b4;\n    t17 += v * b5;\n    t18 += v * b6;\n    t19 += v * b7;\n    t20 += v * b8;\n    t21 += v * b9;\n    t22 += v * b10;\n    t23 += v * b11;\n    t24 += v * b12;\n    t25 += v * b13;\n    t26 += v * b14;\n    t27 += v * b15;\n    v = a[13];\n    t13 += v * b0;\n    t14 += v * b1;\n    t15 += v * b2;\n    t16 += v * b3;\n    t17 += v * b4;\n    t18 += v * b5;\n    t19 += v * b6;\n    t20 += v * b7;\n    t21 += v * b8;\n    t22 += v * b9;\n    t23 += v * b10;\n    t24 += v * b11;\n    t25 += v * b12;\n    t26 += v * b13;\n    t27 += v * b14;\n    t28 += v * b15;\n    v = a[14];\n    t14 += v * b0;\n    t15 += v * b1;\n    t16 += v * b2;\n    t17 += v * b3;\n    t18 += v * b4;\n    t19 += v * b5;\n    t20 += v * b6;\n    t21 += v * b7;\n    t22 += v * b8;\n    t23 += v * b9;\n    t24 += v * b10;\n    t25 += v * b11;\n    t26 += v * b12;\n    t27 += v * b13;\n    t28 += v * b14;\n    t29 += v * b15;\n    v = a[15];\n    t15 += v * b0;\n    t16 += v * b1;\n    t17 += v * b2;\n    t18 += v * b3;\n    t19 += v * b4;\n    t20 += v * b5;\n    t21 += v * b6;\n    t22 += v * b7;\n    t23 += v * b8;\n    t24 += v * b9;\n    t25 += v * b10;\n    t26 += v * b11;\n    t27 += v * b12;\n    t28 += v * b13;\n    t29 += v * b14;\n    t30 += v * b15;\n    t0 += 38 * t16;\n    t1 += 38 * t17;\n    t2 += 38 * t18;\n    t3 += 38 * t19;\n    t4 += 38 * t20;\n    t5 += 38 * t21;\n    t6 += 38 * t22;\n    t7 += 38 * t23;\n    t8 += 38 * t24;\n    t9 += 38 * t25;\n    t10 += 38 * t26;\n    t11 += 38 * t27;\n    t12 += 38 * t28;\n    t13 += 38 * t29;\n    t14 += 38 * t30;\n    // t15 left as is\n    // first car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    // second car\n    c = 1;\n    v = t0 + c + 65535;\n    c = Math.floor(v / 65536);\n    t0 = v - c * 65536;\n    v = t1 + c + 65535;\n    c = Math.floor(v / 65536);\n    t1 = v - c * 65536;\n    v = t2 + c + 65535;\n    c = Math.floor(v / 65536);\n    t2 = v - c * 65536;\n    v = t3 + c + 65535;\n    c = Math.floor(v / 65536);\n    t3 = v - c * 65536;\n    v = t4 + c + 65535;\n    c = Math.floor(v / 65536);\n    t4 = v - c * 65536;\n    v = t5 + c + 65535;\n    c = Math.floor(v / 65536);\n    t5 = v - c * 65536;\n    v = t6 + c + 65535;\n    c = Math.floor(v / 65536);\n    t6 = v - c * 65536;\n    v = t7 + c + 65535;\n    c = Math.floor(v / 65536);\n    t7 = v - c * 65536;\n    v = t8 + c + 65535;\n    c = Math.floor(v / 65536);\n    t8 = v - c * 65536;\n    v = t9 + c + 65535;\n    c = Math.floor(v / 65536);\n    t9 = v - c * 65536;\n    v = t10 + c + 65535;\n    c = Math.floor(v / 65536);\n    t10 = v - c * 65536;\n    v = t11 + c + 65535;\n    c = Math.floor(v / 65536);\n    t11 = v - c * 65536;\n    v = t12 + c + 65535;\n    c = Math.floor(v / 65536);\n    t12 = v - c * 65536;\n    v = t13 + c + 65535;\n    c = Math.floor(v / 65536);\n    t13 = v - c * 65536;\n    v = t14 + c + 65535;\n    c = Math.floor(v / 65536);\n    t14 = v - c * 65536;\n    v = t15 + c + 65535;\n    c = Math.floor(v / 65536);\n    t15 = v - c * 65536;\n    t0 += c - 1 + 37 * (c - 1);\n    o[0] = t0;\n    o[1] = t1;\n    o[2] = t2;\n    o[3] = t3;\n    o[4] = t4;\n    o[5] = t5;\n    o[6] = t6;\n    o[7] = t7;\n    o[8] = t8;\n    o[9] = t9;\n    o[10] = t10;\n    o[11] = t11;\n    o[12] = t12;\n    o[13] = t13;\n    o[14] = t14;\n    o[15] = t15;\n}\nfunction square(o, a) {\n    mul(o, a, a);\n}\nfunction inv25519(o, i) {\n    const c = gf();\n    let a;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 253; a >= 0; a--) {\n        square(c, c);\n        if (a !== 2 && a !== 4) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\nfunction pow2523(o, i) {\n    const c = gf();\n    let a;\n    for (a = 0; a < 16; a++) {\n        c[a] = i[a];\n    }\n    for (a = 250; a >= 0; a--) {\n        square(c, c);\n        if (a !== 1) {\n            mul(c, c, i);\n        }\n    }\n    for (a = 0; a < 16; a++) {\n        o[a] = c[a];\n    }\n}\nfunction edadd(p, q) {\n    const a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();\n    sub(a, p[1], p[0]);\n    sub(t, q[1], q[0]);\n    mul(a, a, t);\n    add(b, p[0], p[1]);\n    add(t, q[0], q[1]);\n    mul(b, b, t);\n    mul(c, p[3], q[3]);\n    mul(c, c, D2);\n    mul(d, p[2], q[2]);\n    add(d, d, d);\n    sub(e, b, a);\n    sub(f, d, c);\n    add(g, d, c);\n    add(h, b, a);\n    mul(p[0], e, f);\n    mul(p[1], h, g);\n    mul(p[2], g, f);\n    mul(p[3], e, h);\n}\nfunction cswap(p, q, b) {\n    for (let i = 0; i < 4; i++) {\n        sel25519(p[i], q[i], b);\n    }\n}\nfunction pack(r, p) {\n    const tx = gf(), ty = gf(), zi = gf();\n    inv25519(zi, p[2]);\n    mul(tx, p[0], zi);\n    mul(ty, p[1], zi);\n    pack25519(r, ty);\n    r[31] ^= par25519(tx) << 7;\n}\nfunction scalarmult(p, q, s) {\n    set25519(p[0], gf0);\n    set25519(p[1], gf1);\n    set25519(p[2], gf1);\n    set25519(p[3], gf0);\n    for (let i = 255; i >= 0; --i) {\n        const b = (s[(i / 8) | 0] >> (i & 7)) & 1;\n        cswap(p, q, b);\n        edadd(q, p);\n        edadd(p, p);\n        cswap(p, q, b);\n    }\n}\nfunction scalarbase(p, s) {\n    const q = [gf(), gf(), gf(), gf()];\n    set25519(q[0], X);\n    set25519(q[1], Y);\n    set25519(q[2], gf1);\n    mul(q[3], X, Y);\n    scalarmult(p, q, s);\n}\n// Generates key pair from secret 32-byte seed.\nexport function generateKeyPairFromSeed(seed) {\n    if (seed.length !== SEED_LENGTH) {\n        throw new Error(`ed25519: seed must be ${SEED_LENGTH} bytes`);\n    }\n    const d = hash(seed);\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const publicKey = new Uint8Array(32);\n    const p = [gf(), gf(), gf(), gf()];\n    scalarbase(p, d);\n    pack(publicKey, p);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return {\n        publicKey,\n        secretKey\n    };\n}\nexport function generateKeyPair(prng) {\n    const seed = randomBytes(32, prng);\n    const result = generateKeyPairFromSeed(seed);\n    wipe(seed);\n    return result;\n}\nexport function extractPublicKeyFromSecretKey(secretKey) {\n    if (secretKey.length !== SECRET_KEY_LENGTH) {\n        throw new Error(`ed25519: secret key must be ${SECRET_KEY_LENGTH} bytes`);\n    }\n    return new Uint8Array(secretKey.subarray(32));\n}\nconst L = new Float64Array([\n    0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2,\n    0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10\n]);\nfunction modL(r, x) {\n    let carry;\n    let i;\n    let j;\n    let k;\n    for (i = 63; i >= 32; --i) {\n        carry = 0;\n        for (j = i - 32, k = i - 12; j < k; ++j) {\n            x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n            carry = Math.floor((x[j] + 128) / 256);\n            x[j] -= carry * 256;\n        }\n        x[j] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (j = 0; j < 32; j++) {\n        x[j] += carry - (x[31] >> 4) * L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for (j = 0; j < 32; j++) {\n        x[j] -= carry * L[j];\n    }\n    for (i = 0; i < 32; i++) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] & 255;\n    }\n}\nfunction reduce(r) {\n    const x = new Float64Array(64);\n    for (let i = 0; i < 64; i++) {\n        x[i] = r[i];\n    }\n    for (let i = 0; i < 64; i++) {\n        r[i] = 0;\n    }\n    modL(r, x);\n}\n// Returns 64-byte signature of the message under the 64-byte secret key.\nexport function sign(secretKey, message) {\n    if (secretKey.length !== SECRET_KEY_LENGTH) {\n        throw new Error(`ed25519: secret key must be ${SECRET_KEY_LENGTH} bytes`);\n    }\n    const x = new Float64Array(64);\n    const p = [gf(), gf(), gf(), gf()];\n    const d = hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const signature = new Uint8Array(64);\n    signature.set(d.subarray(32), 32);\n    const hs = new SHA512();\n    hs.update(signature.subarray(32));\n    hs.update(message);\n    const r = hs.digest();\n    hs.clean();\n    reduce(r);\n    scalarbase(p, r);\n    pack(signature, p);\n    hs.reset();\n    hs.update(signature.subarray(0, 32));\n    hs.update(secretKey.subarray(32));\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    for (let i = 0; i < 32; i++) {\n        x[i] = r[i];\n    }\n    for (let i = 0; i < 32; i++) {\n        for (let j = 0; j < 32; j++) {\n            x[i + j] += h[i] * d[j];\n        }\n    }\n    modL(signature.subarray(32), x);\n    return signature;\n}\nfunction unpackneg(r, p) {\n    const t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();\n    set25519(r[2], gf1);\n    unpack25519(r[1], p);\n    square(num, r[1]);\n    mul(den, num, D);\n    sub(num, num, r[2]);\n    add(den, r[2], den);\n    square(den2, den);\n    square(den4, den2);\n    mul(den6, den4, den2);\n    mul(t, den6, num);\n    mul(t, t, den);\n    pow2523(t, t);\n    mul(t, t, num);\n    mul(t, t, den);\n    mul(t, t, den);\n    mul(r[0], t, den);\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        mul(r[0], r[0], I);\n    }\n    square(chk, r[0]);\n    mul(chk, chk, den);\n    if (neq25519(chk, num)) {\n        return -1;\n    }\n    if (par25519(r[0]) === (p[31] >> 7)) {\n        sub(r[0], gf0, r[0]);\n    }\n    mul(r[3], r[0], r[1]);\n    return 0;\n}\nexport function verify(publicKey, message, signature) {\n    const t = new Uint8Array(32);\n    const p = [gf(), gf(), gf(), gf()];\n    const q = [gf(), gf(), gf(), gf()];\n    if (signature.length !== SIGNATURE_LENGTH) {\n        throw new Error(`ed25519: signature must be ${SIGNATURE_LENGTH} bytes`);\n    }\n    if (unpackneg(q, publicKey)) {\n        return false;\n    }\n    const hs = new SHA512();\n    hs.update(signature.subarray(0, 32));\n    hs.update(publicKey);\n    hs.update(message);\n    const h = hs.digest();\n    reduce(h);\n    scalarmult(p, q, h);\n    scalarbase(q, signature.subarray(32));\n    edadd(p, q);\n    pack(t, p);\n    if (verify32(signature, t)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Convert Ed25519 public key to X25519 public key.\n *\n * Throws if given an invalid public key.\n */\nexport function convertPublicKeyToX25519(publicKey) {\n    let q = [gf(), gf(), gf(), gf()];\n    if (unpackneg(q, publicKey)) {\n        throw new Error(\"Ed25519: invalid public key\");\n    }\n    // Formula: montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p\n    let a = gf();\n    let b = gf();\n    let y = q[1];\n    add(a, gf1, y);\n    sub(b, gf1, y);\n    inv25519(b, b);\n    mul(a, a, b);\n    let z = new Uint8Array(32);\n    pack25519(z, a);\n    return z;\n}\n/**\n *  Convert Ed25519 secret (private) key to X25519 secret key.\n */\nexport function convertSecretKeyToX25519(secretKey) {\n    const d = hash(secretKey.subarray(0, 32));\n    d[0] &= 248;\n    d[31] &= 127;\n    d[31] |= 64;\n    const o = new Uint8Array(d.subarray(0, 32));\n    wipe(d);\n    return o;\n}\n//# sourceMappingURL=ed25519.js.map"
   ],
-  "mappings": "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Y;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY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A,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,MAAM,IAAI;AAAA,EACV,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,IAAI,EAAE;AAAA,EACN,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,OAAO,IAAI;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,MAAM,KAAK;AAAA,EACX,OAAO,KAAK;AAAA,EACZ,OAAO,KAAK;AAAA,EACZ,OAAO,KAAK;AAAA,EACZ,OAAO,KAAK;AAAA,EACZ,OAAO,KAAK;AAAA,EAGZ,IAAI;AAAA,EACJ,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,MAAM,IAAI,IAAI,MAAM,IAAI;AAAA,EAExB,IAAI;AAAA,EACJ,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,KAAK,IAAI;AAAA,EACb,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,KAAK,IAAI,IAAI;AAAA,EACb,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,IAAI,MAAM,IAAI;AAAA,EACd,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,EACxB,MAAM,IAAI,IAAI;AAAA,EACd,MAAM,IAAI,IAAI,MAAM,IAAI;AAAA,EACxB,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP,EAAE,KAAK;AAAA,EACP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",
-  "debugId": "2F649D20B48F477764756E2164756E21",
+  "mappings": "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AAC9c,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,QAAM,IAAI;AACV,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,SAAO,IAAI;AACX,MAAI,EAAE;AACN,SAAO,IAAI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",
+  "debugId": "89F56FAD0280F75864756E2164756E21",
   "names": []
 }
\ No newline at end of file
diff --git a/dist/esm/index.js b/dist/esm/index.js
index 2a498b9983c8c8ae19054863285f61c0bb112505..746479ff99dff1118fbcae05c944e028c832f904 100644
--- a/dist/esm/index.js
+++ b/dist/esm/index.js
@@ -681,23 +681,27 @@ var getFS = async () => {
         const module = maybeRequire(fsModuleSpecifier);
         fsModule = module;
         return module;
-      } catch {}
+      } catch {
+      }
       try {
         const module = maybeRequire("fs");
         fsModule = module;
         return module;
-      } catch {}
+      } catch {
+      }
     }
     try {
       const module = await import(fsModuleSpecifier);
       fsModule = module;
       return module;
-    } catch {}
+    } catch {
+    }
     try {
       const module = await import("fs");
       fsModule = module;
       return module;
-    } catch {}
+    } catch {
+    }
     throw new Error("Filesystem access is not available in this environment (unable to load fs)");
   })();
   return fsImportPromise;
@@ -832,7 +836,8 @@ function setCachedHash(input, hash) {
   try {
     const key = JSON.stringify(input);
     hashCache.set(key, hash);
-  } catch {}
+  } catch {
+  }
 }
 async function deriveHash(input) {
   const cached = getCachedHash(input);
@@ -919,14 +924,14 @@ var normalizeVMs = (verificationMethod, did = null) => {
   }
   const vms = verificationMethod.map((vm) => ({
     ...vm,
-    id: createVMID(vm, did)
+    id: vm.id ?? createVMID(vm, did)
   }));
   all.verificationMethod = vms;
-  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => createVMID(vm, did));
-  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => createVMID(vm, did));
-  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => createVMID(vm, did));
-  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => createVMID(vm, did));
-  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => createVMID(vm, did));
+  all.authentication = verificationMethod.filter((vm) => !vm.purpose || vm.purpose === "authentication").map((vm) => vm.id ?? createVMID(vm, did));
+  all.assertionMethod = verificationMethod.filter((vm) => vm.purpose === "assertionMethod").map((vm) => vm.id ?? createVMID(vm, did));
+  all.keyAgreement = verificationMethod.filter((vm) => vm.purpose === "keyAgreement").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityDelegation = verificationMethod.filter((vm) => vm.purpose === "capabilityDelegation").map((vm) => vm.id ?? createVMID(vm, did));
+  all.capabilityInvocation = verificationMethod.filter((vm) => vm.purpose === "capabilityInvocation").map((vm) => vm.id ?? createVMID(vm, did));
   return all;
 };
 var resolveVM = async (vm) => {
@@ -1301,7 +1306,8 @@ var resolveDIDFromLog2 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -1699,7 +1705,8 @@ var resolveDIDFromLog3 = async (log, options = {}) => {
         throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);
       }
       meta.versionId = versionId;
-      if (versionTime) {}
+      if (versionTime) {
+      }
       meta.updated = versionTime;
       let newDoc = state;
       if (version === "1") {
@@ -2142,4 +2149,4 @@ export {
   AbstractCrypto
 };
 
-//# debugId=0999BF4F81E60E0464756E2164756E21
+//# debugId=FF5C91BE6550EBA464756E2164756E21
diff --git a/dist/esm/index.js.map b/dist/esm/index.js.map
index eb5d6d8f571acf868095ecf140122aaf0bce77b7..6994e2d0bcbf185e2a77465370f8e5f6225c27e5 100644
--- a/dist/esm/index.js.map
+++ b/dist/esm/index.js.map
@@ -3,7 +3,7 @@
   "sources": ["../../node_modules/json-canonicalize/bundles/index.umd.js", "../../src/utils.ts", "../../src/utils/buffer.ts", "../../src/config.ts", "../../src/constants.ts", "../../src/utils/multiformats.ts", "../../node_modules/@noble/hashes/esm/utils.js", "../../node_modules/@noble/hashes/esm/_md.js", "../../node_modules/@noble/hashes/esm/sha2.js", "../../src/utils/crypto.ts", "../../src/assertions.ts", "../../src/witness.ts", "../../src/method_versions/method.v1.0.ts", "../../src/method_versions/method.v0.5.ts", "../../src/method.ts", "../../src/cryptography.ts"],
   "sourcesContent": [
     "(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JsonCanonicalize = {}));\n}(this, (function (exports) { 'use strict';\n\n    function canonicalize(obj) {\n        var buffer = '';\n        serialize(obj);\n        return buffer;\n        function serialize(object) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    if (element === undefined) {\n                        element = null;\n                    }\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                var vKeys = Object.keys(object).filter(function (k) { return object[k] !== undefined; }).sort();\n                vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property]);\n        }\n    }\n\n    function canonicalizeEx(obj, options) {\n        var buffer = '';\n        var vInclude = options && options.include;\n        var vExclude = options && options.exclude;\n        if (vExclude) {\n            if (typeof vExclude === 'string')\n                vExclude = [vExclude];\n        }\n        if (vInclude)\n            vInclude.sort();\n        serialize(obj);\n        return buffer;\n        function serialize(object, parent) {\n            if (object === null ||\n                typeof object !== 'object' ||\n                object.toJSON != null) {\n                /////////////////////////////////////////////////\n                // Primitive data type - Use ES6/JSON          //\n                /////////////////////////////////////////////////\n                buffer += JSON.stringify(object);\n                // } else if (object instanceof Date) {\n                //   buffer += JSON.stringify(object);\n            }\n            else if (Array.isArray(object)) {\n                /////////////////////////////////////////////////\n                // Array - Maintain element order              //\n                /////////////////////////////////////////////////\n                buffer += '[';\n                var next_1 = false;\n                object.forEach(function (element) {\n                    if (next_1) {\n                        buffer += ',';\n                    }\n                    next_1 = true;\n                    /////////////////////////////////////////\n                    // Array element - Recursive expansion //\n                    /////////////////////////////////////////\n                    serialize(element, object);\n                });\n                buffer += ']';\n            }\n            else {\n                /////////////////////////////////////////////////\n                // Object - Sort properties before serializing //\n                /////////////////////////////////////////////////\n                buffer += '{';\n                if (!parent && vInclude) {\n                    vInclude.forEach(function (property, index) {\n                        if (!object.hasOwnProperty(property))\n                            return;\n                        addProp(object, property, index);\n                    });\n                }\n                else {\n                    var vKeys = Object.keys(object).sort();\n                    vKeys.forEach(function (property, index) { return addProp(object, property, index); });\n                }\n                buffer += '}';\n            }\n        }\n        function addProp(object, property, index) {\n            if (vExclude && vExclude.length) {\n                for (var _i = 0, vExclude_1 = vExclude; _i < vExclude_1.length; _i++) {\n                    var v = vExclude_1[_i];\n                    if (v === property)\n                        return;\n                }\n            }\n            if (index > 0) {\n                buffer += ',';\n            }\n            ///////////////////////////////////////////////\n            // Property names are strings - Use ES6/JSON //\n            ///////////////////////////////////////////////\n            buffer += JSON.stringify(property);\n            buffer += ':';\n            //////////////////////////////////////////\n            // Property value - Recursive expansion //\n            //////////////////////////////////////////\n            serialize(object[property], object);\n        }\n    }\n\n    exports.canonicalize = canonicalize;\n    exports.canonicalizeEx = canonicalizeEx;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.umd.js.map\n",
-    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
+    "import { canonicalize } from 'json-canonicalize';\nimport { config } from './config';\nimport { resolveDIDFromLog } from './method';\nimport type { CreateDIDInterface, DIDDoc, DIDLog, VerificationMethod, WitnessProofFileEntry } from './interfaces';\nimport { BASE_CONTEXT } from './constants';\nimport { createBuffer, bufferToString } from './utils/buffer';\nimport { createMultihash, encodeBase58Btc, MultihashAlgorithm } from './utils/multiformats';\nimport { createHash } from './utils/crypto';\n\n// Environment detection - treat React Native like a browser, but Bun as Node-like\nconst isNodeEnvironment = typeof process !== 'undefined'\n  && typeof window === 'undefined'\n  && !!(process.versions && (process.versions as any).node || (process.versions as any).bun);\n\n// Avoid bundlers including `fs`: hide the specifier from static analyzers\nconst fsModuleSpecifier = ['node', 'fs'].join(':');\n// We'll resolve require dynamically only in Node runtimes; otherwise use dynamic import with a non-literal\n\nlet fsModule: any | null = null;\nlet fsImportPromise: Promise<any> | null = null;\n\nconst getFS = async (): Promise<any> => {\n  if (!isNodeEnvironment) {\n    throw new Error('Filesystem access is not available in this environment (React Native, browser, or failed Node.js import)');\n  }\n  \n  if (fsModule) {\n    return fsModule;\n  }\n  \n  if (fsImportPromise) {\n    return fsImportPromise;\n  }\n  \n  fsImportPromise = (async () => {\n    // Prefer require when present (Node)\n    const maybeRequire = (globalThis as any)[\"require\"];\n    if (typeof maybeRequire === 'function') {\n      try {\n        const module = maybeRequire(fsModuleSpecifier);\n        fsModule = module;\n        return module;\n      } catch {}\n      try {\n        const module = maybeRequire('fs');\n        fsModule = module;\n        return module;\n      } catch {}\n    }\n    // Fallback to dynamic import (Bun/ESM)\n    try {\n      const module = await import(fsModuleSpecifier as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    try {\n      const module = await import('fs' as any);\n      fsModule = module as any;\n      return module as any;\n    } catch {}\n    throw new Error('Filesystem access is not available in this environment (unable to load fs)');\n  })();\n  \n  return fsImportPromise;\n};\n\nconst toASCII = (domain: string): string => {\n  try {\n    const scheme = domain.includes('localhost') ? 'http' : 'https';\n    return new URL(`${scheme}://${domain}`).hostname;\n  } catch {\n    return domain;\n  }\n};\n\nexport const readLogFromDisk = async (path: string): Promise<DIDLog> => {\n  const fs = await getFS();\n  return readLogFromString(fs.readFileSync(path, 'utf8'));\n}\n\nexport const readLogFromString = (str: string): DIDLog => {\n  return str.trim().split('\\n').map(l => JSON.parse(l));\n}\n\nexport const writeLogToDisk = async (path: string, log: DIDLog) => {\n  const fs = await getFS();\n  try {\n    const dir = path.substring(0, path.lastIndexOf('/'));\n    if (dir && !fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    fs.writeFileSync(path, JSON.stringify(log[0]) + '\\n');\n    \n    for (let i = 1; i < log.length; i++) {\n      fs.appendFileSync(path, JSON.stringify(log[i]) + '\\n');\n    }\n  } catch (error) {\n    console.error('Error writing log to disk:', error);\n    throw error;\n  }\n}\n\nexport const maybeWriteTestLog = async (did: string, log: DIDLog) => {\n  if (!config.isTestEnvironment) return;\n  try {\n    const fileSafe = did.replace(/[^a-zA-Z0-9]+/g, '_');\n    const path = `./test/logs/${fileSafe}.jsonl`;\n    await writeLogToDisk(path, log);\n  } catch (error) {\n    console.error('Error writing test log:', error);\n  }\n};\n\nexport const writeVerificationMethodToEnv = async (verificationMethod: VerificationMethod) => {\n  const envFilePath = process.cwd() + '/.env';\n  \n  const vmData = {\n    id: verificationMethod.id,\n    type: verificationMethod.type,\n    controller: verificationMethod.controller || '',\n    publicKeyMultibase: verificationMethod.publicKeyMultibase,\n    secretKeyMultibase: verificationMethod.secretKeyMultibase || ''\n  };\n\n  const fs = await getFS();\n  try {\n    let envContent = '';\n    let existingData: any[] = [];\n    \n    if (fs.existsSync(envFilePath)) {\n      envContent = fs.readFileSync(envFilePath, 'utf8');\n      const match = envContent.match(/DID_VERIFICATION_METHODS=(.*)/);\n      if (match && match[1]) {\n        const decodedData = bufferToString(createBuffer(match[1], 'base64'));\n        existingData = JSON.parse(decodedData);\n        \n        // Check if verification method with same ID already exists\n        const existingIndex = existingData.findIndex(vm => vm.id === vmData.id);\n        if (existingIndex !== -1) {\n          // Update existing verification method\n          existingData[existingIndex] = vmData;\n        } else {\n          // Add new verification method\n          existingData.push(vmData);\n        }\n      } else {\n        // No existing verification methods, create new array\n        existingData = [vmData];\n      }\n    } else {\n      // No .env file exists, create new array\n      existingData = [vmData];\n    }\n    \n    const jsonData = JSON.stringify(existingData);\n    const encodedData = bufferToString(createBuffer(jsonData), 'base64');\n    \n    // If DID_VERIFICATION_METHODS already exists, replace it\n    if (envContent.includes('DID_VERIFICATION_METHODS=')) {\n      envContent = envContent.replace(/DID_VERIFICATION_METHODS=.*\\n?/, `DID_VERIFICATION_METHODS=${encodedData}\\n`);\n    } else {\n      // Otherwise append it\n      envContent += `DID_VERIFICATION_METHODS=${encodedData}\\n`;\n    }\n\n    fs.writeFileSync(envFilePath, envContent.trim() + '\\n');\n    console.log('Verification method written to .env file successfully.');\n  } catch (error) {\n    console.error('Error writing verification method to .env file:', error);\n  }\n};\n\nexport const clone = (input: any) => JSON.parse(JSON.stringify(input));\n\nexport function deepClone(obj: any): any {\n  if (obj === null || typeof obj !== 'object') return obj;\n  if (obj instanceof Date) return new Date(obj.getTime());\n  if (Array.isArray(obj)) return obj.map(item => deepClone(item));\n  \n  const cloned: any = {};\n  for (const [key, value] of Object.entries(obj)) {\n    cloned[key] = deepClone(value);\n  }\n  return cloned;\n}\n\nexport const getBaseUrl = (id: string) => {\n  const parts = id.split(':');\n  if (!id.startsWith('did:webvh:') || parts.length < 4) {\n    throw new Error(`${id} is not a valid did:webvh identifier`);\n  }\n\n  let remainder = decodeURIComponent(parts.slice(3).join('/'));\n  const protocol = remainder.includes('localhost') ? 'http' : 'https';\n\n  const [hostPart, ...pathParts] = remainder.split('/');\n  let [host, port] = decodeURIComponent(hostPart).split(':');\n\n  host = host\n    .split('.')\n    .map(label => toASCII(label.normalize('NFC')))\n    .join('.');\n\n  const normalizedHost = port ? `${host}:${port}` : host;\n  const path = pathParts.join('/');\n\n  return `${protocol}://${normalizedHost}${path ? '/' + path : ''}`;\n}\n\nexport const getFileUrl = (id: string) => {\n  const baseUrl = getBaseUrl(id);\n  const domainEndIndex = baseUrl.indexOf('/', baseUrl.indexOf('://') + 3);\n  \n  if (domainEndIndex !== -1) {\n    return `${baseUrl}/did.jsonl`;\n  }\n  return `${baseUrl}/.well-known/did.jsonl`;\n}\n\nexport async function fetchLogFromIdentifier(identifier: string, controlled: boolean = false): Promise<DIDLog> {\n  try {\n    if (controlled) {\n      const didParts = identifier.split(':');\n      const fileIdentifier = didParts.slice(4).join(':');\n      const logPath = `./src/routes/${fileIdentifier || '.well-known'}/did.jsonl`;\n\n      try {\n        let text: string;\n        if (typeof Bun !== 'undefined' && Bun.file) {\n          text = (await Bun.file(logPath).text()).trim();\n        } else if (isNodeEnvironment) {\n          const fs = await getFS();\n          text = fs.readFileSync(logPath, 'utf8').trim();\n        } else {\n          throw new Error('Local log retrieval not supported in this environment');\n        }\n        if (!text) {\n          return [];\n        }\n        return text.split('\\n').map(line => JSON.parse(line));\n      } catch (error) {\n        throw new Error(`Error reading local DID log: ${error}`);\n      }\n    }\n\n    const url = getFileUrl(identifier);\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const text = (await response.text()).trim();\n    if (!text) {\n      throw new Error(`DID log not found for ${identifier}`);\n    }\n    return text.split('\\n').map(line => JSON.parse(line));\n  } catch (error) {\n    console.error('Error fetching DID log:', error);\n    throw error;\n  }\n}\n\nexport const createDate = (created?: Date | string) => new Date(created ?? Date.now()).toISOString().slice(0,-5)+'Z';\n\nexport function bytesToHex(bytes: Uint8Array): string {\n  return Array.from(bytes).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\nexport const createSCID = async (logEntryHash: string): Promise<string> => {\n  return logEntryHash;\n}\n\n// Cache for deriveHash operations to avoid redundant computation\nconst hashCache = new Map<string, string>();\n\nfunction getCachedHash(input: any): string | undefined {\n  try {\n    const key = JSON.stringify(input);\n    return hashCache.get(key);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction setCachedHash(input: any, hash: string): void {\n  try {\n    const key = JSON.stringify(input);\n    hashCache.set(key, hash);\n  } catch {\n    // Ignore caching errors\n  }\n}\n\nexport async function deriveHash(input: any): Promise<string> {\n  const cached = getCachedHash(input);\n  if (cached) {\n    return cached;\n  }\n  \n  const data = canonicalize(input);\n  const hash = await createHash(data);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  const result = encodeBase58Btc(multihash);\n  setCachedHash(input, result);\n  return result;\n}\n\nexport const deriveNextKeyHash = async (input: string): Promise<string> => {\n  const hash = await createHash(input);\n  const multihash = createMultihash(new Uint8Array(hash), MultihashAlgorithm.SHA2_256);\n  return encodeBase58Btc(multihash);\n}\n\nexport const createDIDDoc = async (options: CreateDIDInterface): Promise<{doc: DIDDoc}> => {\n  const {controller} = options;\n  const all = normalizeVMs(options.verificationMethods, controller);\n\n  // Create the base document\n  const doc: DIDDoc = {\n    \"@context\": options.context || BASE_CONTEXT,\n    id: controller,\n    controller,\n  };\n\n  // Add verification methods and relationships from normalizeVMs\n  if (all && typeof all === 'object') {\n    if (all.verificationMethod) {\n      doc.verificationMethod = all.verificationMethod;\n    }\n    \n    if (all.authentication) {\n      doc.authentication = all.authentication;\n    }\n    \n    if (all.assertionMethod) {\n      doc.assertionMethod = all.assertionMethod;\n    }\n    \n    if (all.keyAgreement) {\n      doc.keyAgreement = all.keyAgreement;\n    }\n    \n    if (all.capabilityDelegation) {\n      doc.capabilityDelegation = all.capabilityDelegation;\n    }\n    \n    if (all.capabilityInvocation) {\n      doc.capabilityInvocation = all.capabilityInvocation;\n    }\n  }\n  \n  // Add direct properties from options\n  if (options.authentication) {\n    doc.authentication = options.authentication;\n  }\n  \n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n  \n  if (options.alsoKnownAs) {\n    doc.alsoKnownAs = options.alsoKnownAs;\n  }\n  \n  return {doc};\n}\n\n// Helper function to generate a random string (replacement for nanoid)\nexport const generateRandomId = (length: number = 8): string => {\n  const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nexport const createVMID = (vm: VerificationMethod, did: string | null) => {\n  return `${did ?? ''}#${vm.publicKeyMultibase?.slice(-8) || generateRandomId(8)}`\n}\n\nexport const normalizeVMs = (verificationMethod: VerificationMethod[] | undefined, did: string | null = null) => {\n  const all: any = {\n    verificationMethod: [],\n    authentication: [],\n    assertionMethod: [],\n    keyAgreement: [],\n    capabilityDelegation: [],\n    capabilityInvocation: []\n  };\n  \n  if (!verificationMethod || verificationMethod.length === 0) {\n    return all;\n  }\n  \n  // First collect all VMs\n  const vms = verificationMethod.map(vm => ({\n    ...vm,\n    id: vm.id ?? createVMID(vm, did)\n  }));\n  all.verificationMethod = vms;\n\n  // Then handle relationships - default to authentication if no purpose is specified\n  all.authentication = verificationMethod\n    .filter(vm => !vm.purpose || vm.purpose === 'authentication')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  all.assertionMethod = verificationMethod\n    .filter(vm => vm.purpose === 'assertionMethod')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.keyAgreement = verificationMethod\n    .filter(vm => vm.purpose === 'keyAgreement')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityDelegation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityDelegation')\n    .map(vm => vm.id ??createVMID(vm, did));\n\n  all.capabilityInvocation = verificationMethod\n    .filter(vm => vm.purpose === 'capabilityInvocation')\n    .map(vm => vm.id ?? createVMID(vm, did));\n\n  return all;\n};\n\nexport const resolveVM = async (vm: string) => {\n  try {\n    if (vm.startsWith('did:key:')) {\n      return {publicKeyMultibase: vm.split('did:key:')[1].split('#')[0]}\n    }\n    else if (vm.startsWith('did:webvh:')) {\n      const url = getFileUrl(vm.split('#')[0]);\n      const didLog = await (await fetch(url)).text();\n      const logEntries: DIDLog = didLog.trim().split('\\n').map(l => JSON.parse(l));\n      const {doc} = await resolveDIDFromLog(logEntries, {verificationMethod: vm});\n      return findVerificationMethod(doc, vm);\n    }\n    throw new Error(`Verification method ${vm} not found`);\n  } catch (e) {\n    throw new Error(`Error resolving VM ${vm}`)\n  }\n}\n\nexport const findVerificationMethod = (doc: any, vmId: string): VerificationMethod | null => {\n  // Check in the verificationMethod array\n  if (doc.verificationMethod && doc.verificationMethod.some((vm: any) => vm.id === vmId)) {\n    return doc.verificationMethod.find((vm: any) => vm.id === vmId);\n  }\n\n  // Check in other verification method relationship arrays\n  const vmRelationships = ['authentication', 'assertionMethod', 'keyAgreement', 'capabilityInvocation', 'capabilityDelegation'];\n  for (const relationship of vmRelationships) {\n    if (doc[relationship]) {\n      if (doc[relationship].some((item: any) => item.id === vmId)) {\n        return doc[relationship].find((item: any) => item.id === vmId);\n      }\n    }\n  }\n\n  return null;\n}\n\nexport async function getActiveDIDs(): Promise<string[]> {\n  const activeDIDs: string[] = [];\n  \n  try {\n    for (const vm of config.getVerificationMethods()) {\n      const did = vm.controller || vm.id.split('#')[0];\n      activeDIDs.push(did);\n    }\n  } catch (error) {\n    console.error('Error processing verification methods:', error);\n  }\n  \n  return activeDIDs;\n}\n\nexport async function fetchWitnessProofs(did: string): Promise<WitnessProofFileEntry[]> {\n  try {\n    const url = getFileUrl(did).replace('did.jsonl', 'did-witness.json');\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      return [];\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching witness proofs:', error);\n    return [];\n  }\n}\n\nexport function replaceValueInObject(obj: any, searchValue: string, replaceValue: string): any {\n  if (typeof obj === 'string') {\n    return obj.replaceAll(searchValue, replaceValue);\n  }\n  if (Array.isArray(obj)) {\n    return obj.map(item => replaceValueInObject(item, searchValue, replaceValue));\n  }\n  if (obj && typeof obj === 'object') {\n    const result: any = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = replaceValueInObject(value, searchValue, replaceValue);\n    }\n    return result;\n  }\n  return obj;\n}",
     "import { config } from '../config';\n\n// Helper to convert bytes to hex string\nconst bytesToHex = (bytes: Uint8Array): string => {\n  return Array.from(bytes)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n};\n\n// Helper to convert hex string to bytes\nconst hexToBytes = (hex: string): Uint8Array => {\n  if (hex.length % 2 !== 0) {\n    throw new Error('Hex string must have an even number of characters');\n  }\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.slice(i, i + 2), 16);\n  }\n  return bytes;\n};\n\n// Buffer polyfill for browser environments\nexport const createBuffer = (input: string, encoding?: BufferEncoding): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.from(input, encoding);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binaryString = atob(input);\n    return new Uint8Array(binaryString.length).map((_, i) => binaryString.charCodeAt(i));\n  }\n\n  // Default to UTF-8 encoding\n  return new TextEncoder().encode(input);\n};\n\nexport const bufferToString = (buffer: Uint8Array, encoding?: BufferEncoding): string => {\n  if (!config.isBrowser) {\n    return Buffer.from(buffer).toString(encoding);\n  }\n\n  // Handle hex encoding specifically\n  if (encoding === 'hex') {\n    return bytesToHex(buffer);\n  }\n\n  // Handle base64 encoding specifically\n  if (encoding === 'base64') {\n    const binary = String.fromCharCode(...buffer);\n    return btoa(binary);\n  }\n\n  // Default to UTF-8 encoding\n  return new TextDecoder().decode(buffer);\n};\n\nexport const concatBuffers = (...buffers: Uint8Array[]): Uint8Array => {\n  if (!config.isBrowser) {\n    return Buffer.concat(buffers);\n  }\n\n  // Calculate total length\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  \n  // Create new array and copy all buffers into it\n  const result = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    result.set(buffer, offset);\n    offset += buffer.length;\n  }\n  \n  return result;\n}; ",
     "import { createBuffer, bufferToString } from './utils/buffer';\n\n// Helper to safely access environment variables\nconst isBrowser = typeof window !== 'undefined';\n\nconst getEnvValue = (key: string): string | undefined => {\n  if (isBrowser) return undefined;\n  try {\n    return process?.env?.[key];\n  } catch {\n    return undefined;\n  }\n};\n\nexport const config = {\n  // Helper functions\n  getEnvValue,\n  isBrowser,\n  \n  // Environment checks\n  isTestEnvironment: getEnvValue('NODE_ENV') === 'test',\n  \n  // Feature flags\n  logResolves: getEnvValue('LOG_RESOLVES') === 'true',\n  \n  // Get verification methods from env\n  getVerificationMethods: () => {\n    const encoded = getEnvValue('DID_VERIFICATION_METHODS');\n    if (!encoded) return [];\n    try {\n      const decoded = createBuffer(encoded, 'base64');\n      return JSON.parse(bufferToString(decoded));\n    } catch {\n      return [];\n    }\n  }\n}; ",
     "export const PLACEHOLDER = \"{SCID}\";\nexport const METHOD = \"webvh\";\nexport const BASE_CONTEXT = [\n  \"https://www.w3.org/ns/did/v1\",\n  \"https://w3id.org/security/multikey/v1\"\n];",
@@ -14,12 +14,12 @@
     "/// <reference lib=\"dom\" />\nimport { sha256 } from '@noble/hashes/sha2';\n\nfunction arrayBufferToHex(buffer: ArrayBufferLike | Uint8Array): string {\n  const view = buffer instanceof Uint8Array ? buffer : new Uint8Array(buffer);\n  return Array.from(view)\n    .map(b => b.toString(16).padStart(2, '0'))\n    .join('');\n}\n\nexport async function createHash(data: string): Promise<Uint8Array> {\n  return sha256(data);\n}\n\nexport async function createHashHex(data: string): Promise<string> {\n  const hash = await createHash(data);\n  const view = new Uint8Array(hash.buffer);\n  return arrayBufferToHex(view);\n} ",
     "import { createSCID, deriveNextKeyHash, resolveVM } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport { config } from './config';\nimport { concatBuffers } from './utils/buffer';\nimport { WitnessParameter, Verifier, WitnessParameterResolution } from './interfaces';\nimport { validateWitnessParameter } from './witness';\nimport { multibaseDecode } from \"./utils/multiformats\";\n\nconst isKeyAuthorized = (verificationMethod: string, updateKeys: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_ASSERTION_KEY_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:key:')) {\n    const keyParts = verificationMethod.split('did:key:')[1].split('#');\n    const key = keyParts[0];\n    \n    const authorized = updateKeys.some(updateKey => {\n      let updateKeyPart = updateKey;\n      if (updateKey.startsWith('did:key:')) {\n        updateKeyPart = updateKey.split('did:key:')[1].split('#')[0];\n      }\n      \n      return updateKeyPart === key;\n    });\n    \n    return authorized;\n  }\n  return false;\n};\n\nconst isWitnessAuthorized = (verificationMethod: string, witnesses: string[]): boolean => {\n  if (config.getEnvValue('IGNORE_WITNESS_IS_AUTHORIZED') === 'true') return true;\n\n  if (verificationMethod.startsWith('did:webvh:')) {\n    const didWithoutFragment = verificationMethod.split('#')[0];\n    return witnesses.includes(didWithoutFragment);\n  }\n  return false;\n};\n\nexport const documentStateIsValid = async (\n  doc: any, \n  updateKeys: string[], \n  witness: WitnessParameterResolution | undefined | null,\n  skipWitnessVerification?: boolean,\n  verifier?: Verifier\n) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_DOCUMENT_STATE_IS_VALID') === 'true') {\n    return true;\n  }\n  \n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n  \n  let {proof: proofs, ...rest} = doc;\n  if (!Array.isArray(proofs)) {\n    proofs = [proofs];\n  }\n\n  if (witness && witness.witnesses && witness.witnesses.length > 0) {\n    if (!skipWitnessVerification) {\n      validateWitnessParameter(witness);\n    }\n  }\n\n  for (let i = 0; i < proofs.length; i++) {\n    const proof = proofs[i];\n\n    if (proof.verificationMethod.startsWith('did:key:')) {\n      if (!isKeyAuthorized(proof.verificationMethod, updateKeys)) {\n        throw new Error(`Key ${proof.verificationMethod} is not authorized to update.`);\n      }\n    } else if (proof.verificationMethod.startsWith('did:webvh:')) {\n      if (witness && witness.witnesses && witness.witnesses.length > 0 && !isWitnessAuthorized(proof.verificationMethod, witness.witnesses.map((w: {id: string}) => w.id))) {\n        throw new Error(`Key ${proof.verificationMethod} is not from an authorized witness.`);\n      }\n    } else {\n      throw new Error(`Unsupported verification method: ${proof.verificationMethod}`);\n    }\n    \n    if (proof.type !== 'DataIntegrityProof') {\n      throw new Error(`Unknown proof type ${proof.type}`);\n    }\n    if (proof.proofPurpose !== 'authentication' && proof.proofPurpose !== 'assertionMethod') {\n      throw new Error(`Unknown proof purpose ${proof.proofPurpose}`);\n    }\n    if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n      throw new Error(`Unknown cryptosuite ${proof.cryptosuite}`);\n    }\n\n    const vm = await resolveVM(proof.verificationMethod);\n    if (!vm) {\n      throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n    }\n\n    const publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n    if (publicKey[0] !== 0xed || publicKey[1] !== 0x01) {\n      throw new Error(`multiKey doesn't include ed25519 header (0xed01)`);\n    }\n\n    const {proofValue, ...restProof} = proof;\n    const signature = multibaseDecode(proofValue).bytes;\n    const dataHash = await createHash(canonicalize(rest));\n    const proofHash = await createHash(canonicalize(restProof));\n    const input = concatBuffers(proofHash, dataHash);\n\n    const verified = await verifier.verify(\n      signature,\n      input,\n      publicKey.slice(2)\n    );\n    \n    if (!verified) {\n      throw new Error(`Proof ${i} failed verification (proofValue: ${proofValue})`);\n    }\n  }\n  return true;\n}\n\nexport const hashChainValid = (derivedHash: string, logEntryHash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_HASH_CHAIN_IS_VALID') === 'true') return true;\n  return derivedHash === logEntryHash;\n}\n\nexport const newKeysAreInNextKeys = async (updateKeys: string[], previousNextKeyHashes: string[]) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_NEW_KEYS_ARE_VALID') === 'true') return true;\n\n  if (previousNextKeyHashes.length > 0) {\n    for (const key of updateKeys) {\n      const keyHash = await deriveNextKeyHash(key);\n      if (!previousNextKeyHashes.includes(keyHash)) {\n        throw new Error(`Invalid update key ${keyHash}. Not found in nextKeyHashes ${previousNextKeyHashes}`);\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const scidIsFromHash = async (scid: string, hash: string) => {\n  if (config.getEnvValue('IGNORE_ASSERTION_SCID_IS_FROM_HASH') === 'true') return true;\n  return scid === await createSCID(hash);\n}\n",
     "import { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { DataIntegrityProof, DIDLogEntry, WitnessEntry, WitnessProofFileEntry, Verifier, WitnessParameterResolution } from './interfaces';\nimport { resolveVM } from \"./utils\";\nimport { concatBuffers } from './utils/buffer';\nimport { fetchWitnessProofs } from './utils';\nimport { multibaseDecode } from './utils/multiformats';\n\nexport async function createWitnessProof(\n  signer: (doc: any) => Promise<{proof: any}>,\n  versionId: string\n): Promise<DataIntegrityProof> {\n  const proof = {\n    type: \"DataIntegrityProof\",\n    cryptosuite: \"eddsa-jcs-2022\",\n    created: new Date().toISOString(),\n    proofPurpose: \"authentication\"\n  };\n\n  const signedData = await signer({versionId});\n  \n  return {\n    ...proof,\n    ...signedData.proof\n  };\n}\n\nexport function validateWitnessParameter(witness: WitnessParameterResolution): void {\n  if (!witness.witnesses || !Array.isArray(witness.witnesses) || witness.witnesses.length === 0) {\n    throw new Error('Witness list cannot be empty');\n  }\n\n  if (!witness.threshold || parseInt(witness.threshold.toString()) < 1 || parseInt(witness.threshold.toString()) > witness.witnesses.length) {\n    throw new Error('Witness threshold must be between 1 and the number of witnesses');\n  }\n\n  const ids = new Set<string>();\n  for (const w of witness.witnesses) {\n    if (!w.id.startsWith('did:key:')) {\n      throw new Error('Witness DIDs must be did:key format');\n    }\n    if (ids.has(w.id)) {\n      throw new Error(`Duplicate witness id: ${w.id}`);\n    }\n    ids.add(w.id);\n  }\n}\n\nexport function calculateWitnessWeight(proofs: DataIntegrityProof[], witnesses: WitnessEntry[]): number {\n  const processed = new Set<string>();\n\n  for (const proof of proofs) {\n    const witness = witnesses.find(w => proof.verificationMethod.startsWith(w.id));\n    if (witness) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n      processed.add(witness.id);\n    }\n  }\n\n  return processed.size;\n}\n\nexport async function verifyWitnessProofs(\n  logEntry: DIDLogEntry,\n  witnessProofs: WitnessProofFileEntry[],\n  currentWitness: WitnessParameterResolution,\n  verifier?: Verifier\n): Promise<void> {\n  if (!verifier) {\n    throw new Error('Verifier implementation is required');\n  }\n\n  let approvals = 0;\n  const processedWitnesses = new Set<string>();\n\n  // Process each proof set\n  for (const proofSet of witnessProofs) {\n    // Process each proof in the set\n    for (const proof of proofSet.proof) {\n      if (proof.cryptosuite !== 'eddsa-jcs-2022') {\n        throw new Error('Invalid witness proof cryptosuite');\n      }\n\n      const witness = currentWitness.witnesses?.find(w => proof.verificationMethod.startsWith(w.id));\n      if (!witness) {\n        throw new Error('Proof from unauthorized witness');\n      }\n\n      if (processedWitnesses.has(witness.id)) {\n        continue; // Skip duplicate proofs from same witness\n      }\n\n      try {\n        // Resolve verification method\n        const vm = await resolveVM(proof.verificationMethod);\n        if (!vm) {\n          throw new Error(`Verification Method ${proof.verificationMethod} not found`);\n        }\n\n        // Decode public key\n        let publicKey: Uint8Array;\n        try {\n          publicKey = multibaseDecode(vm.publicKeyMultibase).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode public key: ${error.message}`);\n        }\n        \n        if (publicKey.length !== 34) {\n          throw new Error(`Invalid public key length ${publicKey.length} (should be 34 bytes)`);\n        }\n\n        // Extract proof value and prepare data for verification\n        const { proofValue, ...proofWithoutValue } = proof;\n        \n        // Create hashes\n        const canonicalizedData = canonicalize({versionId: logEntry.versionId});\n        const canonicalizedProof = canonicalize(proofWithoutValue);\n        \n        const dataHash = await createHash(canonicalizedData);\n        const proofHash = await createHash(canonicalizedProof);\n        \n        // Concatenate buffers\n        const input = concatBuffers(proofHash, dataHash);\n\n        // Decode signature\n        let signature: Uint8Array;\n        try {\n          signature = multibaseDecode(proofValue).bytes;\n        } catch (error: any) {\n          throw new Error(`Failed to decode signature: ${error.message}`);\n        }\n\n        // Verify signature\n        const verified = await verifier.verify(\n          signature,\n          input,\n          publicKey.slice(2)\n        );\n\n        if (!verified) {\n          throw new Error('Invalid witness proof signature');\n        }\n\n        approvals++;\n        processedWitnesses.add(witness.id);\n\n      } catch (error: any) {\n        throw new Error(`Invalid witness proof: ${error.message}`);\n      }\n    }\n  }\n\n  if (approvals < parseInt(currentWitness.threshold?.toString() ?? '0')) {\n    throw new Error(`Witness threshold not met: got ${approvals}, need ${currentWitness.threshold}`);\n  }\n}\n\nexport { fetchWitnessProofs }; ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
-    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getActiveDIDs, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport { METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, DataIntegrityProof } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '1.0';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? [],\n    witness: options.witness ?? {},\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    { ...prelimEntry, versionId: `1-${logEntryHash2}` }, \n    params.updateKeys, \n    params.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], fastResolve?: boolean } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  let did = '';\n  let doc: any = null;\n  let resolvedDoc: any = null;\n  let lastValidDoc: any = null;\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    deactivated: false,\n    portable: false,\n    scid: '',\n    updateKeys: [],\n    nextKeyHashes: [],\n    prerotation: false,\n    witness: undefined,\n    watchers: null\n  };\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n  let i = 0;\n  let host = '';\n\n  // Fast resolution: Only verify critical entries (first and last few entries)\n  const fastResolve = options.fastResolve ?? true; // Default to fast resolution\n  const isFirstEntry = (idx: number) => idx === 0;\n  const isLastFewEntries = (idx: number) => idx >= resolutionLog.length - 10; // Verify last 10 entries\n  const shouldVerifyEntry = (idx: number) => !fastResolve || isFirstEntry(idx) || isLastFewEntries(idx);\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    \n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      \n      if (shouldVerifyEntry(i)) {\n        // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n        const logEntry = {\n          versionId: PLACEHOLDER,\n          versionTime: meta.created,\n          parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n          state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n        };\n        \n        const logEntryHash = await deriveHash(logEntry);\n        meta.previousLogEntryHash = logEntryHash;\n        if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n          throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n        }\n        \n        // Optimized: Direct object manipulation instead of JSON stringify/parse\n        const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n        \n        const logEntryHash2 = await deriveHash(prelimEntry);\n        const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      \n      if (shouldVerifyEntry(i)) {\n        const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n        const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n        if (!verified) {\n          throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n        }\n\n        if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n          throw new Error(`Hash chain broken at '${meta.versionId}'`);\n        }\n\n        if (meta.prerotation) {\n          await newKeysAreInNextKeys(\n            parameters.updateKeys ?? [], \n            meta.nextKeyHashes ?? []\n          );\n        }\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    \n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Only add default services for entries we need to process\n    if (shouldVerifyEntry(i) || i === resolutionLog.length - 1) {\n      // Add default services if they don't exist\n      doc.service = doc.service || [];\n      const baseUrl = getBaseUrl(did);\n\n      if (!doc.service.some((s: any) => s.id === '#files')) {\n        doc.service.push({\n          id: '#files',\n          type: 'relativeRef',\n          serviceEndpoint: baseUrl\n        });\n      }\n\n      if (!doc.service.some((s: any) => s.id === '#whois')) {\n        doc.service.push({\n          \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n          id: '#whois',\n          type: 'LinkedVerifiablePresentation',\n          serviceEndpoint: `${baseUrl}/whois.vp`\n        });\n      }\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!resolvedDoc) {\n    resolvedDoc = lastValidDoc;\n    resolvedMeta = lastValidMeta;\n  }\n\n  if (!resolvedMeta) {\n    throw new Error('DID resolution failed: No valid metadata found');\n  }\n\n  return {\n    did,\n    doc: resolvedDoc,\n    meta: resolvedMeta\n  };\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    witness: (options.witness !== undefined && options.witness !== null) ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || 0\n    } : {},\n    watchers: watchersValue ?? []\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n  \n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const signedProof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: signedProof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n} ",
+    "import { createDate, createDIDDoc, createSCID, deriveHash, findVerificationMethod, getBaseUrl, replaceValueInObject, deepClone } from \"../utils\";\nimport {METHOD, PLACEHOLDER } from '../constants';\nimport { documentStateIsValid, hashChainValid, newKeysAreInNextKeys, scidIsFromHash } from '../assertions';\nimport type { CreateDIDInterface, DIDResolutionMeta, DIDLogEntry, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry, WitnessParameterResolution } from '../interfaces';\nimport { verifyWitnessProofs, validateWitnessParameter, fetchWitnessProofs } from '../witness';\n\nconst VERSION = '0.5';\nconst PROTOCOL = `did:${METHOD}:${VERSION}`;\n\nexport const createDID = async (options: CreateDIDInterface): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  if (!options.updateKeys) {\n    throw new Error('Update keys not supplied')\n  }\n  \n  if (options.witness && options.witness.witnesses && options.witness.witnesses.length > 0) {\n    validateWitnessParameter(options.witness);\n  }\n  \n  const encodedDomain = encodeURIComponent(options.domain);\n  const path = options.paths?.join(':');\n  const controller = `did:${METHOD}:${PLACEHOLDER}:${encodedDomain}${path ? `:${path}` : ''}`;\n  const createdDate = createDate(options.created);\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document\n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  let {doc} = await createDIDDoc({...options, controller, verificationMethods: safeVerificationMethods});\n  const params = {\n    scid: PLACEHOLDER,\n    updateKeys: options.updateKeys,\n    portable: options.portable ?? false,\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    watchers: options.watchers ?? null,\n    ...(options.witness ? {\n      witness: options.witness\n    } : {}),\n    deactivated: false\n  };\n  const initialLogEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: {\n      method: PROTOCOL,\n      ...params\n    },\n    state: doc\n  };\n  const initialLogEntryHash = await deriveHash(initialLogEntry);\n  params.scid = await createSCID(initialLogEntryHash);\n  initialLogEntry.state = doc;\n  const prelimEntry = JSON.parse(JSON.stringify(initialLogEntry).replaceAll(PLACEHOLDER, params.scid));\n  const logEntryHash2 = await deriveHash(prelimEntry);\n  prelimEntry.versionId = `1-${logEntryHash2}`;\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    {...prelimEntry, versionId: `1-${logEntryHash2}`, proof: prelimEntry.proof}, \n    params.updateKeys, \n    params.witness,\n    true,\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  let witness = {};\n  if (params.witness) {\n    witness = {...params.witness, threshold: params.witness.threshold?.toString() || '0'};\n  }\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta: {\n      versionId: prelimEntry.versionId,\n      created: prelimEntry.versionTime,\n      updated: prelimEntry.versionTime,\n      prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n      ...params,\n      witness: witness\n    },\n    log: [\n      prelimEntry\n    ]\n  }\n}\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}): Promise<{did: string, doc: any, meta: DIDResolutionMeta}> => {\n  if (options.verificationMethod && (options.versionNumber || options.versionId)) {\n    throw new Error(\"Cannot specify both verificationMethod and version number/id\");\n  }\n  const resolutionLog = log.map(l => deepClone(l));\n  const protocol = resolutionLog[0].parameters.method;\n  if(protocol !== PROTOCOL) {\n    throw new Error(`'${protocol}' protocol unknown.`);\n  }\n  let doc: any = {};\n  let did = '';\n  let meta: DIDResolutionMeta = {\n    versionId: '',\n    created: '',\n    updated: '',\n    previousLogEntryHash: '',\n    scid: '',\n    prerotation: false,\n    portable: false,\n    nextKeyHashes: [],\n    deactivated: false,\n    updateKeys: [],\n    witness: undefined,\n    watchers: null\n  };\n  let host = '';\n  let i = 0;\n\n  let resolvedDoc: any = null;\n  let resolvedMeta: DIDResolutionMeta | null = null;\n  let lastValidDoc: any = null;\n  let lastValidMeta: DIDResolutionMeta | null = null;\n\n  try {\n  while (i < resolutionLog.length) {\n    const { versionId, versionTime, parameters, state, proof } = resolutionLog[i];\n    const [version, entryHash] = versionId.split('-');\n    if (parseInt(version) !== i + 1) {\n      throw new Error(`version '${version}' in log doesn't match expected '${i + 1}'.`);\n    }\n    meta.versionId = versionId;\n    if (versionTime) {\n      // TODO check timestamps make sense\n    }\n    meta.updated = versionTime;\n    let newDoc = state;\n    if (version === '1') {\n      meta.created = versionTime;\n      newDoc = state;\n      host = newDoc.id.split(':').at(-1);\n      meta.scid = parameters.scid;\n      meta.portable = parameters.portable ?? meta.portable;\n      meta.updateKeys = parameters.updateKeys;\n      meta.nextKeyHashes = parameters.nextKeyHashes || [];\n      meta.prerotation = meta.nextKeyHashes.length > 0;\n      meta.witness = parameters.witness || meta.witness;\n      meta.watchers = parameters.watchers ?? null;\n      meta.nextKeyHashes = parameters.nextKeyHashes ?? [];\n      // Optimized: Use efficient object manipulation instead of JSON stringify/parse\n      const logEntry = {\n        versionId: PLACEHOLDER,\n        versionTime: meta.created,\n        parameters: replaceValueInObject(parameters, meta.scid, PLACEHOLDER),\n        state: replaceValueInObject(newDoc, meta.scid, PLACEHOLDER)\n      };\n      \n      const logEntryHash = await deriveHash(logEntry);\n      meta.previousLogEntryHash = logEntryHash;\n      if (!await scidIsFromHash(meta.scid, logEntryHash)) {\n        throw new Error(`SCID '${meta.scid}' not derived from logEntryHash '${logEntryHash}'`);\n      }\n      \n      // Optimized: Direct object manipulation instead of JSON stringify/parse\n      const prelimEntry = replaceValueInObject(logEntry, PLACEHOLDER, meta.scid);\n      const logEntryHash2 = await deriveHash(prelimEntry);\n      const verified = await documentStateIsValid({...prelimEntry, versionId: `1-${logEntryHash2}`, proof}, meta.updateKeys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n    } else {\n      // version number > 1\n      const newHost = newDoc.id.split(':').at(-1);\n      if (!meta.portable && newHost !== host) {\n        throw new Error(\"Cannot move DID: portability is disabled\");\n      } else if (newHost !== host) {\n        host = newHost;\n      }\n      const keys = meta.prerotation ? parameters.updateKeys : meta.updateKeys;\n      const verified = await documentStateIsValid(resolutionLog[i], keys, meta.witness, false, options.verifier);\n      if (!verified) {\n        throw new Error(`version ${meta.versionId} failed verification of the proof.`)\n      }\n\n      if (!hashChainValid(`${i+1}-${entryHash}`, versionId)) {\n        throw new Error(`Hash chain broken at '${meta.versionId}'`);\n      }\n\n      if (meta.prerotation) {\n        await newKeysAreInNextKeys(\n          parameters.updateKeys ?? [], \n          meta.nextKeyHashes ?? []\n        );\n      }\n\n      if (parameters.updateKeys) {\n        meta.updateKeys = parameters.updateKeys;\n      }\n      if (parameters.deactivated === true) {\n        meta.deactivated = true;\n      }\n      if (parameters.nextKeyHashes) {\n        meta.nextKeyHashes = parameters.nextKeyHashes;\n        meta.prerotation = true;\n      } else {\n        meta.nextKeyHashes = [];\n        meta.prerotation = false;\n      }\n      if ('witness' in parameters) {\n        meta.witness = parameters.witness;\n      } else if (parameters.witnesses) {\n        meta.witness = {\n          witnesses: parameters.witnesses,\n          threshold: parameters.witnessThreshold || parameters.witnesses.length.toString()\n        };\n      }\n      if ('watchers' in parameters) {\n        meta.watchers = parameters.watchers ?? null;\n      }\n    }\n    // Optimized: Use efficient cloning instead of clone() function\n    doc = deepClone(newDoc);\n    did = doc.id;\n\n    // Add default services if they don't exist\n    doc.service = doc.service || [];\n    const baseUrl = getBaseUrl(did);\n\n    if (!doc.service.some((s: any) => s.id === '#files')) {\n      doc.service.push({\n        id: '#files',\n        type: 'relativeRef',\n        serviceEndpoint: baseUrl\n      });\n    }\n\n    if (!doc.service.some((s: any) => s.id === '#whois')) {\n      doc.service.push({\n        \"@context\": \"https://identity.foundation/linked-vp/contexts/v1\",\n        id: '#whois',\n        type: 'LinkedVerifiablePresentation',\n        serviceEndpoint: `${baseUrl}/whois.vp`\n      });\n    }\n\n    if (options.verificationMethod && findVerificationMethod(doc, options.verificationMethod)) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n\n    if (options.versionNumber === parseInt(version) || options.versionId === meta.versionId) {\n      if (!resolvedDoc) {\n        resolvedDoc = deepClone(doc);\n        resolvedMeta = { ...meta };\n      }\n    }\n    if (options.versionTime && options.versionTime > new Date(meta.updated)) {\n      if (resolutionLog[i+1] && options.versionTime < new Date(resolutionLog[i+1].versionTime)) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      } else if(!resolutionLog[i+1]) {\n        if (!resolvedDoc) {\n          resolvedDoc = deepClone(doc);\n          resolvedMeta = { ...meta };\n        }\n      }\n    }\n\n    if (meta.witness && i === resolutionLog.length - 1) {\n      if (!options.witnessProofs) {\n        options.witnessProofs = await fetchWitnessProofs(did);\n      }\n\n      const validProofs = options.witnessProofs.filter((wp: WitnessProofFileEntry) => {\n        return wp.versionId === meta.versionId;\n      });\n\n      if (validProofs.length > 0) {\n        await verifyWitnessProofs(resolutionLog[i], validProofs, meta.witness!, options.verifier);\n      } else if (meta.witness && meta.witness.threshold && parseInt(meta.witness.threshold.toString()) > 0) {\n        throw new Error('No witness proofs found for version ' + meta.versionId);\n      }\n    }\n\n    lastValidDoc = deepClone(doc);\n    lastValidMeta = { ...meta };\n\n    i++;\n  }\n  } catch (e) {\n    if (!resolvedDoc) {\n      throw e;\n    }\n  }\n\n  if (!lastValidDoc || !lastValidMeta) {\n    throw new Error('DID log is invalid');\n  }\n\n  const finalDoc = resolvedDoc || lastValidDoc;\n  const finalMeta = resolvedMeta || lastValidMeta;\n  finalMeta.latestVersionId = lastValidMeta.versionId;\n  if (finalMeta.witness) {\n    finalMeta.witness.threshold = finalMeta.witness.threshold?.toString() || '0';\n  }\n\n  return {did: finalDoc.id, doc: finalDoc, meta: finalMeta};\n}\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier, witnessProofs: options.witnessProofs })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('Cannot update deactivated DID');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate(options.updated);\n  const watchersValue = options.watchers !== undefined ? options.watchers : lastMeta.watchers;\n  const params = {\n    updateKeys: options.updateKeys ?? [],\n    nextKeyHashes: options.nextKeyHashes ?? [],\n    ...(options.witness === null ? {\n      witness: {}\n    } : options.witness !== undefined ? {\n      witnesses: options.witness?.witnesses || [],\n      threshold: options.witness?.threshold || '0'\n    } : {}),\n    watchers: watchersValue ?? null\n  };\n  \n  // Safety guard: Strip secret keys from verification methods before creating DID document  \n  const safeVerificationMethods = options.verificationMethods?.map(vm => {\n    if (vm.secretKeyMultibase) {\n      console.warn('Warning: Removing secretKeyMultibase from verification method - secret keys should not be stored in DID documents');\n      const { secretKeyMultibase, ...safeVm } = vm;\n      return safeVm;\n    }\n    return vm;\n  });\n  \n  const { doc } = await createDIDDoc({\n    ...options,\n    controller: options.controller || lastEntry.state.id || '',\n    context: options.context || lastEntry.state['@context'],\n    domain: options.domain ?? lastEntry.state.id?.split(':').at(-1) ?? '',\n    updateKeys: options.updateKeys ?? [],\n    verificationMethods: safeVerificationMethods ?? []\n  });\n\n  // Add services if provided\n  if (options.services && options.services.length > 0) {\n    doc.service = options.services;\n  }\n  \n  // Add assertionMethod if provided\n  if (options.assertionMethod) {\n    doc.assertionMethod = options.assertionMethod;\n  }\n  \n  // Add keyAgreement if provided\n  if (options.keyAgreement) {\n    doc.keyAgreement = options.keyAgreement;\n  }\n\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: doc\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    prerotation: (params.nextKeyHashes?.length ?? 0) > 0,\n    ...params\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }): Promise<{did: string, doc: any, meta: DIDResolutionMeta, log: DIDLog}> => {\n  const log = options.log;\n  const lastEntry = log[log.length - 1];\n  const lastMeta = (await resolveDIDFromLog(log, { verifier: options.verifier })).meta;\n  if (lastMeta.deactivated) {\n    throw new Error('DID already deactivated');\n  }\n  const versionNumber = log.length + 1;\n  const createdDate = createDate();\n  const params = {\n    updateKeys: options.updateKeys ?? lastMeta.updateKeys,\n    deactivated: true\n  };\n  const logEntry: DIDLogEntry = {\n    versionId: PLACEHOLDER,\n    versionTime: createdDate,\n    parameters: params,\n    state: lastEntry.state\n  };\n  const logEntryHash = await deriveHash(logEntry);\n  const versionId = `${versionNumber}-${logEntryHash}`;\n  const prelimEntry = { ...logEntry, versionId };\n  const proof = await options.signer.sign({ document: prelimEntry, proof: { type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod' } });\n  let allProofs = [{ type: 'DataIntegrityProof', cryptosuite: 'eddsa-jcs-2022', verificationMethod: options.signer.getVerificationMethodId(), created: createdDate, proofPurpose: 'assertionMethod', proofValue: proof.proofValue }];\n  prelimEntry.proof = allProofs;\n\n  const verified = await documentStateIsValid(\n    prelimEntry, \n    lastMeta.updateKeys, \n    lastMeta.witness,\n    true, // skipWitnessVerification\n    options.verifier\n  );\n  if (!verified) {\n    throw new Error(`version ${prelimEntry.versionId} is invalid.`)\n  }\n\n  const meta: DIDResolutionMeta = {\n    ...lastMeta,\n    versionId: prelimEntry.versionId,\n    updated: prelimEntry.versionTime,\n    deactivated: true,\n    updateKeys: params.updateKeys\n  };\n\n  return {\n    did: prelimEntry.state.id!,\n    doc: prelimEntry.state,\n    meta,\n    log: [\n      ...log,\n      prelimEntry\n    ]\n  }\n}\n",
     "import { fetchLogFromIdentifier, getActiveDIDs, maybeWriteTestLog } from \"./utils\";\nimport type { CreateDIDInterface, DIDLog, UpdateDIDInterface, DeactivateDIDInterface, ResolutionOptions, WitnessProofFileEntry } from './interfaces';\nimport * as v1 from './method_versions/method.v1.0';\nimport * as v0_5 from './method_versions/method.v0.5';\n\nconst LATEST_VERSION = '1.0';\n\nfunction getWebvhVersionFromMethod(method?: string): string {\n  if (!method) return LATEST_VERSION;\n  const match = method.match(/^did:webvh:(\\d+\\.\\d+)$/);\n  return match ? match[1] : LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromLog(log: DIDLog): string {\n  if (log && log.length > 0 && log[0].parameters && log[0].parameters.method) {\n    return getWebvhVersionFromMethod(log[0].parameters.method);\n  }\n  return LATEST_VERSION;\n}\n\nfunction getWebvhVersionFromOptions(options: any): string {\n  if (options && options.method) {\n    return getWebvhVersionFromMethod(options.method);\n  }\n  return LATEST_VERSION;\n}\n\nexport const createDID = async (options: CreateDIDInterface) => {\n  const version = getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.createDID(options)\n    : await v1.createDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const resolveDID = async (did: string, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[], scid?: string } = {}) => {\n  const activeDIDs = await getActiveDIDs();\n  const controlled = activeDIDs.includes(did);\n  let scid: string | undefined = undefined;\n  const didParts = did.split(\":\");\n  if (didParts.length > 2 && didParts[0] === \"did\" && didParts[1] === \"webvh\") {\n    scid = didParts[2];\n  }\n  try {\n    const log = await fetchLogFromIdentifier(did, controlled);\n    const version = getWebvhVersionFromLog(log);\n    const optsWithScid = { ...options, scid };\n    if (version === '0.5') {\n      const result = await v0_5.resolveDIDFromLog(log, optsWithScid);\n      maybeWriteTestLog(result.did, log);\n      return { ...result, controlled };\n    }\n    const result = await v1.resolveDIDFromLog(log, optsWithScid);\n    maybeWriteTestLog(result.did, log);\n    return { ...result, controlled };\n  } catch (e: any) {\n    let errorType = 'INVALID_DID';\n    const message = e instanceof Error ? e.message : String(e);\n    if (/not found/i.test(message) || /404/.test(message)) {\n      errorType = 'notFound';\n    }\n    return {\n      did,\n      doc: null,\n      meta: {\n        error: errorType,\n        problemDetails: {\n          type: errorType === 'notFound'\n            ? 'https://w3id.org/security#NOT_FOUND'\n            : 'https://w3id.org/security#INVALID_CONTROLLED_IDENTIFIER_DOCUMENT_ID',\n          title: errorType === 'notFound'\n            ? 'The DID Log or resource was not found.'\n            : 'The resolved DID is invalid.',\n          detail: message\n        }\n      },\n      controlled\n    };\n  }\n};\n\nexport const resolveDIDFromLog = async (log: DIDLog, options: ResolutionOptions & { witnessProofs?: WitnessProofFileEntry[] } = {}) => {\n  const version = getWebvhVersionFromLog(log);\n  if (version === '0.5') {\n    const result = await v0_5.resolveDIDFromLog(log, options);\n    maybeWriteTestLog(result.did, log);\n    return result;\n  }\n  const result = await v1.resolveDIDFromLog(log, options);\n  maybeWriteTestLog(result.did, log);\n  return result;\n};\n\nexport const updateDID = async (options: UpdateDIDInterface & { services?: any[], domain?: string, updated?: string }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.updateDID(options)\n    : await v1.updateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n\nexport const deactivateDID = async (options: DeactivateDIDInterface & { updateKeys?: string[] }) => {\n  const version = options.log ? getWebvhVersionFromLog(options.log) : getWebvhVersionFromOptions(options);\n  const result = version === '0.5'\n    ? await v0_5.deactivateDID(options)\n    : await v1.deactivateDID(options);\n  maybeWriteTestLog(result.did, result.log);\n  return result;\n};\n",
     "import { createDate } from \"./utils\";\nimport { canonicalize } from 'json-canonicalize';\nimport { createHash } from './utils/crypto';\nimport type { VerificationMethod, SigningInput, SigningOutput, Signer, SignerOptions, Verifier } from './interfaces';\nimport { concatBuffers } from './utils/buffer';\n\n/**\n * Creates a proof object for a document\n * @param verificationMethodId - The verification method ID to use in the proof\n * @returns A proof object with type, cryptosuite, verificationMethod, created, and proofPurpose\n */\nexport const createProof = (verificationMethodId: string): any => {\n  return {\n    type: 'DataIntegrityProof',\n    cryptosuite: 'eddsa-jcs-2022',\n    verificationMethod: verificationMethodId,\n    created: createDate(),\n    proofPurpose: 'assertionMethod'\n  };\n};\n\n/**\n * Prepares data for signing by hashing and concatenating the document and proof\n * @param document - The document to sign\n * @param proof - The proof object\n * @returns The prepared data for signing as a Uint8Array\n */\nexport const prepareDataForSigning = async (document: any, proof: any): Promise<Uint8Array> => {\n  const dataHash = await createHash(canonicalize(document));\n  const proofHash = await createHash(canonicalize(proof));\n  return concatBuffers(proofHash, dataHash);\n};\n\n/**\n * Abstract base class for signers\n * Users should extend this class to implement their own signing logic\n */\nexport abstract class AbstractCrypto implements Signer, Verifier {\n  protected verificationMethod?: VerificationMethod | null;\n  protected useStaticId: boolean;\n\n  constructor(options: SignerOptions) {\n    if (options.verificationMethod) {\n      this.verificationMethod = options.verificationMethod;\n    }\n    this.useStaticId = options.useStaticId !== undefined ? options.useStaticId : true;\n  }\n\n  /**\n   * Sign the input data\n   * @param input - The signing input containing the document and proof\n   * @returns The signing output containing the proof value\n   */\n  abstract sign(input: SigningInput): Promise<SigningOutput>;\n\n  /**\n   * Verify a signature\n   * @param signature - The signature to verify\n   * @param message - The message to verify\n   * @param publicKey - The public key to verify the signature with\n   */\n  abstract verify(signature: Uint8Array, message: Uint8Array, publicKey: Uint8Array): Promise<boolean>;\n\n  /**\n   * Get the verification method ID\n   * @returns The verification method ID\n   */\n  getVerificationMethodId(): string {\n    if (!this.verificationMethod) {\n      throw new Error('Verification method not set');\n    }\n    return this.useStaticId \n      ? `did:key:${this.verificationMethod.publicKeyMultibase}#${this.verificationMethod.publicKeyMultibase}`\n      : this.verificationMethod.id || '';\n  }\n}\n\n/**\n * Creates a document signer from any Signer implementation\n * @param signer - The signer to use\n * @param verificationMethodId - The verification method ID to use in proofs\n * @returns A function that signs a document and returns the document with proof\n */\nexport const createDocumentSigner = (signer: Signer, verificationMethodId: string) => {\n  return async (doc: any) => {\n    try {\n      const proof = createProof(verificationMethodId);\n      const result = await signer.sign({ document: doc, proof });\n      \n      proof.proofValue = result.proofValue;\n      return { ...doc, proof };\n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n\n/**\n * @deprecated Use createDocumentSigner with your own Signer implementation instead\n */\nexport const createSigner = (vm: VerificationMethod, useStatic: boolean = true) => {\n  console.warn('createSigner is deprecated. Use createDocumentSigner with your own Signer implementation instead.');\n  \n  return async (doc: any) => {\n    try {\n      const verificationMethodId = useStatic \n        ? `did:key:${vm.publicKeyMultibase}#${vm.publicKeyMultibase}` \n        : vm.id || '';\n      \n      const proof = createProof(verificationMethodId);\n      \n      // This is a placeholder for backward compatibility\n      // Users should implement their own signing logic\n      throw new Error('createSigner is deprecated. Implement your own Signer and use createDocumentSigner instead.');\n      \n    } catch (e: any) {\n      console.error(e);\n      throw new Error(`Document signing failure: ${e.message || e}`);\n    }\n  };\n};\n"
   ],
-  "mappings": "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",
-  "debugId": "0999BF4F81E60E0464756E2164756E21",
+  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA,WAAU,CAAC,QAAQ,SAAS;AACxB,WAAO,YAAY,mBAAmB,WAAW,cAAc,QAAQ,OAAO,WACvE,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,SAAS,GAAG,OAAO,KACvE,gBAAgB,eAAe,cAAc,aAAa,UAAU,MAAM,QAAQ,OAAO,mBAAmB,CAAC,CAAC;AAAA,KACjH,iBAAgB,CAAC,UAAS;AAExB,aAAS,YAAY,CAAC,KAAK;AACvB,UAAI,SAAS;AACb,gBAAU,GAAG;AACb,aAAO;AACP,eAAS,SAAS,CAAC,QAAQ;AACvB,YAAI,WAAW,eACJ,WAAW,YAClB,OAAO,UAAU,MAAM;AAIvB,oBAAU,KAAK,UAAU,MAAM;AAAA,QAGnC,WACS,MAAM,QAAQ,MAAM,GAAG;AAI5B,oBAAU;AACV,cAAI,SAAS;AACb,iBAAO,gBAAiB,CAAC,SAAS;AAC9B,gBAAI,QAAQ;AACR,wBAAU;AAAA,YACd;AACA,qBAAS;AACT,gBAAI,YAAY,WAAW;AACvB,wBAAU;AAAA,YACd;AAIA,sBAAU,OAAO;AAAA,WACpB;AACD,oBAAU;AAAA,QACd,OACK;AAID,oBAAU;AACV,cAAI,QAAQ,OAAO,KAAK,MAAM,EAAE,eAAgB,CAAC,GAAG;AAAE,mBAAO,OAAO,OAAO;AAAA,WAAY,EAAE,KAAK;AAC9F,gBAAM,gBAAiB,CAAC,UAAU,OAAO;AAAE,mBAAO,QAAQ,QAAQ,UAAU,KAAK;AAAA,WAAI;AACrF,oBAAU;AAAA;AAAA;AAGlB,eAAS,OAAO,CAAC,QAAQ,UAAU,OAAO;AACtC,YAAI,QAAQ,GAAG;AACX,oBAAU;AAAA,QACd;AAIA,kBAAU,KAAK,UAAU,QAAQ;AACjC,kBAAU;AAIV,kBAAU,OAAO,SAAS;AAAA;AAAA;AAIlC,aAAS,cAAc,CAAC,KAAK,SAAS;AAClC,UAAI,SAAS;AACb,UAAI,WAAW,WAAW,QAAQ;AAClC,UAAI,WAAW,WAAW,QAAQ;AAClC,UAAI,UAAU;AACV,mBAAW,aAAa;AACpB,qBAAW,CAAC,QAAQ;AAAA,MAC5B;AACA,UAAI;AACA,iBAAS,KAAK;AAClB,gBAAU,GAAG;AACb,aAAO;AACP,eAAS,SAAS,CAAC,QAAQ,QAAQ;AAC/B,YAAI,WAAW,eACJ,WAAW,YAClB,OAAO,UAAU,MAAM;AAIvB,oBAAU,KAAK,UAAU,MAAM;AAAA,QAGnC,WACS,MAAM,QAAQ,MAAM,GAAG;AAI5B,oBAAU;AACV,cAAI,SAAS;AACb,iBAAO,gBAAiB,CAAC,SAAS;AAC9B,gBAAI,QAAQ;AACR,wBAAU;AAAA,YACd;AACA,qBAAS;AAIT,sBAAU,SAAS,MAAM;AAAA,WAC5B;AACD,oBAAU;AAAA,QACd,OACK;AAID,oBAAU;AACV,eAAK,UAAU,UAAU;AACrB,qBAAS,gBAAiB,CAAC,UAAU,OAAO;AACxC,mBAAK,OAAO,eAAe,QAAQ;AAC/B;AACJ,sBAAQ,QAAQ,UAAU,KAAK;AAAA,aAClC;AAAA,UACL,OACK;AACD,gBAAI,QAAQ,OAAO,KAAK,MAAM,EAAE,KAAK;AACrC,kBAAM,gBAAiB,CAAC,UAAU,OAAO;AAAE,qBAAO,QAAQ,QAAQ,UAAU,KAAK;AAAA,aAAI;AAAA;AAEzF,oBAAU;AAAA;AAAA;AAGlB,eAAS,OAAO,CAAC,QAAQ,UAAU,OAAO;AACtC,YAAI,YAAY,SAAS,QAAQ;AAC7B,mBAAS,KAAK,GAAG,aAAa,SAAU,KAAK,WAAW,QAAQ,MAAM;AAClE,gBAAI,IAAI,WAAW;AACnB,gBAAI,MAAM;AACN;AAAA,UACR;AAAA,QACJ;AACA,YAAI,QAAQ,GAAG;AACX,oBAAU;AAAA,QACd;AAIA,kBAAU,KAAK,UAAU,QAAQ;AACjC,kBAAU;AAIV,kBAAU,OAAO,WAAW,MAAM;AAAA;AAAA;AAI1C,aAAQ,eAAe;AACvB,aAAQ,iBAAiB;AAEzB,WAAO,eAAe,UAAS,cAAc,EAAE,OAAO,KAAK,CAAC;AAAA,GAE9D;AAAA;;;AC5JF;;;ACGA,IAAM,aAAa,CAAC,UAA8B;AAChD,SAAO,MAAM,KAAK,KAAK,EACpB,IAAI,OAAK,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC,EACxC,KAAK,EAAE;AAAA;AAgBL,IAAM,eAAe,CAAC,OAAe,aAA0C;AACpF,OAAK,OAAO,WAAW;AACrB,WAAO,OAAO,KAAK,OAAO,QAAQ;AAAA,EACpC;AAGA,MAAI,aAAa,UAAU;AACzB,UAAM,eAAe,KAAK,KAAK;AAC/B,WAAO,IAAI,WAAW,aAAa,MAAM,EAAE,IAAI,CAAC,GAAG,MAAM,aAAa,WAAW,CAAC,CAAC;AAAA,EACrF;AAGA,SAAO,IAAI,YAAY,EAAE,OAAO,KAAK;AAAA;AAGhC,IAAM,iBAAiB,CAAC,QAAoB,aAAsC;AACvF,OAAK,OAAO,WAAW;AACrB,WAAO,OAAO,KAAK,MAAM,EAAE,SAAS,QAAQ;AAAA,EAC9C;AAGA,MAAI,aAAa,OAAO;AACtB,WAAO,WAAW,MAAM;AAAA,EAC1B;AAGA,MAAI,aAAa,UAAU;AACzB,UAAM,SAAS,OAAO,aAAa,GAAG,MAAM;AAC5C,WAAO,KAAK,MAAM;AAAA,EACpB;AAGA,SAAO,IAAI,YAAY,EAAE,OAAO,MAAM;AAAA;AAGjC,IAAM,gBAAgB,IAAI,YAAsC;AACrE,OAAK,OAAO,WAAW;AACrB,WAAO,OAAO,OAAO,OAAO;AAAA,EAC9B;AAGA,QAAM,cAAc,QAAQ,OAAO,CAAC,KAAK,QAAQ,MAAM,IAAI,QAAQ,CAAC;AAGpE,QAAM,SAAS,IAAI,WAAW,WAAW;AACzC,MAAI,SAAS;AACb,aAAW,UAAU,SAAS;AAC5B,WAAO,IAAI,QAAQ,MAAM;AACzB,cAAU,OAAO;AAAA,EACnB;AAEA,SAAO;AAAA;;;ACtET,IAAM,mBAAmB,WAAW;AAEpC,IAAM,cAAc,CAAC,QAAoC;AACvD,MAAI;AAAW;AACf,MAAI;AACF,WAAO,SAAS,MAAM;AAAA,UACtB;AACA;AAAA;AAAA;AAIG,IAAM,SAAS;AAAA,EAEpB;AAAA,EACA;AAAA,EAGA,mBAAmB,YAAY,UAAU,MAAM;AAAA,EAG/C,aAAa,YAAY,cAAc,MAAM;AAAA,EAG7C,wBAAwB,MAAM;AAC5B,UAAM,UAAU,YAAY,0BAA0B;AACtD,SAAK;AAAS,aAAO,CAAC;AACtB,QAAI;AACF,YAAM,UAAU,aAAa,SAAS,QAAQ;AAC9C,aAAO,KAAK,MAAM,eAAe,OAAO,CAAC;AAAA,YACzC;AACA,aAAO,CAAC;AAAA;AAAA;AAGd;;;ACpCO,IAAM,cAAc;AACpB,IAAM,SAAS;AACf,IAAM,eAAe;AAAA,EAC1B;AAAA,EACA;AACF;;;ACOO,IAAK;AAAL,EAAK,uBAAL;AACL,2CAAmB;AACnB,qCAAa;AAAA,GAFH;AAQZ,IAAM,iBAAiB;AAAA,GACpB,6BAAqC;AAAA,GACrC,uBAA+B;AAClC;AAOO,SAAS,eAAe,CAAC,OAA2B;AAEzD,QAAM,SAAS,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ;AAEnD,SAAO,OAAO,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAAA;AAQzE,SAAS,eAAe,CAAC,KAAyB;AAEhD,QAAM,UAAU,IAAI,SAAS,MAAM,IAAI,IAAI,IAAK,IAAI,SAAS;AAC7D,QAAM,SAAS,IAAI,QAAQ,MAAM,GAAG,EAAE,QAAQ,MAAM,GAAG,IAAI,IAAI,OAAO,OAAO;AAG7E,QAAM,SAAS,KAAK,MAAM;AAC1B,QAAM,QAAQ,IAAI,WAAW,OAAO,MAAM;AAC1C,WAAS,IAAI,EAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,KAAK,OAAO,WAAW,CAAC;AAAA,EAChC;AACA,SAAO;AAAA;AAQF,SAAS,eAAe,CAAC,OAA2B;AACzD,QAAM,WAAW,eAAe;AAGhC,MAAI,QAAQ;AACZ,WAAS,IAAI,EAAG,IAAI,MAAM,UAAU,MAAM,OAAO,GAAG,KAAK;AACvD;AAAA,EACF;AAGA,MAAI,MAAM;AACV,WAAS,IAAI,EAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,MAAM,OAAO,OAAO,MAAM,EAAE;AAAA,EACpC;AAGA,MAAI,SAAS;AACb,SAAO,MAAM,IAAI;AACf,UAAM,YAAY,OAAO,MAAM,GAAG;AAClC,UAAM,MAAM;AACZ,aAAS,SAAS,aAAa;AAAA,EACjC;AAGA,SAAO,IAAI,OAAO,KAAK,IAAI;AAAA;AAQtB,SAAS,eAAe,CAAC,KAAyB;AACvD,QAAM,WAAW,eAAe;AAGhC,MAAI,QAAQ;AACZ,WAAS,IAAI,EAAG,IAAI,IAAI,UAAU,IAAI,OAAO,KAAK,KAAK;AACrD;AAAA,EACF;AAGA,MAAI,MAAM;AACV,WAAS,IAAI,MAAO,IAAI,IAAI,QAAQ,KAAK;AACvC,UAAM,OAAO,IAAI;AACjB,UAAM,QAAQ,SAAS,QAAQ,IAAI;AACnC,QAAI,UAAU,IAAI;AAChB,YAAM,IAAI,MAAM,6BAA6B,MAAM;AAAA,IACrD;AACA,UAAM,MAAM,MAAM,OAAO,KAAK;AAAA,EAChC;AAGA,QAAM,QAAkB,CAAC;AACzB,SAAO,MAAM,IAAI;AACf,UAAM,QAAQ,OAAO,MAAM,IAAI,CAAC;AAChC,UAAM,MAAM;AAAA,EACd;AAGA,SAAO,IAAI,WAAW,CAAC,GAAG,IAAI,MAAM,KAAK,EAAE,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC;AAAA;AASxD,SAAS,eAAe,CAAC,OAAmB,WAA8B,4BAA4C;AAC3H,MAAI;AAEJ,UAAQ;AAAA,SACD;AACH,gBAAU,gBAAgB,KAAK;AAC/B;AAAA,SACG;AACH,gBAAU,gBAAgB,KAAK;AAC/B;AAAA;AAEA,YAAM,IAAI,MAAM,mCAAmC,UAAU;AAAA;AAGjE,SAAO,GAAG,WAAW;AAAA;AAQhB,SAAS,eAAe,CAAC,KAAiE;AAC/F,OAAK,OAAO,IAAI,SAAS,GAAG;AAC1B,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACvD;AACA,QAAM,SAAS,IAAI;AACnB,QAAM,UAAU,IAAI,MAAM,CAAC;AAE3B,MAAI;AAEJ,UAAQ;AAAA,SACD;AACH,cAAQ,gBAAgB,OAAO;AAC/B;AAAA,SACG;AACH,cAAQ,gBAAgB,OAAO;AAC/B;AAAA;AAEA,YAAM,IAAI,MAAM,0CAA0C,QAAQ;AAAA;AAGtE,SAAO,EAAE,OAAO,UAAU,OAAO;AAAA;AAkB5B,IAAM,iBAAiB;AAAA,GAC3B,oBAA8B;AAAA,GAC9B,oBAA8B;AAAA,GAC9B,oBAA8B;AAAA,GAC9B,oBAA8B;AACjC;AAOA,SAAS,YAAY,CAAC,OAA2B;AAC/C,QAAM,QAAkB,CAAC;AAEzB,SAAO,SAAS,KAAM;AACpB,UAAM,KAAM,QAAQ,MAAQ,GAAI;AAChC,eAAW;AAAA,EACb;AAEA,QAAM,KAAK,QAAQ,GAAI;AAEvB,SAAO,IAAI,WAAW,KAAK;AAAA;AAmCtB,SAAS,eAAe,CAAC,QAAoB,WAA2C;AAC7F,QAAM,iBAAiB,eAAe;AACtC,MAAI,OAAO,WAAW,gBAAgB;AACpC,UAAM,IAAI,MAAM,uCAAuC,UAAU,SAAS,EAAE,eAAe,uBAAuB,OAAO,QAAQ;AAAA,EACnI;AAEA,QAAM,iBAAiB,aAAa,SAAS;AAC7C,QAAM,cAAc,aAAa,OAAO,MAAM;AAE9C,QAAM,SAAS,IAAI,WAAW,eAAe,SAAS,YAAY,SAAS,OAAO,MAAM;AACxF,SAAO,IAAI,gBAAgB,CAAC;AAC5B,SAAO,IAAI,aAAa,eAAe,MAAM;AAC7C,SAAO,IAAI,QAAQ,eAAe,SAAS,YAAY,MAAM;AAE7D,SAAO;AAAA;;;AC1PT;AAEO,SAAS,OAAO,CAAC,GAAG;AACvB,SAAO,aAAa,cAAe,YAAY,OAAO,CAAC,KAAK,EAAE,YAAY,SAAS;AAAA;AAQhF,SAAS,MAAM,CAAC,MAAM,SAAS;AAClC,OAAK,QAAQ,CAAC;AACV,UAAM,IAAI,MAAM,qBAAqB;AACzC,MAAI,QAAQ,SAAS,MAAM,QAAQ,SAAS,EAAE,MAAM;AAChD,UAAM,IAAI,MAAM,mCAAmC,UAAU,kBAAkB,EAAE,MAAM;AAAA;AAUxF,SAAS,OAAO,CAAC,UAAU,gBAAgB,MAAM;AACpD,MAAI,SAAS;AACT,UAAM,IAAI,MAAM,kCAAkC;AACtD,MAAI,iBAAiB,SAAS;AAC1B,UAAM,IAAI,MAAM,uCAAuC;AAAA;AAGxD,SAAS,OAAO,CAAC,KAAK,UAAU;AACnC,SAAO,GAAG;AACV,QAAM,MAAM,SAAS;AACrB,MAAI,IAAI,SAAS,KAAK;AAClB,UAAM,IAAI,MAAM,2DAA2D,GAAG;AAAA,EAClF;AAAA;AAWG,SAAS,KAAK,IAAI,QAAQ;AAC7B,WAAS,IAAI,EAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,WAAO,GAAG,KAAK,CAAC;AAAA,EACpB;AAAA;AAGG,SAAS,UAAU,CAAC,KAAK;AAC5B,SAAO,IAAI,SAAS,IAAI,QAAQ,IAAI,YAAY,IAAI,UAAU;AAAA;AAG3D,SAAS,IAAI,CAAC,MAAM,OAAO;AAC9B,SAAQ,QAAS,KAAK,QAAW,SAAS;AAAA;AAiHvC,SAAS,WAAW,CAAC,KAAK;AAC7B,aAAW,QAAQ;AACf,UAAM,IAAI,MAAM,iBAAiB;AACrC,SAAO,IAAI,WAAW,IAAI,YAAY,EAAE,OAAO,GAAG,CAAC;AAAA;AAchD,SAAS,OAAO,CAAC,MAAM;AAC1B,aAAW,SAAS;AAChB,WAAO,YAAY,IAAI;AAC3B,SAAO,IAAI;AACX,SAAO;AAAA;AAmCJ,MAAM,KAAK;AAClB;AAEO,SAAS,YAAY,CAAC,UAAU;AACnC,QAAM,QAAQ,CAAC,QAAQ,SAAS,EAAE,OAAO,QAAQ,GAAG,CAAC,EAAE,OAAO;AAC9D,QAAM,MAAM,SAAS;AACrB,QAAM,YAAY,IAAI;AACtB,QAAM,WAAW,IAAI;AACrB,QAAM,SAAS,MAAM,SAAS;AAC9B,SAAO;AAAA;;;AClPJ,SAAS,YAAY,CAAC,MAAM,YAAY,OAAO,MAAM;AACxD,aAAW,KAAK,iBAAiB;AAC7B,WAAO,KAAK,aAAa,YAAY,OAAO,IAAI;AACpD,QAAM,OAAO,OAAO,EAAE;AACtB,QAAM,WAAW,OAAO,UAAU;AAClC,QAAM,KAAK,OAAQ,SAAS,OAAQ,QAAQ;AAC5C,QAAM,KAAK,OAAO,QAAQ,QAAQ;AAClC,QAAM,IAAI,OAAO,IAAI;AACrB,QAAM,IAAI,OAAO,IAAI;AACrB,OAAK,UAAU,aAAa,GAAG,IAAI,IAAI;AACvC,OAAK,UAAU,aAAa,GAAG,IAAI,IAAI;AAAA;AAGpC,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG;AACzB,SAAQ,IAAI,KAAO,IAAI;AAAA;AAGpB,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG;AACzB,SAAQ,IAAI,IAAM,IAAI,IAAM,IAAI;AAAA;AAM7B;AAAA,MAAM,eAAe,KAAK;AAAA,EAC7B,WAAW,CAAC,UAAU,WAAW,WAAW,MAAM;AAC9C,UAAM;AACN,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,YAAY;AACjB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,OAAO;AACZ,SAAK,SAAS,IAAI,WAAW,QAAQ;AACrC,SAAK,OAAO,WAAW,KAAK,MAAM;AAAA;AAAA,EAEtC,MAAM,CAAC,MAAM;AACT,YAAQ,IAAI;AACZ,WAAO,QAAQ,IAAI;AACnB,WAAO,IAAI;AACX,YAAQ,MAAM,QAAQ,aAAa;AACnC,UAAM,MAAM,KAAK;AACjB,aAAS,MAAM,EAAG,MAAM,OAAM;AAC1B,YAAM,OAAO,KAAK,IAAI,WAAW,KAAK,KAAK,MAAM,GAAG;AAEpD,UAAI,SAAS,UAAU;AACnB,cAAM,WAAW,WAAW,IAAI;AAChC,cAAO,YAAY,MAAM,KAAK,OAAO;AACjC,eAAK,QAAQ,UAAU,GAAG;AAC9B;AAAA,MACJ;AACA,aAAO,IAAI,KAAK,SAAS,KAAK,MAAM,IAAI,GAAG,KAAK,GAAG;AACnD,WAAK,OAAO;AACZ,aAAO;AACP,UAAI,KAAK,QAAQ,UAAU;AACvB,aAAK,QAAQ,MAAM,CAAC;AACpB,aAAK,MAAM;AAAA,MACf;AAAA,IACJ;AACA,SAAK,UAAU,KAAK;AACpB,SAAK,WAAW;AAChB,WAAO;AAAA;AAAA,EAEX,UAAU,CAAC,KAAK;AACZ,YAAQ,IAAI;AACZ,YAAQ,KAAK,IAAI;AACjB,SAAK,WAAW;AAIhB,YAAQ,QAAQ,MAAM,UAAU,SAAS;AACzC,UAAM,QAAQ;AAEd,WAAO,SAAS;AAChB,UAAM,KAAK,OAAO,SAAS,GAAG,CAAC;AAG/B,QAAI,KAAK,YAAY,WAAW,KAAK;AACjC,WAAK,QAAQ,MAAM,CAAC;AACpB,YAAM;AAAA,IACV;AAEA,aAAS,IAAI,IAAK,IAAI,UAAU;AAC5B,aAAO,KAAK;AAIhB,iBAAa,MAAM,WAAW,GAAG,OAAO,KAAK,SAAS,CAAC,GAAG,IAAI;AAC9D,SAAK,QAAQ,MAAM,CAAC;AACpB,UAAM,QAAQ,WAAW,GAAG;AAC5B,UAAM,MAAM,KAAK;AAEjB,QAAI,MAAM;AACN,YAAM,IAAI,MAAM,6CAA6C;AACjE,UAAM,SAAS,MAAM;AACrB,UAAM,QAAQ,KAAK,IAAI;AACvB,QAAI,SAAS,MAAM;AACf,YAAM,IAAI,MAAM,oCAAoC;AACxD,aAAS,IAAI,EAAG,IAAI,QAAQ;AACxB,YAAM,UAAU,IAAI,GAAG,MAAM,IAAI,IAAI;AAAA;AAAA,EAE7C,MAAM,GAAG;AACL,YAAQ,QAAQ,cAAc;AAC9B,SAAK,WAAW,MAAM;AACtB,UAAM,MAAM,OAAO,MAAM,GAAG,SAAS;AACrC,SAAK,QAAQ;AACb,WAAO;AAAA;AAAA,EAEX,UAAU,CAAC,IAAI;AACX,WAAO,KAAK,IAAI,KAAK;AACrB,OAAG,IAAI,GAAG,KAAK,IAAI,CAAC;AACpB,YAAQ,UAAU,QAAQ,QAAQ,UAAU,WAAW,QAAQ;AAC/D,OAAG,YAAY;AACf,OAAG,WAAW;AACd,OAAG,SAAS;AACZ,OAAG,MAAM;AACT,QAAI,SAAS;AACT,SAAG,OAAO,IAAI,MAAM;AACxB,WAAO;AAAA;AAAA,EAEX,KAAK,GAAG;AACJ,WAAO,KAAK,WAAW;AAAA;AAE/B;AAMO,IAAM,4BAA4B,YAAY,KAAK;AAAA,EACtD;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AACxF,CAAC;;;AC5HD,IAAM,2BAA2B,YAAY,KAAK;AAAA,EAC9C;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpF;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AACxF,CAAC;AAED,IAAM,2BAA2B,IAAI,YAAY,EAAE;AAC5C;AAAA,MAAM,eAAe,OAAO;AAAA,EAC/B,WAAW,CAAC,YAAY,IAAI;AACxB,UAAM,IAAI,WAAW,GAAG,KAAK;AAG7B,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AACxB,SAAK,IAAI,UAAU,KAAK;AAAA;AAAA,EAE5B,GAAG,GAAG;AACF,YAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM;AACnC,WAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA;AAAA,EAGlC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACxB,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AACb,SAAK,IAAI,IAAI;AAAA;AAAA,EAEjB,OAAO,CAAC,MAAM,QAAQ;AAElB,aAAS,IAAI,EAAG,IAAI,IAAI,KAAK,UAAU;AACnC,eAAS,KAAK,KAAK,UAAU,QAAQ,KAAK;AAC9C,aAAS,IAAI,GAAI,IAAI,IAAI,KAAK;AAC1B,YAAM,MAAM,SAAS,IAAI;AACzB,YAAM,KAAK,SAAS,IAAI;AACxB,YAAM,KAAK,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,IAAK,QAAQ;AACnD,YAAM,KAAK,KAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE,IAAK,OAAO;AACjD,eAAS,KAAM,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,IAAI,MAAO;AAAA,IACnE;AAEA,UAAM,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM;AACjC,aAAS,IAAI,EAAG,IAAI,IAAI,KAAK;AACzB,YAAM,SAAS,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE;AACpD,YAAM,KAAM,IAAI,SAAS,IAAI,GAAG,GAAG,CAAC,IAAI,SAAS,KAAK,SAAS,KAAM;AACrE,YAAM,SAAS,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,EAAE;AACpD,YAAM,KAAM,SAAS,IAAI,GAAG,GAAG,CAAC,IAAK;AACrC,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAK,IAAI,KAAM;AACf,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAK,KAAK,KAAM;AAAA,IACpB;AAEA,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,QAAK,IAAI,KAAK,IAAK;AACnB,SAAK,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA;AAAA,EAEnC,UAAU,GAAG;AACT,UAAM,QAAQ;AAAA;AAAA,EAElB,OAAO,GAAG;AACN,SAAK,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/B,UAAM,KAAK,MAAM;AAAA;AAEzB;AAgQO,IAAM,yBAAyB,aAAa,MAAM,IAAI,MAAQ;;;AC3VrE,eAAsB,UAAU,CAAC,MAAmC;AAClE,SAAO,OAAO,IAAI;AAAA;;;ARDpB,IAAM,2BAA2B,YAAY,sBACjC,WAAW,kBACf,QAAQ,YAAa,QAAQ,SAAiB,QAAS,QAAQ,SAAiB;AAGxF,IAAM,oBAAoB,CAAC,QAAQ,IAAI,EAAE,KAAK,GAAG;AAGjD,IAAI,WAAuB;AAC3B,IAAI,kBAAuC;AAE3C,IAAM,QAAQ,YAA0B;AACtC,OAAK,mBAAmB;AACtB,UAAM,IAAI,MAAM,0GAA0G;AAAA,EAC5H;AAEA,MAAI,UAAU;AACZ,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB;AACnB,WAAO;AAAA,EACT;AAEA,qBAAmB,YAAY;AAE7B,UAAM,eAAgB,WAAmB;AACzC,eAAW,iBAAiB,YAAY;AACtC,UAAI;AACF,cAAM,SAAS,aAAa,iBAAiB;AAC7C,mBAAW;AACX,eAAO;AAAA,cACP;AAAA;AACF,UAAI;AACF,cAAM,SAAS,aAAa,IAAI;AAChC,mBAAW;AACX,eAAO;AAAA,cACP;AAAA;AAAA,IACJ;AAEA,QAAI;AACF,YAAM,SAAS,MAAa;AAC5B,iBAAW;AACX,aAAO;AAAA,YACP;AAAA;AACF,QAAI;AACF,YAAM,SAAS,MAAa;AAC5B,iBAAW;AACX,aAAO;AAAA,YACP;AAAA;AACF,UAAM,IAAI,MAAM,4EAA4E;AAAA,KAC3F;AAEH,SAAO;AAAA;AAGT,IAAM,UAAU,CAAC,WAA2B;AAC1C,MAAI;AACF,UAAM,SAAS,OAAO,SAAS,WAAW,IAAI,SAAS;AACvD,WAAO,IAAI,IAAI,GAAG,YAAY,QAAQ,EAAE;AAAA,UACxC;AACA,WAAO;AAAA;AAAA;AAaJ,IAAM,iBAAiB,OAAO,MAAc,QAAgB;AACjE,QAAM,KAAK,MAAM,MAAM;AACvB,MAAI;AACF,UAAM,MAAM,KAAK,UAAU,GAAG,KAAK,YAAY,GAAG,CAAC;AACnD,QAAI,QAAQ,GAAG,WAAW,GAAG,GAAG;AAC9B,SAAG,UAAU,KAAK,EAAE,WAAW,KAAK,CAAC;AAAA,IACvC;AAEA,OAAG,cAAc,MAAM,KAAK,UAAU,IAAI,EAAE,IAAI;AAAA,CAAI;AAEpD,aAAS,IAAI,EAAG,IAAI,IAAI,QAAQ,KAAK;AACnC,SAAG,eAAe,MAAM,KAAK,UAAU,IAAI,EAAE,IAAI;AAAA,CAAI;AAAA,IACvD;AAAA,WACO,OAAP;AACA,YAAQ,MAAM,8BAA8B,KAAK;AACjD,UAAM;AAAA;AAAA;AAIH,IAAM,oBAAoB,OAAO,KAAa,QAAgB;AACnE,OAAK,OAAO;AAAmB;AAC/B,MAAI;AACF,UAAM,WAAW,IAAI,QAAQ,kBAAkB,GAAG;AAClD,UAAM,OAAO,eAAe;AAC5B,UAAM,eAAe,MAAM,GAAG;AAAA,WACvB,OAAP;AACA,YAAQ,MAAM,2BAA2B,KAAK;AAAA;AAAA;AAiE3C,SAAS,SAAS,CAAC,KAAe;AACvC,MAAI,QAAQ,eAAe,QAAQ;AAAU,WAAO;AACpD,MAAI,eAAe;AAAM,WAAO,IAAI,KAAK,IAAI,QAAQ,CAAC;AACtD,MAAI,MAAM,QAAQ,GAAG;AAAG,WAAO,IAAI,IAAI,UAAQ,UAAU,IAAI,CAAC;AAE9D,QAAM,SAAc,CAAC;AACrB,cAAY,KAAK,UAAU,OAAO,QAAQ,GAAG,GAAG;AAC9C,WAAO,OAAO,UAAU,KAAK;AAAA,EAC/B;AACA,SAAO;AAAA;AAGF,IAAM,aAAa,CAAC,OAAe;AACxC,QAAM,QAAQ,GAAG,MAAM,GAAG;AAC1B,OAAK,GAAG,WAAW,YAAY,KAAK,MAAM,SAAS,GAAG;AACpD,UAAM,IAAI,MAAM,GAAG,wCAAwC;AAAA,EAC7D;AAEA,MAAI,YAAY,mBAAmB,MAAM,MAAM,CAAC,EAAE,KAAK,GAAG,CAAC;AAC3D,QAAM,WAAW,UAAU,SAAS,WAAW,IAAI,SAAS;AAE5D,SAAO,aAAa,aAAa,UAAU,MAAM,GAAG;AACpD,OAAK,MAAM,QAAQ,mBAAmB,QAAQ,EAAE,MAAM,GAAG;AAEzD,SAAO,KACJ,MAAM,GAAG,EACT,IAAI,WAAS,QAAQ,MAAM,UAAU,KAAK,CAAC,CAAC,EAC5C,KAAK,GAAG;AAEX,QAAM,iBAAiB,OAAO,GAAG,QAAQ,SAAS;AAClD,QAAM,OAAO,UAAU,KAAK,GAAG;AAE/B,SAAO,GAAG,cAAc,iBAAiB,OAAO,MAAM,OAAO;AAAA;AAGxD,IAAM,aAAa,CAAC,OAAe;AACxC,QAAM,UAAU,WAAW,EAAE;AAC7B,QAAM,iBAAiB,QAAQ,QAAQ,KAAK,QAAQ,QAAQ,KAAK,IAAI,CAAC;AAEtE,MAAI,mBAAmB,IAAI;AACzB,WAAO,GAAG;AAAA,EACZ;AACA,SAAO,GAAG;AAAA;AAGZ,eAAsB,sBAAsB,CAAC,YAAoB,aAAsB,OAAwB;AAC7G,MAAI;AACF,QAAI,YAAY;AACd,YAAM,WAAW,WAAW,MAAM,GAAG;AACrC,YAAM,iBAAiB,SAAS,MAAM,CAAC,EAAE,KAAK,GAAG;AACjD,YAAM,UAAU,gBAAgB,kBAAkB;AAElD,UAAI;AACF,YAAI;AACJ,mBAAW,QAAQ,eAAe,IAAI,MAAM;AAC1C,mBAAQ,MAAM,IAAI,KAAK,OAAO,EAAE,KAAK,GAAG,KAAK;AAAA,QAC/C,WAAW,mBAAmB;AAC5B,gBAAM,KAAK,MAAM,MAAM;AACvB,kBAAO,GAAG,aAAa,SAAS,MAAM,EAAE,KAAK;AAAA,QAC/C,OAAO;AACL,gBAAM,IAAI,MAAM,uDAAuD;AAAA;AAEzE,aAAK,OAAM;AACT,iBAAO,CAAC;AAAA,QACV;AACA,eAAO,MAAK,MAAM;AAAA,CAAI,EAAE,IAAI,UAAQ,KAAK,MAAM,IAAI,CAAC;AAAA,eAC7C,OAAP;AACA,cAAM,IAAI,MAAM,gCAAgC,OAAO;AAAA;AAAA,IAE3D;AAEA,UAAM,MAAM,WAAW,UAAU;AACjC,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,SAAK,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,uBAAuB,SAAS,QAAQ;AAAA,IAC1D;AAEA,UAAM,QAAQ,MAAM,SAAS,KAAK,GAAG,KAAK;AAC1C,SAAK,MAAM;AACT,YAAM,IAAI,MAAM,yBAAyB,YAAY;AAAA,IACvD;AACA,WAAO,KAAK,MAAM;AAAA,CAAI,EAAE,IAAI,UAAQ,KAAK,MAAM,IAAI,CAAC;AAAA,WAC7C,OAAP;AACA,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,UAAM;AAAA;AAAA;AAIH,IAAM,aAAa,CAAC,YAA4B,IAAI,KAAK,WAAW,KAAK,IAAI,CAAC,EAAE,YAAY,EAAE,MAAM,GAAE,EAAE,IAAE;AAM1G,IAAM,aAAa,OAAO,iBAA0C;AACzE,SAAO;AAAA;AAIT,IAAM,YAAY,IAAI;AAEtB,SAAS,aAAa,CAAC,OAAgC;AACrD,MAAI;AACF,UAAM,MAAM,KAAK,UAAU,KAAK;AAChC,WAAO,UAAU,IAAI,GAAG;AAAA,UACxB;AACA;AAAA;AAAA;AAIJ,SAAS,aAAa,CAAC,OAAY,MAAoB;AACrD,MAAI;AACF,UAAM,MAAM,KAAK,UAAU,KAAK;AAChC,cAAU,IAAI,KAAK,IAAI;AAAA,UACvB;AAAA;AAAA;AAKJ,eAAsB,UAAU,CAAC,OAA6B;AAC5D,QAAM,SAAS,cAAc,KAAK;AAClC,MAAI,QAAQ;AACV,WAAO;AAAA,EACT;AAEA,QAAM,OAAO,sCAAa,KAAK;AAC/B,QAAM,OAAO,MAAM,WAAW,IAAI;AAClC,QAAM,YAAY,gBAAgB,IAAI,WAAW,IAAI,oBAA8B;AACnF,QAAM,SAAS,gBAAgB,SAAS;AACxC,gBAAc,OAAO,MAAM;AAC3B,SAAO;AAAA;AAGF,IAAM,oBAAoB,OAAO,UAAmC;AACzE,QAAM,OAAO,MAAM,WAAW,KAAK;AACnC,QAAM,YAAY,gBAAgB,IAAI,WAAW,IAAI,oBAA8B;AACnF,SAAO,gBAAgB,SAAS;AAAA;AAG3B,IAAM,eAAe,OAAO,YAAwD;AACzF,UAAO,eAAc;AACrB,QAAM,MAAM,aAAa,QAAQ,qBAAqB,UAAU;AAGhE,QAAM,MAAc;AAAA,IAClB,YAAY,QAAQ,WAAW;AAAA,IAC/B,IAAI;AAAA,IACJ;AAAA,EACF;AAGA,MAAI,cAAc,QAAQ,UAAU;AAClC,QAAI,IAAI,oBAAoB;AAC1B,UAAI,qBAAqB,IAAI;AAAA,IAC/B;AAEA,QAAI,IAAI,gBAAgB;AACtB,UAAI,iBAAiB,IAAI;AAAA,IAC3B;AAEA,QAAI,IAAI,iBAAiB;AACvB,UAAI,kBAAkB,IAAI;AAAA,IAC5B;AAEA,QAAI,IAAI,cAAc;AACpB,UAAI,eAAe,IAAI;AAAA,IACzB;AAEA,QAAI,IAAI,sBAAsB;AAC5B,UAAI,uBAAuB,IAAI;AAAA,IACjC;AAEA,QAAI,IAAI,sBAAsB;AAC5B,UAAI,uBAAuB,IAAI;AAAA,IACjC;AAAA,EACF;AAGA,MAAI,QAAQ,gBAAgB;AAC1B,QAAI,iBAAiB,QAAQ;AAAA,EAC/B;AAEA,MAAI,QAAQ,iBAAiB;AAC3B,QAAI,kBAAkB,QAAQ;AAAA,EAChC;AAEA,MAAI,QAAQ,cAAc;AACxB,QAAI,eAAe,QAAQ;AAAA,EAC7B;AAEA,MAAI,QAAQ,aAAa;AACvB,QAAI,cAAc,QAAQ;AAAA,EAC5B;AAEA,SAAO,EAAC,IAAG;AAAA;AAIN,IAAM,mBAAmB,CAAC,SAAiB,MAAc;AAC9D,QAAM,aAAa;AACnB,MAAI,SAAS;AACb,QAAM,mBAAmB,WAAW;AACpC,WAAS,IAAI,EAAG,IAAI,QAAQ,KAAK;AAC/B,cAAU,WAAW,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,gBAAgB,CAAC;AAAA,EAC1E;AACA,SAAO;AAAA;AAGF,IAAM,aAAa,CAAC,IAAwB,QAAuB;AACxE,SAAO,GAAG,OAAO,MAAM,GAAG,oBAAoB,MAAM,EAAE,KAAK,iBAAiB,CAAC;AAAA;AAGxE,IAAM,eAAe,CAAC,oBAAsD,MAAqB,SAAS;AAC/G,QAAM,MAAW;AAAA,IACf,oBAAoB,CAAC;AAAA,IACrB,gBAAgB,CAAC;AAAA,IACjB,iBAAiB,CAAC;AAAA,IAClB,cAAc,CAAC;AAAA,IACf,sBAAsB,CAAC;AAAA,IACvB,sBAAsB,CAAC;AAAA,EACzB;AAEA,OAAK,sBAAsB,mBAAmB,WAAW,GAAG;AAC1D,WAAO;AAAA,EACT;AAGA,QAAM,MAAM,mBAAmB,IAAI,SAAO;AAAA,OACrC;AAAA,IACH,IAAI,GAAG,MAAM,WAAW,IAAI,GAAG;AAAA,EACjC,EAAE;AACF,MAAI,qBAAqB;AAGzB,MAAI,iBAAiB,mBAClB,OAAO,SAAO,GAAG,WAAW,GAAG,YAAY,gBAAgB,EAC3D,IAAI,QAAM,GAAG,MAAM,WAAW,IAAI,GAAG,CAAC;AAEzC,MAAI,kBAAkB,mBACnB,OAAO,QAAM,GAAG,YAAY,iBAAiB,EAC7C,IAAI,QAAM,GAAG,MAAK,WAAW,IAAI,GAAG,CAAC;AAExC,MAAI,eAAe,mBAChB,OAAO,QAAM,GAAG,YAAY,cAAc,EAC1C,IAAI,QAAM,GAAG,MAAK,WAAW,IAAI,GAAG,CAAC;AAExC,MAAI,uBAAuB,mBACxB,OAAO,QAAM,GAAG,YAAY,sBAAsB,EAClD,IAAI,QAAM,GAAG,MAAK,WAAW,IAAI,GAAG,CAAC;AAExC,MAAI,uBAAuB,mBACxB,OAAO,QAAM,GAAG,YAAY,sBAAsB,EAClD,IAAI,QAAM,GAAG,MAAM,WAAW,IAAI,GAAG,CAAC;AAEzC,SAAO;AAAA;AAGF,IAAM,YAAY,OAAO,OAAe;AAC7C,MAAI;AACF,QAAI,GAAG,WAAW,UAAU,GAAG;AAC7B,aAAO,EAAC,oBAAoB,GAAG,MAAM,UAAU,EAAE,GAAG,MAAM,GAAG,EAAE,GAAE;AAAA,IACnE,WACS,GAAG,WAAW,YAAY,GAAG;AACpC,YAAM,MAAM,WAAW,GAAG,MAAM,GAAG,EAAE,EAAE;AACvC,YAAM,SAAS,OAAO,MAAM,MAAM,GAAG,GAAG,KAAK;AAC7C,YAAM,aAAqB,OAAO,KAAK,EAAE,MAAM;AAAA,CAAI,EAAE,IAAI,OAAK,KAAK,MAAM,CAAC,CAAC;AAC3E,cAAO,QAAO,MAAM,kBAAkB,YAAY,EAAC,oBAAoB,GAAE,CAAC;AAC1E,aAAO,uBAAuB,KAAK,EAAE;AAAA,IACvC;AACA,UAAM,IAAI,MAAM,uBAAuB,cAAc;AAAA,WAC9C,GAAP;AACA,UAAM,IAAI,MAAM,sBAAsB,IAAI;AAAA;AAAA;AAIvC,IAAM,yBAAyB,CAAC,KAAU,SAA4C;AAE3F,MAAI,IAAI,sBAAsB,IAAI,mBAAmB,KAAK,CAAC,OAAY,GAAG,OAAO,IAAI,GAAG;AACtF,WAAO,IAAI,mBAAmB,KAAK,CAAC,OAAY,GAAG,OAAO,IAAI;AAAA,EAChE;AAGA,QAAM,kBAAkB,CAAC,kBAAkB,mBAAmB,gBAAgB,wBAAwB,sBAAsB;AAC5H,aAAW,gBAAgB,iBAAiB;AAC1C,QAAI,IAAI,eAAe;AACrB,UAAI,IAAI,cAAc,KAAK,CAAC,SAAc,KAAK,OAAO,IAAI,GAAG;AAC3D,eAAO,IAAI,cAAc,KAAK,CAAC,SAAc,KAAK,OAAO,IAAI;AAAA,MAC/D;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA;AAGT,eAAsB,aAAa,GAAsB;AACvD,QAAM,aAAuB,CAAC;AAE9B,MAAI;AACF,eAAW,MAAM,OAAO,uBAAuB,GAAG;AAChD,YAAM,MAAM,GAAG,cAAc,GAAG,GAAG,MAAM,GAAG,EAAE;AAC9C,iBAAW,KAAK,GAAG;AAAA,IACrB;AAAA,WACO,OAAP;AACA,YAAQ,MAAM,0CAA0C,KAAK;AAAA;AAG/D,SAAO;AAAA;AAGT,eAAsB,kBAAkB,CAAC,KAA+C;AACtF,MAAI;AACF,UAAM,MAAM,WAAW,GAAG,EAAE,QAAQ,aAAa,kBAAkB;AAEnE,UAAM,WAAW,MAAM,MAAM,GAAG;AAChC,SAAK,SAAS,IAAI;AAChB,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,MAAM,SAAS,KAAK;AAAA,WACpB,OAAP;AACA,YAAQ,MAAM,kCAAkC,KAAK;AACrD,WAAO,CAAC;AAAA;AAAA;AAIL,SAAS,oBAAoB,CAAC,KAAU,aAAqB,cAA2B;AAC7F,aAAW,QAAQ,UAAU;AAC3B,WAAO,IAAI,WAAW,aAAa,YAAY;AAAA,EACjD;AACA,MAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,WAAO,IAAI,IAAI,UAAQ,qBAAqB,MAAM,aAAa,YAAY,CAAC;AAAA,EAC9E;AACA,MAAI,cAAc,QAAQ,UAAU;AAClC,UAAM,SAAc,CAAC;AACrB,gBAAY,KAAK,UAAU,OAAO,QAAQ,GAAG,GAAG;AAC9C,aAAO,OAAO,qBAAqB,OAAO,aAAa,YAAY;AAAA,IACrE;AACA,WAAO;AAAA,EACT;AACA,SAAO;AAAA;;;ASjgBT;;;ACDA;AA2BO,SAAS,wBAAwB,CAAC,SAA2C;AAClF,OAAK,QAAQ,cAAc,MAAM,QAAQ,QAAQ,SAAS,KAAK,QAAQ,UAAU,WAAW,GAAG;AAC7F,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AAEA,OAAK,QAAQ,aAAa,SAAS,QAAQ,UAAU,SAAS,CAAC,IAAI,KAAK,SAAS,QAAQ,UAAU,SAAS,CAAC,IAAI,QAAQ,UAAU,QAAQ;AACzI,UAAM,IAAI,MAAM,iEAAiE;AAAA,EACnF;AAEA,QAAM,MAAM,IAAI;AAChB,aAAW,KAAK,QAAQ,WAAW;AACjC,SAAK,EAAE,GAAG,WAAW,UAAU,GAAG;AAChC,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AACA,QAAI,IAAI,IAAI,EAAE,EAAE,GAAG;AACjB,YAAM,IAAI,MAAM,yBAAyB,EAAE,IAAI;AAAA,IACjD;AACA,QAAI,IAAI,EAAE,EAAE;AAAA,EACd;AAAA;AAmBF,eAAsB,mBAAmB,CACvC,UACA,eACA,gBACA,UACe;AACf,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACvD;AAEA,MAAI,YAAY;AAChB,QAAM,qBAAqB,IAAI;AAG/B,aAAW,YAAY,eAAe;AAEpC,eAAW,SAAS,SAAS,OAAO;AAClC,UAAI,MAAM,gBAAgB,kBAAkB;AAC1C,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACrD;AAEA,YAAM,UAAU,eAAe,WAAW,KAAK,OAAK,MAAM,mBAAmB,WAAW,EAAE,EAAE,CAAC;AAC7F,WAAK,SAAS;AACZ,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACnD;AAEA,UAAI,mBAAmB,IAAI,QAAQ,EAAE,GAAG;AACtC;AAAA,MACF;AAEA,UAAI;AAEF,cAAM,KAAK,MAAM,UAAU,MAAM,kBAAkB;AACnD,aAAK,IAAI;AACP,gBAAM,IAAI,MAAM,uBAAuB,MAAM,8BAA8B;AAAA,QAC7E;AAGA,YAAI;AACJ,YAAI;AACF,sBAAY,gBAAgB,GAAG,kBAAkB,EAAE;AAAA,iBAC5C,OAAP;AACA,gBAAM,IAAI,MAAM,gCAAgC,MAAM,SAAS;AAAA;AAGjE,YAAI,UAAU,WAAW,IAAI;AAC3B,gBAAM,IAAI,MAAM,6BAA6B,UAAU,6BAA6B;AAAA,QACtF;AAGA,gBAAQ,eAAe,sBAAsB;AAG7C,cAAM,oBAAoB,uCAAa,EAAC,WAAW,SAAS,UAAS,CAAC;AACtE,cAAM,qBAAqB,uCAAa,iBAAiB;AAEzD,cAAM,WAAW,MAAM,WAAW,iBAAiB;AACnD,cAAM,YAAY,MAAM,WAAW,kBAAkB;AAGrD,cAAM,QAAQ,cAAc,WAAW,QAAQ;AAG/C,YAAI;AACJ,YAAI;AACF,sBAAY,gBAAgB,UAAU,EAAE;AAAA,iBACjC,OAAP;AACA,gBAAM,IAAI,MAAM,+BAA+B,MAAM,SAAS;AAAA;AAIhE,cAAM,WAAW,MAAM,SAAS,OAC9B,WACA,OACA,UAAU,MAAM,CAAC,CACnB;AAEA,aAAK,UAAU;AACb,gBAAM,IAAI,MAAM,iCAAiC;AAAA,QACnD;AAEA;AACA,2BAAmB,IAAI,QAAQ,EAAE;AAAA,eAE1B,OAAP;AACA,cAAM,IAAI,MAAM,0BAA0B,MAAM,SAAS;AAAA;AAAA,IAE7D;AAAA,EACF;AAEA,MAAI,YAAY,SAAS,eAAe,WAAW,SAAS,KAAK,GAAG,GAAG;AACrE,UAAM,IAAI,MAAM,kCAAkC,mBAAmB,eAAe,WAAW;AAAA,EACjG;AAAA;;;ADnJF,IAAM,kBAAkB,CAAC,oBAA4B,eAAkC;AACrF,MAAI,OAAO,YAAY,oCAAoC,MAAM;AAAQ,WAAO;AAEhF,MAAI,mBAAmB,WAAW,UAAU,GAAG;AAC7C,UAAM,WAAW,mBAAmB,MAAM,UAAU,EAAE,GAAG,MAAM,GAAG;AAClE,UAAM,MAAM,SAAS;AAErB,UAAM,aAAa,WAAW,KAAK,eAAa;AAC9C,UAAI,gBAAgB;AACpB,UAAI,UAAU,WAAW,UAAU,GAAG;AACpC,wBAAgB,UAAU,MAAM,UAAU,EAAE,GAAG,MAAM,GAAG,EAAE;AAAA,MAC5D;AAEA,aAAO,kBAAkB;AAAA,KAC1B;AAED,WAAO;AAAA,EACT;AACA,SAAO;AAAA;AAGT,IAAM,sBAAsB,CAAC,oBAA4B,cAAiC;AACxF,MAAI,OAAO,YAAY,8BAA8B,MAAM;AAAQ,WAAO;AAE1E,MAAI,mBAAmB,WAAW,YAAY,GAAG;AAC/C,UAAM,qBAAqB,mBAAmB,MAAM,GAAG,EAAE;AACzD,WAAO,UAAU,SAAS,kBAAkB;AAAA,EAC9C;AACA,SAAO;AAAA;AAGF,IAAM,uBAAuB,OAClC,KACA,YACA,SACA,yBACA,aACG;AACH,MAAI,OAAO,YAAY,0CAA0C,MAAM,QAAQ;AAC7E,WAAO;AAAA,EACT;AAEA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,qCAAqC;AAAA,EACvD;AAEA,QAAK,OAAO,WAAW,SAAQ;AAC/B,OAAK,MAAM,QAAQ,MAAM,GAAG;AAC1B,aAAS,CAAC,MAAM;AAAA,EAClB;AAEA,MAAI,WAAW,QAAQ,aAAa,QAAQ,UAAU,SAAS,GAAG;AAChE,SAAK,yBAAyB;AAC5B,+BAAyB,OAAO;AAAA,IAClC;AAAA,EACF;AAEA,WAAS,IAAI,EAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,QAAQ,OAAO;AAErB,QAAI,MAAM,mBAAmB,WAAW,UAAU,GAAG;AACnD,WAAK,gBAAgB,MAAM,oBAAoB,UAAU,GAAG;AAC1D,cAAM,IAAI,MAAM,OAAO,MAAM,iDAAiD;AAAA,MAChF;AAAA,IACF,WAAW,MAAM,mBAAmB,WAAW,YAAY,GAAG;AAC5D,UAAI,WAAW,QAAQ,aAAa,QAAQ,UAAU,SAAS,MAAM,oBAAoB,MAAM,oBAAoB,QAAQ,UAAU,IAAI,CAAC,MAAoB,EAAE,EAAE,CAAC,GAAG;AACpK,cAAM,IAAI,MAAM,OAAO,MAAM,uDAAuD;AAAA,MACtF;AAAA,IACF,OAAO;AACL,YAAM,IAAI,MAAM,oCAAoC,MAAM,oBAAoB;AAAA;AAGhF,QAAI,MAAM,SAAS,sBAAsB;AACvC,YAAM,IAAI,MAAM,sBAAsB,MAAM,MAAM;AAAA,IACpD;AACA,QAAI,MAAM,iBAAiB,oBAAoB,MAAM,iBAAiB,mBAAmB;AACvF,YAAM,IAAI,MAAM,yBAAyB,MAAM,cAAc;AAAA,IAC/D;AACA,QAAI,MAAM,gBAAgB,kBAAkB;AAC1C,YAAM,IAAI,MAAM,uBAAuB,MAAM,aAAa;AAAA,IAC5D;AAEA,UAAM,KAAK,MAAM,UAAU,MAAM,kBAAkB;AACnD,SAAK,IAAI;AACP,YAAM,IAAI,MAAM,uBAAuB,MAAM,8BAA8B;AAAA,IAC7E;AAEA,UAAM,YAAY,gBAAgB,GAAG,kBAAkB,EAAE;AACzD,QAAI,UAAU,OAAO,OAAQ,UAAU,OAAO,GAAM;AAClD,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,YAAO,eAAe,cAAa;AACnC,UAAM,YAAY,gBAAgB,UAAU,EAAE;AAC9C,UAAM,WAAW,MAAM,WAAW,uCAAa,IAAI,CAAC;AACpD,UAAM,YAAY,MAAM,WAAW,uCAAa,SAAS,CAAC;AAC1D,UAAM,QAAQ,cAAc,WAAW,QAAQ;AAE/C,UAAM,WAAW,MAAM,SAAS,OAC9B,WACA,OACA,UAAU,MAAM,CAAC,CACnB;AAEA,SAAK,UAAU;AACb,YAAM,IAAI,MAAM,SAAS,sCAAsC,aAAa;AAAA,IAC9E;AAAA,EACF;AACA,SAAO;AAAA;AAGF,IAAM,iBAAiB,CAAC,aAAqB,iBAAyB;AAC3E,MAAI,OAAO,YAAY,sCAAsC,MAAM;AAAQ,WAAO;AAClF,SAAO,gBAAgB;AAAA;AAGlB,IAAM,uBAAuB,OAAO,YAAsB,0BAAoC;AACnG,MAAI,OAAO,YAAY,qCAAqC,MAAM;AAAQ,WAAO;AAEjF,MAAI,sBAAsB,SAAS,GAAG;AACpC,eAAW,OAAO,YAAY;AAC5B,YAAM,UAAU,MAAM,kBAAkB,GAAG;AAC3C,WAAK,sBAAsB,SAAS,OAAO,GAAG;AAC5C,cAAM,IAAI,MAAM,sBAAsB,uCAAuC,uBAAuB;AAAA,MACtG;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA;AAGF,IAAM,iBAAiB,OAAO,MAAc,SAAiB;AAClE,MAAI,OAAO,YAAY,oCAAoC,MAAM;AAAQ,WAAO;AAChF,SAAO,SAAS,MAAM,WAAW,IAAI;AAAA;;;AExIvC,IAAM,UAAU;AAChB,IAAM,WAAW,OAAO,UAAU;AAE3B,IAAM,YAAY,OAAO,YAAwG;AACtI,OAAK,QAAQ,YAAY;AACvB,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAEA,MAAI,QAAQ,WAAW,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,UAAU,SAAS,GAAG;AACxF,6BAAyB,QAAQ,OAAO;AAAA,EAC1C;AACA,QAAM,gBAAgB,mBAAmB,QAAQ,MAAM;AACvD,QAAM,OAAO,QAAQ,OAAO,KAAK,GAAG;AACpC,QAAM,aAAa,OAAO,UAAU,eAAe,gBAAgB,OAAO,IAAI,SAAS;AACvF,QAAM,cAAc,WAAW,QAAQ,OAAO;AAG9C,QAAM,0BAA0B,QAAQ,qBAAqB,IAAI,QAAM;AACrE,QAAI,GAAG,oBAAoB;AACzB,cAAQ,KAAK,mHAAmH;AAChI,cAAQ,uBAAuB,WAAW;AAC1C,aAAO;AAAA,IACT;AACA,WAAO;AAAA,GACR;AAED,QAAK,QAAO,MAAM,aAAa,KAAI,SAAS,YAAY,qBAAqB,wBAAuB,CAAC;AACrG,QAAM,SAAS;AAAA,IACb,MAAM;AAAA,IACN,YAAY,QAAQ;AAAA,IACpB,UAAU,QAAQ,YAAY;AAAA,IAC9B,eAAe,QAAQ,iBAAiB,CAAC;AAAA,IACzC,UAAU,QAAQ,YAAY,CAAC;AAAA,IAC/B,SAAS,QAAQ,WAAW,CAAC;AAAA,IAC7B,aAAa;AAAA,EACf;AACA,QAAM,kBAA+B;AAAA,IACnC,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,MACV,QAAQ;AAAA,SACL;AAAA,IACL;AAAA,IACA,OAAO;AAAA,EACT;AACA,QAAM,sBAAsB,MAAM,WAAW,eAAe;AAC5D,SAAO,OAAO,MAAM,WAAW,mBAAmB;AAClD,kBAAgB,QAAQ;AACxB,QAAM,cAAc,KAAK,MAAM,KAAK,UAAU,eAAe,EAAE,WAAW,aAAa,OAAO,IAAI,CAAC;AACnG,QAAM,gBAAgB,MAAM,WAAW,WAAW;AAClD,cAAY,YAAY,KAAK;AAC7B,QAAM,cAAc,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAClQ,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,YAAY,WAAW,CAAC;AACvO,cAAY,QAAQ;AAEpB,QAAM,WAAW,MAAM,qBACrB,KAAK,aAAa,WAAW,KAAK,gBAAgB,GAClD,OAAO,YACP,OAAO,SACP,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB,MAAM;AAAA,MACJ,WAAW,YAAY;AAAA,MACvB,SAAS,YAAY;AAAA,MACrB,SAAS,YAAY;AAAA,MACrB,cAAc,OAAO,eAAe,UAAU,KAAK;AAAA,SAChD;AAAA,IACL;AAAA,IACA,KAAK;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAGK,IAAM,qBAAoB,OAAO,KAAa,UAAkG,CAAC,MAAiE;AACvN,MAAI,QAAQ,uBAAuB,QAAQ,iBAAiB,QAAQ,YAAY;AAC9E,UAAM,IAAI,MAAM,8DAA8D;AAAA,EAChF;AACA,QAAM,gBAAgB,IAAI,IAAI,OAAK,UAAU,CAAC,CAAC;AAC/C,MAAI,MAAM;AACV,MAAI,MAAW;AACf,MAAI,cAAmB;AACvB,MAAI,eAAoB;AACxB,MAAI,OAA0B;AAAA,IAC5B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,IACT,aAAa;AAAA,IACb,UAAU;AAAA,IACV,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe,CAAC;AAAA,IAChB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACZ;AACA,MAAI,eAAyC;AAC7C,MAAI,gBAA0C;AAC9C,MAAI,IAAI;AACR,MAAI,OAAO;AAGX,QAAM,cAAc,QAAQ,eAAe;AAC3C,QAAM,eAAe,CAAC,QAAgB,QAAQ;AAC9C,QAAM,mBAAmB,CAAC,QAAgB,OAAO,cAAc,SAAS;AACxE,QAAM,oBAAoB,CAAC,SAAiB,eAAe,aAAa,GAAG,KAAK,iBAAiB,GAAG;AAEpG,MAAI;AACJ,WAAO,IAAI,cAAc,QAAQ;AAC/B,cAAQ,WAAW,aAAa,YAAY,OAAO,UAAU,cAAc;AAC3E,aAAO,SAAS,aAAa,UAAU,MAAM,GAAG;AAChD,UAAI,SAAS,OAAO,MAAM,IAAI,GAAG;AAC/B,cAAM,IAAI,MAAM,YAAY,2CAA2C,IAAI,KAAK;AAAA,MAClF;AACA,WAAK,YAAY;AACjB,UAAI,aAAa;AAAA,MAEjB;AACA,WAAK,UAAU;AACf,UAAI,SAAS;AAEb,UAAI,YAAY,KAAK;AACnB,aAAK,UAAU;AACf,iBAAS;AACT,eAAO,OAAO,GAAG,MAAM,GAAG,EAAE,GAAG,EAAE;AACjC,aAAK,OAAO,WAAW;AACvB,aAAK,WAAW,WAAW,YAAY,KAAK;AAC5C,aAAK,aAAa,WAAW;AAC7B,aAAK,gBAAgB,WAAW,iBAAiB,CAAC;AAClD,aAAK,cAAc,KAAK,cAAc,SAAS;AAC/C,aAAK,UAAU,WAAW,WAAW,KAAK;AAC1C,aAAK,WAAW,WAAW,YAAY;AAEvC,YAAI,kBAAkB,CAAC,GAAG;AAExB,gBAAM,WAAW;AAAA,YACf,WAAW;AAAA,YACX,aAAa,KAAK;AAAA,YAClB,YAAY,qBAAqB,YAAY,KAAK,MAAM,WAAW;AAAA,YACnE,OAAO,qBAAqB,QAAQ,KAAK,MAAM,WAAW;AAAA,UAC5D;AAEA,gBAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,eAAK,uBAAuB;AAC5B,eAAK,MAAM,eAAe,KAAK,MAAM,YAAY,GAAG;AAClD,kBAAM,IAAI,MAAM,SAAS,KAAK,wCAAwC,eAAe;AAAA,UACvF;AAGA,gBAAM,cAAc,qBAAqB,UAAU,aAAa,KAAK,IAAI;AAEzE,gBAAM,gBAAgB,MAAM,WAAW,WAAW;AAClD,gBAAM,WAAW,MAAM,qBAAqB,KAAI,aAAa,WAAW,KAAK,iBAAiB,MAAK,GAAG,KAAK,YAAY,KAAK,SAAS,OAAO,QAAQ,QAAQ;AAC5J,eAAK,UAAU;AACb,kBAAM,IAAI,MAAM,WAAW,KAAK,6CAA6C;AAAA,UAC/E;AAAA,QACF;AAAA,MACF,OAAO;AAEL,cAAM,UAAU,OAAO,GAAG,MAAM,GAAG,EAAE,GAAG,EAAE;AAC1C,aAAK,KAAK,YAAY,YAAY,MAAM;AACtC,gBAAM,IAAI,MAAM,0CAA0C;AAAA,QAC5D,WAAW,YAAY,MAAM;AAC3B,iBAAO;AAAA,QACT;AAEA,YAAI,kBAAkB,CAAC,GAAG;AACxB,gBAAM,OAAO,KAAK,cAAc,WAAW,aAAa,KAAK;AAC7D,gBAAM,WAAW,MAAM,qBAAqB,cAAc,IAAI,MAAM,KAAK,SAAS,OAAO,QAAQ,QAAQ;AACzG,eAAK,UAAU;AACb,kBAAM,IAAI,MAAM,WAAW,KAAK,6CAA6C;AAAA,UAC/E;AAEA,eAAK,eAAe,GAAG,IAAE,KAAK,aAAa,SAAS,GAAG;AACrD,kBAAM,IAAI,MAAM,yBAAyB,KAAK,YAAY;AAAA,UAC5D;AAEA,cAAI,KAAK,aAAa;AACpB,kBAAM,qBACJ,WAAW,cAAc,CAAC,GAC1B,KAAK,iBAAiB,CAAC,CACzB;AAAA,UACF;AAAA,QACF;AAEA,YAAI,WAAW,YAAY;AACzB,eAAK,aAAa,WAAW;AAAA,QAC/B;AACA,YAAI,WAAW,gBAAgB,MAAM;AACnC,eAAK,cAAc;AAAA,QACrB;AACA,YAAI,WAAW,eAAe;AAC5B,eAAK,gBAAgB,WAAW;AAChC,eAAK,cAAc;AAAA,QACrB,OAAO;AACL,eAAK,gBAAgB,CAAC;AACtB,eAAK,cAAc;AAAA;AAErB,YAAI,aAAa,YAAY;AAC3B,eAAK,UAAU,WAAW;AAAA,QAC5B,WAAW,WAAW,WAAW;AAC/B,eAAK,UAAU;AAAA,YACb,WAAW,WAAW;AAAA,YACtB,WAAW,WAAW,oBAAoB,WAAW,UAAU;AAAA,UACjE;AAAA,QACF;AACA,YAAI,cAAc,YAAY;AAC5B,eAAK,WAAW,WAAW,YAAY;AAAA,QACzC;AAAA;AAIF,YAAM,UAAU,MAAM;AACtB,YAAM,IAAI;AAGV,UAAI,kBAAkB,CAAC,KAAK,MAAM,cAAc,SAAS,GAAG;AAE1D,YAAI,UAAU,IAAI,WAAW,CAAC;AAC9B,cAAM,UAAU,WAAW,GAAG;AAE9B,aAAK,IAAI,QAAQ,KAAK,CAAC,MAAW,EAAE,OAAO,QAAQ,GAAG;AACpD,cAAI,QAAQ,KAAK;AAAA,YACf,IAAI;AAAA,YACJ,MAAM;AAAA,YACN,iBAAiB;AAAA,UACnB,CAAC;AAAA,QACH;AAEA,aAAK,IAAI,QAAQ,KAAK,CAAC,MAAW,EAAE,OAAO,QAAQ,GAAG;AACpD,cAAI,QAAQ,KAAK;AAAA,YACf,YAAY;AAAA,YACZ,IAAI;AAAA,YACJ,MAAM;AAAA,YACN,iBAAiB,GAAG;AAAA,UACtB,CAAC;AAAA,QACH;AAAA,MACF;AAEA,UAAI,QAAQ,sBAAsB,uBAAuB,KAAK,QAAQ,kBAAkB,GAAG;AACzF,aAAK,aAAa;AAChB,wBAAc,UAAU,GAAG;AAC3B,yBAAe,KAAK,KAAK;AAAA,QAC3B;AAAA,MACF;AAEA,UAAI,QAAQ,kBAAkB,SAAS,OAAO,KAAK,QAAQ,cAAc,KAAK,WAAW;AACvF,aAAK,aAAa;AAChB,wBAAc,UAAU,GAAG;AAC3B,yBAAe,KAAK,KAAK;AAAA,QAC3B;AAAA,MACF;AACA,UAAI,QAAQ,eAAe,QAAQ,cAAc,IAAI,KAAK,KAAK,OAAO,GAAG;AACvE,YAAI,cAAc,IAAE,MAAM,QAAQ,cAAc,IAAI,KAAK,cAAc,IAAE,GAAG,WAAW,GAAG;AACxF,eAAK,aAAa;AAChB,0BAAc,UAAU,GAAG;AAC3B,2BAAe,KAAK,KAAK;AAAA,UAC3B;AAAA,QACF,YAAW,cAAc,IAAE,IAAI;AAC7B,eAAK,aAAa;AAChB,0BAAc,UAAU,GAAG;AAC3B,2BAAe,KAAK,KAAK;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAEA,UAAI,KAAK,WAAW,MAAM,cAAc,SAAS,GAAG;AAClD,aAAK,QAAQ,eAAe;AAC1B,kBAAQ,gBAAgB,MAAM,mBAAmB,GAAG;AAAA,QACtD;AAEA,cAAM,cAAc,QAAQ,cAAc,OAAO,CAAC,OAA8B;AAC9E,iBAAO,GAAG,cAAc,KAAK;AAAA,SAC9B;AAED,YAAI,YAAY,SAAS,GAAG;AAC1B,gBAAM,oBAAoB,cAAc,IAAI,aAAa,KAAK,SAAU,QAAQ,QAAQ;AAAA,QAC1F,WAAW,KAAK,WAAW,KAAK,QAAQ,aAAa,SAAS,KAAK,QAAQ,UAAU,SAAS,CAAC,IAAI,GAAG;AACpG,gBAAM,IAAI,MAAM,yCAAyC,KAAK,SAAS;AAAA,QACzE;AAAA,MACF;AAEA,qBAAe,UAAU,GAAG;AAC5B,sBAAgB,KAAK,KAAK;AAE1B;AAAA,IACF;AAAA,WACS,GAAP;AACA,SAAK,aAAa;AAChB,YAAM;AAAA,IACR;AAAA;AAGF,OAAK,aAAa;AAChB,kBAAc;AACd,mBAAe;AAAA,EACjB;AAEA,OAAK,cAAc;AACjB,UAAM,IAAI,MAAM,gDAAgD;AAAA,EAClE;AAEA,SAAO;AAAA,IACL;AAAA,IACA,KAAK;AAAA,IACL,MAAM;AAAA,EACR;AAAA;AAGK,IAAM,YAAY,OAAO,YAAkK;AAChM,QAAM,MAAM,QAAQ;AACpB,QAAM,YAAY,IAAI,IAAI,SAAS;AACnC,QAAM,YAAY,MAAM,mBAAkB,KAAK,EAAE,UAAU,QAAQ,UAAU,eAAe,QAAQ,cAAc,CAAC,GAAG;AACtH,MAAI,SAAS,aAAa;AACxB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,QAAM,gBAAgB,IAAI,SAAS;AACnC,QAAM,cAAc,WAAW,QAAQ,OAAO;AAC9C,QAAM,gBAAgB,QAAQ,aAAa,YAAY,QAAQ,WAAW,SAAS;AACnF,QAAM,SAAS;AAAA,IACb,YAAY,QAAQ,cAAc,CAAC;AAAA,IACnC,eAAe,QAAQ,iBAAiB,CAAC;AAAA,IACzC,SAAU,QAAQ,YAAY,aAAa,QAAQ,YAAY,OAAQ;AAAA,MACrE,WAAW,QAAQ,SAAS,aAAa,CAAC;AAAA,MAC1C,WAAW,QAAQ,SAAS,aAAa;AAAA,IAC3C,IAAI,CAAC;AAAA,IACL,UAAU,iBAAiB,CAAC;AAAA,EAC9B;AAGA,QAAM,0BAA0B,QAAQ,qBAAqB,IAAI,QAAM;AACrE,QAAI,GAAG,oBAAoB;AACzB,cAAQ,KAAK,mHAAmH;AAChI,cAAQ,uBAAuB,WAAW;AAC1C,aAAO;AAAA,IACT;AACA,WAAO;AAAA,GACR;AAED,UAAQ,QAAQ,MAAM,aAAa;AAAA,OAC9B;AAAA,IACH,YAAY,QAAQ,cAAc,UAAU,MAAM,MAAM;AAAA,IACxD,SAAS,QAAQ,WAAW,UAAU,MAAM;AAAA,IAC5C,QAAQ,QAAQ,UAAU,UAAU,MAAM,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK;AAAA,IACnE,YAAY,QAAQ,cAAc,CAAC;AAAA,IACnC,qBAAqB,2BAA2B,CAAC;AAAA,EACnD,CAAC;AAID,MAAI,QAAQ,YAAY,QAAQ,SAAS,SAAS,GAAG;AACnD,QAAI,UAAU,QAAQ;AAAA,EACxB;AAGA,MAAI,QAAQ,iBAAiB;AAC3B,QAAI,kBAAkB,QAAQ;AAAA,EAChC;AAGA,MAAI,QAAQ,cAAc;AACxB,QAAI,eAAe,QAAQ;AAAA,EAC7B;AAEA,QAAM,WAAwB;AAAA,IAC5B,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,OAAO;AAAA,EACT;AACA,QAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,QAAM,YAAY,GAAG,iBAAiB;AACtC,QAAM,cAAc,KAAK,UAAU,UAAU;AAC7C,QAAM,cAAc,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAClQ,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,YAAY,WAAW,CAAC;AACvO,cAAY,QAAQ;AACpB,QAAM,WAAW,MAAM,qBACrB,aACA,SAAS,YACT,SAAS,SACT,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,QAAM,OAA0B;AAAA,OAC3B;AAAA,IACH,WAAW,YAAY;AAAA,IACvB,SAAS,YAAY;AAAA,IACrB,cAAc,OAAO,eAAe,UAAU,KAAK;AAAA,OAChD;AAAA,EACL;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB;AAAA,IACA,KAAK;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAGK,IAAM,gBAAgB,OAAO,YAAwI;AAC1K,QAAM,MAAM,QAAQ;AACpB,QAAM,YAAY,IAAI,IAAI,SAAS;AACnC,QAAM,YAAY,MAAM,mBAAkB,KAAK,EAAE,UAAU,QAAQ,SAAS,CAAC,GAAG;AAChF,MAAI,SAAS,aAAa;AACxB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AACA,QAAM,gBAAgB,IAAI,SAAS;AACnC,QAAM,cAAc,WAAW;AAC/B,QAAM,SAAS;AAAA,IACb,YAAY,QAAQ,cAAc,SAAS;AAAA,IAC3C,aAAa;AAAA,EACf;AACA,QAAM,WAAwB;AAAA,IAC5B,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,OAAO,UAAU;AAAA,EACnB;AACA,QAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,QAAM,YAAY,GAAG,iBAAiB;AACtC,QAAM,cAAc,KAAK,UAAU,UAAU;AAC7C,QAAM,cAAc,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAClQ,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,YAAY,WAAW,CAAC;AACvO,cAAY,QAAQ;AAEpB,QAAM,WAAW,MAAM,qBACrB,aACA,SAAS,YACT,SAAS,SACT,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,QAAM,OAA0B;AAAA,OAC3B;AAAA,IACH,WAAW,YAAY;AAAA,IACvB,SAAS,YAAY;AAAA,IACrB,aAAa;AAAA,IACb,YAAY,OAAO;AAAA,EACrB;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB;AAAA,IACA,KAAK;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;;;ACndF,IAAM,WAAU;AAChB,IAAM,YAAW,OAAO,UAAU;AAE3B,IAAM,aAAY,OAAO,YAAwG;AACtI,OAAK,QAAQ,YAAY;AACvB,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAEA,MAAI,QAAQ,WAAW,QAAQ,QAAQ,aAAa,QAAQ,QAAQ,UAAU,SAAS,GAAG;AACxF,6BAAyB,QAAQ,OAAO;AAAA,EAC1C;AAEA,QAAM,gBAAgB,mBAAmB,QAAQ,MAAM;AACvD,QAAM,OAAO,QAAQ,OAAO,KAAK,GAAG;AACpC,QAAM,aAAa,OAAO,UAAU,eAAe,gBAAgB,OAAO,IAAI,SAAS;AACvF,QAAM,cAAc,WAAW,QAAQ,OAAO;AAG9C,QAAM,0BAA0B,QAAQ,qBAAqB,IAAI,QAAM;AACrE,QAAI,GAAG,oBAAoB;AACzB,cAAQ,KAAK,mHAAmH;AAChI,cAAQ,uBAAuB,WAAW;AAC1C,aAAO;AAAA,IACT;AACA,WAAO;AAAA,GACR;AAED,QAAK,QAAO,MAAM,aAAa,KAAI,SAAS,YAAY,qBAAqB,wBAAuB,CAAC;AACrG,QAAM,SAAS;AAAA,IACb,MAAM;AAAA,IACN,YAAY,QAAQ;AAAA,IACpB,UAAU,QAAQ,YAAY;AAAA,IAC9B,eAAe,QAAQ,iBAAiB,CAAC;AAAA,IACzC,UAAU,QAAQ,YAAY;AAAA,OAC1B,QAAQ,UAAU;AAAA,MACpB,SAAS,QAAQ;AAAA,IACnB,IAAI,CAAC;AAAA,IACL,aAAa;AAAA,EACf;AACA,QAAM,kBAA+B;AAAA,IACnC,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,MACV,QAAQ;AAAA,SACL;AAAA,IACL;AAAA,IACA,OAAO;AAAA,EACT;AACA,QAAM,sBAAsB,MAAM,WAAW,eAAe;AAC5D,SAAO,OAAO,MAAM,WAAW,mBAAmB;AAClD,kBAAgB,QAAQ;AACxB,QAAM,cAAc,KAAK,MAAM,KAAK,UAAU,eAAe,EAAE,WAAW,aAAa,OAAO,IAAI,CAAC;AACnG,QAAM,gBAAgB,MAAM,WAAW,WAAW;AAClD,cAAY,YAAY,KAAK;AAC7B,QAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAC5P,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,MAAM,WAAW,CAAC;AACjO,cAAY,QAAQ;AAEpB,QAAM,WAAW,MAAM,qBACrB,KAAI,aAAa,WAAW,KAAK,iBAAiB,OAAO,YAAY,MAAK,GAC1E,OAAO,YACP,OAAO,SACP,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,MAAI,UAAU,CAAC;AACf,MAAI,OAAO,SAAS;AAClB,cAAU,KAAI,OAAO,SAAS,WAAW,OAAO,QAAQ,WAAW,SAAS,KAAK,IAAG;AAAA,EACtF;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB,MAAM;AAAA,MACJ,WAAW,YAAY;AAAA,MACvB,SAAS,YAAY;AAAA,MACrB,SAAS,YAAY;AAAA,MACrB,cAAc,OAAO,eAAe,UAAU,KAAK;AAAA,SAChD;AAAA,MACH;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAGK,IAAM,qBAAoB,OAAO,KAAa,UAA2E,CAAC,MAAiE;AAChM,MAAI,QAAQ,uBAAuB,QAAQ,iBAAiB,QAAQ,YAAY;AAC9E,UAAM,IAAI,MAAM,8DAA8D;AAAA,EAChF;AACA,QAAM,gBAAgB,IAAI,IAAI,OAAK,UAAU,CAAC,CAAC;AAC/C,QAAM,WAAW,cAAc,GAAG,WAAW;AAC7C,MAAG,aAAa,WAAU;AACxB,UAAM,IAAI,MAAM,IAAI,6BAA6B;AAAA,EACnD;AACA,MAAI,MAAW,CAAC;AAChB,MAAI,MAAM;AACV,MAAI,OAA0B;AAAA,IAC5B,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,IACT,sBAAsB;AAAA,IACtB,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,eAAe,CAAC;AAAA,IAChB,aAAa;AAAA,IACb,YAAY,CAAC;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,EACZ;AACA,MAAI,OAAO;AACX,MAAI,IAAI;AAER,MAAI,cAAmB;AACvB,MAAI,eAAyC;AAC7C,MAAI,eAAoB;AACxB,MAAI,gBAA0C;AAE9C,MAAI;AACJ,WAAO,IAAI,cAAc,QAAQ;AAC/B,cAAQ,WAAW,aAAa,YAAY,OAAO,UAAU,cAAc;AAC3E,aAAO,SAAS,aAAa,UAAU,MAAM,GAAG;AAChD,UAAI,SAAS,OAAO,MAAM,IAAI,GAAG;AAC/B,cAAM,IAAI,MAAM,YAAY,2CAA2C,IAAI,KAAK;AAAA,MAClF;AACA,WAAK,YAAY;AACjB,UAAI,aAAa;AAAA,MAEjB;AACA,WAAK,UAAU;AACf,UAAI,SAAS;AACb,UAAI,YAAY,KAAK;AACnB,aAAK,UAAU;AACf,iBAAS;AACT,eAAO,OAAO,GAAG,MAAM,GAAG,EAAE,GAAG,EAAE;AACjC,aAAK,OAAO,WAAW;AACvB,aAAK,WAAW,WAAW,YAAY,KAAK;AAC5C,aAAK,aAAa,WAAW;AAC7B,aAAK,gBAAgB,WAAW,iBAAiB,CAAC;AAClD,aAAK,cAAc,KAAK,cAAc,SAAS;AAC/C,aAAK,UAAU,WAAW,WAAW,KAAK;AAC1C,aAAK,WAAW,WAAW,YAAY;AACvC,aAAK,gBAAgB,WAAW,iBAAiB,CAAC;AAElD,cAAM,WAAW;AAAA,UACf,WAAW;AAAA,UACX,aAAa,KAAK;AAAA,UAClB,YAAY,qBAAqB,YAAY,KAAK,MAAM,WAAW;AAAA,UACnE,OAAO,qBAAqB,QAAQ,KAAK,MAAM,WAAW;AAAA,QAC5D;AAEA,cAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,aAAK,uBAAuB;AAC5B,aAAK,MAAM,eAAe,KAAK,MAAM,YAAY,GAAG;AAClD,gBAAM,IAAI,MAAM,SAAS,KAAK,wCAAwC,eAAe;AAAA,QACvF;AAGA,cAAM,cAAc,qBAAqB,UAAU,aAAa,KAAK,IAAI;AACzE,cAAM,gBAAgB,MAAM,WAAW,WAAW;AAClD,cAAM,WAAW,MAAM,qBAAqB,KAAI,aAAa,WAAW,KAAK,iBAAiB,MAAK,GAAG,KAAK,YAAY,KAAK,SAAS,OAAO,QAAQ,QAAQ;AAC5J,aAAK,UAAU;AACb,gBAAM,IAAI,MAAM,WAAW,KAAK,6CAA6C;AAAA,QAC/E;AAAA,MACF,OAAO;AAEL,cAAM,UAAU,OAAO,GAAG,MAAM,GAAG,EAAE,GAAG,EAAE;AAC1C,aAAK,KAAK,YAAY,YAAY,MAAM;AACtC,gBAAM,IAAI,MAAM,0CAA0C;AAAA,QAC5D,WAAW,YAAY,MAAM;AAC3B,iBAAO;AAAA,QACT;AACA,cAAM,OAAO,KAAK,cAAc,WAAW,aAAa,KAAK;AAC7D,cAAM,WAAW,MAAM,qBAAqB,cAAc,IAAI,MAAM,KAAK,SAAS,OAAO,QAAQ,QAAQ;AACzG,aAAK,UAAU;AACb,gBAAM,IAAI,MAAM,WAAW,KAAK,6CAA6C;AAAA,QAC/E;AAEA,aAAK,eAAe,GAAG,IAAE,KAAK,aAAa,SAAS,GAAG;AACrD,gBAAM,IAAI,MAAM,yBAAyB,KAAK,YAAY;AAAA,QAC5D;AAEA,YAAI,KAAK,aAAa;AACpB,gBAAM,qBACJ,WAAW,cAAc,CAAC,GAC1B,KAAK,iBAAiB,CAAC,CACzB;AAAA,QACF;AAEA,YAAI,WAAW,YAAY;AACzB,eAAK,aAAa,WAAW;AAAA,QAC/B;AACA,YAAI,WAAW,gBAAgB,MAAM;AACnC,eAAK,cAAc;AAAA,QACrB;AACA,YAAI,WAAW,eAAe;AAC5B,eAAK,gBAAgB,WAAW;AAChC,eAAK,cAAc;AAAA,QACrB,OAAO;AACL,eAAK,gBAAgB,CAAC;AACtB,eAAK,cAAc;AAAA;AAErB,YAAI,aAAa,YAAY;AAC3B,eAAK,UAAU,WAAW;AAAA,QAC5B,WAAW,WAAW,WAAW;AAC/B,eAAK,UAAU;AAAA,YACb,WAAW,WAAW;AAAA,YACtB,WAAW,WAAW,oBAAoB,WAAW,UAAU,OAAO,SAAS;AAAA,UACjF;AAAA,QACF;AACA,YAAI,cAAc,YAAY;AAC5B,eAAK,WAAW,WAAW,YAAY;AAAA,QACzC;AAAA;AAGF,YAAM,UAAU,MAAM;AACtB,YAAM,IAAI;AAGV,UAAI,UAAU,IAAI,WAAW,CAAC;AAC9B,YAAM,UAAU,WAAW,GAAG;AAE9B,WAAK,IAAI,QAAQ,KAAK,CAAC,MAAW,EAAE,OAAO,QAAQ,GAAG;AACpD,YAAI,QAAQ,KAAK;AAAA,UACf,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,iBAAiB;AAAA,QACnB,CAAC;AAAA,MACH;AAEA,WAAK,IAAI,QAAQ,KAAK,CAAC,MAAW,EAAE,OAAO,QAAQ,GAAG;AACpD,YAAI,QAAQ,KAAK;AAAA,UACf,YAAY;AAAA,UACZ,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,iBAAiB,GAAG;AAAA,QACtB,CAAC;AAAA,MACH;AAEA,UAAI,QAAQ,sBAAsB,uBAAuB,KAAK,QAAQ,kBAAkB,GAAG;AACzF,aAAK,aAAa;AAChB,wBAAc,UAAU,GAAG;AAC3B,yBAAe,KAAK,KAAK;AAAA,QAC3B;AAAA,MACF;AAEA,UAAI,QAAQ,kBAAkB,SAAS,OAAO,KAAK,QAAQ,cAAc,KAAK,WAAW;AACvF,aAAK,aAAa;AAChB,wBAAc,UAAU,GAAG;AAC3B,yBAAe,KAAK,KAAK;AAAA,QAC3B;AAAA,MACF;AACA,UAAI,QAAQ,eAAe,QAAQ,cAAc,IAAI,KAAK,KAAK,OAAO,GAAG;AACvE,YAAI,cAAc,IAAE,MAAM,QAAQ,cAAc,IAAI,KAAK,cAAc,IAAE,GAAG,WAAW,GAAG;AACxF,eAAK,aAAa;AAChB,0BAAc,UAAU,GAAG;AAC3B,2BAAe,KAAK,KAAK;AAAA,UAC3B;AAAA,QACF,YAAW,cAAc,IAAE,IAAI;AAC7B,eAAK,aAAa;AAChB,0BAAc,UAAU,GAAG;AAC3B,2BAAe,KAAK,KAAK;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAEA,UAAI,KAAK,WAAW,MAAM,cAAc,SAAS,GAAG;AAClD,aAAK,QAAQ,eAAe;AAC1B,kBAAQ,gBAAgB,MAAM,mBAAmB,GAAG;AAAA,QACtD;AAEA,cAAM,cAAc,QAAQ,cAAc,OAAO,CAAC,OAA8B;AAC9E,iBAAO,GAAG,cAAc,KAAK;AAAA,SAC9B;AAED,YAAI,YAAY,SAAS,GAAG;AAC1B,gBAAM,oBAAoB,cAAc,IAAI,aAAa,KAAK,SAAU,QAAQ,QAAQ;AAAA,QAC1F,WAAW,KAAK,WAAW,KAAK,QAAQ,aAAa,SAAS,KAAK,QAAQ,UAAU,SAAS,CAAC,IAAI,GAAG;AACpG,gBAAM,IAAI,MAAM,yCAAyC,KAAK,SAAS;AAAA,QACzE;AAAA,MACF;AAEA,qBAAe,UAAU,GAAG;AAC5B,sBAAgB,KAAK,KAAK;AAE1B;AAAA,IACF;AAAA,WACS,GAAP;AACA,SAAK,aAAa;AAChB,YAAM;AAAA,IACR;AAAA;AAGF,OAAK,iBAAiB,eAAe;AACnC,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACtC;AAEA,QAAM,WAAW,eAAe;AAChC,QAAM,YAAY,gBAAgB;AAClC,YAAU,kBAAkB,cAAc;AAC1C,MAAI,UAAU,SAAS;AACrB,cAAU,QAAQ,YAAY,UAAU,QAAQ,WAAW,SAAS,KAAK;AAAA,EAC3E;AAEA,SAAO,EAAC,KAAK,SAAS,IAAI,KAAK,UAAU,MAAM,UAAS;AAAA;AAGnD,IAAM,aAAY,OAAO,YAAkK;AAChM,QAAM,MAAM,QAAQ;AACpB,QAAM,YAAY,IAAI,IAAI,SAAS;AACnC,QAAM,YAAY,MAAM,mBAAkB,KAAK,EAAE,UAAU,QAAQ,UAAU,eAAe,QAAQ,cAAc,CAAC,GAAG;AACtH,MAAI,SAAS,aAAa;AACxB,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AACA,QAAM,gBAAgB,IAAI,SAAS;AACnC,QAAM,cAAc,WAAW,QAAQ,OAAO;AAC9C,QAAM,gBAAgB,QAAQ,aAAa,YAAY,QAAQ,WAAW,SAAS;AACnF,QAAM,SAAS;AAAA,IACb,YAAY,QAAQ,cAAc,CAAC;AAAA,IACnC,eAAe,QAAQ,iBAAiB,CAAC;AAAA,OACrC,QAAQ,YAAY,OAAO;AAAA,MAC7B,SAAS,CAAC;AAAA,IACZ,IAAI,QAAQ,YAAY,YAAY;AAAA,MAClC,WAAW,QAAQ,SAAS,aAAa,CAAC;AAAA,MAC1C,WAAW,QAAQ,SAAS,aAAa;AAAA,IAC3C,IAAI,CAAC;AAAA,IACL,UAAU,iBAAiB;AAAA,EAC7B;AAGA,QAAM,0BAA0B,QAAQ,qBAAqB,IAAI,QAAM;AACrE,QAAI,GAAG,oBAAoB;AACzB,cAAQ,KAAK,mHAAmH;AAChI,cAAQ,uBAAuB,WAAW;AAC1C,aAAO;AAAA,IACT;AACA,WAAO;AAAA,GACR;AAED,UAAQ,QAAQ,MAAM,aAAa;AAAA,OAC9B;AAAA,IACH,YAAY,QAAQ,cAAc,UAAU,MAAM,MAAM;AAAA,IACxD,SAAS,QAAQ,WAAW,UAAU,MAAM;AAAA,IAC5C,QAAQ,QAAQ,UAAU,UAAU,MAAM,IAAI,MAAM,GAAG,EAAE,GAAG,EAAE,KAAK;AAAA,IACnE,YAAY,QAAQ,cAAc,CAAC;AAAA,IACnC,qBAAqB,2BAA2B,CAAC;AAAA,EACnD,CAAC;AAGD,MAAI,QAAQ,YAAY,QAAQ,SAAS,SAAS,GAAG;AACnD,QAAI,UAAU,QAAQ;AAAA,EACxB;AAGA,MAAI,QAAQ,iBAAiB;AAC3B,QAAI,kBAAkB,QAAQ;AAAA,EAChC;AAGA,MAAI,QAAQ,cAAc;AACxB,QAAI,eAAe,QAAQ;AAAA,EAC7B;AAEA,QAAM,WAAwB;AAAA,IAC5B,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,OAAO;AAAA,EACT;AACA,QAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,QAAM,YAAY,GAAG,iBAAiB;AACtC,QAAM,cAAc,KAAK,UAAU,UAAU;AAC7C,QAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAC5P,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,MAAM,WAAW,CAAC;AACjO,cAAY,QAAQ;AAEpB,QAAM,WAAW,MAAM,qBACrB,aACA,SAAS,YACT,SAAS,SACT,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,QAAM,OAA0B;AAAA,OAC3B;AAAA,IACH,WAAW,YAAY;AAAA,IACvB,SAAS,YAAY;AAAA,IACrB,cAAc,OAAO,eAAe,UAAU,KAAK;AAAA,OAChD;AAAA,EACL;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB;AAAA,IACA,KAAK;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAGK,IAAM,iBAAgB,OAAO,YAAwI;AAC1K,QAAM,MAAM,QAAQ;AACpB,QAAM,YAAY,IAAI,IAAI,SAAS;AACnC,QAAM,YAAY,MAAM,mBAAkB,KAAK,EAAE,UAAU,QAAQ,SAAS,CAAC,GAAG;AAChF,MAAI,SAAS,aAAa;AACxB,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AACA,QAAM,gBAAgB,IAAI,SAAS;AACnC,QAAM,cAAc,WAAW;AAC/B,QAAM,SAAS;AAAA,IACb,YAAY,QAAQ,cAAc,SAAS;AAAA,IAC3C,aAAa;AAAA,EACf;AACA,QAAM,WAAwB;AAAA,IAC5B,WAAW;AAAA,IACX,aAAa;AAAA,IACb,YAAY;AAAA,IACZ,OAAO,UAAU;AAAA,EACnB;AACA,QAAM,eAAe,MAAM,WAAW,QAAQ;AAC9C,QAAM,YAAY,GAAG,iBAAiB;AACtC,QAAM,cAAc,KAAK,UAAU,UAAU;AAC7C,QAAM,QAAQ,MAAM,QAAQ,OAAO,KAAK,EAAE,UAAU,aAAa,OAAO,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,kBAAkB,EAAE,CAAC;AAC5P,MAAI,YAAY,CAAC,EAAE,MAAM,sBAAsB,aAAa,kBAAkB,oBAAoB,QAAQ,OAAO,wBAAwB,GAAG,SAAS,aAAa,cAAc,mBAAmB,YAAY,MAAM,WAAW,CAAC;AACjO,cAAY,QAAQ;AAEpB,QAAM,WAAW,MAAM,qBACrB,aACA,SAAS,YACT,SAAS,SACT,MACA,QAAQ,QACV;AACA,OAAK,UAAU;AACb,UAAM,IAAI,MAAM,WAAW,YAAY,uBAAuB;AAAA,EAChE;AAEA,QAAM,OAA0B;AAAA,OAC3B;AAAA,IACH,WAAW,YAAY;AAAA,IACvB,SAAS,YAAY;AAAA,IACrB,aAAa;AAAA,IACb,YAAY,OAAO;AAAA,EACrB;AAEA,SAAO;AAAA,IACL,KAAK,YAAY,MAAM;AAAA,IACvB,KAAK,YAAY;AAAA,IACjB;AAAA,IACA,KAAK;AAAA,MACH,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;;;ACldF,IAAM,iBAAiB;AAEvB,SAAS,yBAAyB,CAAC,QAAyB;AAC1D,OAAK;AAAQ,WAAO;AACpB,QAAM,QAAQ,OAAO,MAAM,wBAAwB;AACnD,SAAO,QAAQ,MAAM,KAAK;AAAA;AAG5B,SAAS,sBAAsB,CAAC,KAAqB;AACnD,MAAI,OAAO,IAAI,SAAS,KAAK,IAAI,GAAG,cAAc,IAAI,GAAG,WAAW,QAAQ;AAC1E,WAAO,0BAA0B,IAAI,GAAG,WAAW,MAAM;AAAA,EAC3D;AACA,SAAO;AAAA;AAGT,SAAS,0BAA0B,CAAC,SAAsB;AACxD,MAAI,WAAW,QAAQ,QAAQ;AAC7B,WAAO,0BAA0B,QAAQ,MAAM;AAAA,EACjD;AACA,SAAO;AAAA;AAGF,IAAM,aAAY,OAAO,YAAgC;AAC9D,QAAM,UAAU,2BAA2B,OAAO;AAClD,QAAM,SAAS,YAAY,QACvB,MAAW,WAAU,OAAO,IAC5B,MAAS,UAAU,OAAO;AAC9B,oBAAkB,OAAO,KAAK,OAAO,GAAG;AACxC,SAAO;AAAA;AAGF,IAAM,aAAa,OAAO,KAAa,UAA0F,CAAC,MAAM;AAC7I,QAAM,aAAa,MAAM,cAAc;AACvC,QAAM,aAAa,WAAW,SAAS,GAAG;AAC1C,MAAI,OAA2B;AAC/B,QAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,MAAI,SAAS,SAAS,KAAK,SAAS,OAAO,SAAS,SAAS,OAAO,SAAS;AAC3E,WAAO,SAAS;AAAA,EAClB;AACA,MAAI;AACF,UAAM,MAAM,MAAM,uBAAuB,KAAK,UAAU;AACxD,UAAM,UAAU,uBAAuB,GAAG;AAC1C,UAAM,eAAe,KAAK,SAAS,KAAK;AACxC,QAAI,YAAY,OAAO;AACrB,YAAM,UAAS,MAAW,mBAAkB,KAAK,YAAY;AAC7D,wBAAkB,QAAO,KAAK,GAAG;AACjC,aAAO,KAAK,SAAQ,WAAW;AAAA,IACjC;AACA,UAAM,SAAS,MAAS,mBAAkB,KAAK,YAAY;AAC3D,sBAAkB,OAAO,KAAK,GAAG;AACjC,WAAO,KAAK,QAAQ,WAAW;AAAA,WACxB,GAAP;AACA,QAAI,YAAY;AAChB,UAAM,UAAU,aAAa,QAAQ,EAAE,UAAU,OAAO,CAAC;AACzD,QAAI,aAAa,KAAK,OAAO,KAAK,MAAM,KAAK,OAAO,GAAG;AACrD,kBAAY;AAAA,IACd;AACA,WAAO;AAAA,MACL;AAAA,MACA,KAAK;AAAA,MACL,MAAM;AAAA,QACJ,OAAO;AAAA,QACP,gBAAgB;AAAA,UACd,MAAM,cAAc,aAChB,wCACA;AAAA,UACJ,OAAO,cAAc,aACjB,2CACA;AAAA,UACJ,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA;AAAA;AAIG,IAAM,oBAAoB,OAAO,KAAa,UAA2E,CAAC,MAAM;AACrI,QAAM,UAAU,uBAAuB,GAAG;AAC1C,MAAI,YAAY,OAAO;AACrB,UAAM,UAAS,MAAW,mBAAkB,KAAK,OAAO;AACxD,sBAAkB,QAAO,KAAK,GAAG;AACjC,WAAO;AAAA,EACT;AACA,QAAM,SAAS,MAAS,mBAAkB,KAAK,OAAO;AACtD,oBAAkB,OAAO,KAAK,GAAG;AACjC,SAAO;AAAA;AAGF,IAAM,aAAY,OAAO,YAA0F;AACxH,QAAM,UAAU,QAAQ,MAAM,uBAAuB,QAAQ,GAAG,IAAI,2BAA2B,OAAO;AACtG,QAAM,SAAS,YAAY,QACvB,MAAW,WAAU,OAAO,IAC5B,MAAS,UAAU,OAAO;AAC9B,oBAAkB,OAAO,KAAK,OAAO,GAAG;AACxC,SAAO;AAAA;AAGF,IAAM,iBAAgB,OAAO,YAAgE;AAClG,QAAM,UAAU,QAAQ,MAAM,uBAAuB,QAAQ,GAAG,IAAI,2BAA2B,OAAO;AACtG,QAAM,SAAS,YAAY,QACvB,MAAW,eAAc,OAAO,IAChC,MAAS,cAAc,OAAO;AAClC,oBAAkB,OAAO,KAAK,OAAO,GAAG;AACxC,SAAO;AAAA;;AC5GT;AAUO,IAAM,cAAc,CAAC,yBAAsC;AAChE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,aAAa;AAAA,IACb,oBAAoB;AAAA,IACpB,SAAS,WAAW;AAAA,IACpB,cAAc;AAAA,EAChB;AAAA;AASK,IAAM,wBAAwB,OAAO,UAAe,UAAoC;AAC7F,QAAM,WAAW,MAAM,WAAW,uCAAa,QAAQ,CAAC;AACxD,QAAM,YAAY,MAAM,WAAW,uCAAa,KAAK,CAAC;AACtD,SAAO,cAAc,WAAW,QAAQ;AAAA;AAOnC;AAAA,MAAe,eAA2C;AAAA,EACrD;AAAA,EACA;AAAA,EAEV,WAAW,CAAC,SAAwB;AAClC,QAAI,QAAQ,oBAAoB;AAC9B,WAAK,qBAAqB,QAAQ;AAAA,IACpC;AACA,SAAK,cAAc,QAAQ,gBAAgB,YAAY,QAAQ,cAAc;AAAA;AAAA,EAsB/E,uBAAuB,GAAW;AAChC,SAAK,KAAK,oBAAoB;AAC5B,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,WAAO,KAAK,cACR,WAAW,KAAK,mBAAmB,sBAAsB,KAAK,mBAAmB,uBACjF,KAAK,mBAAmB,MAAM;AAAA;AAEtC;AAQO,IAAM,uBAAuB,CAAC,QAAgB,yBAAiC;AACpF,SAAO,OAAO,QAAa;AACzB,QAAI;AACF,YAAM,QAAQ,YAAY,oBAAoB;AAC9C,YAAM,SAAS,MAAM,OAAO,KAAK,EAAE,UAAU,KAAK,MAAM,CAAC;AAEzD,YAAM,aAAa,OAAO;AAC1B,aAAO,KAAK,KAAK,MAAM;AAAA,aAChB,GAAP;AACA,cAAQ,MAAM,CAAC;AACf,YAAM,IAAI,MAAM,6BAA6B,EAAE,WAAW,GAAG;AAAA;AAAA;AAAA;AAQ5D,IAAM,eAAe,CAAC,IAAwB,YAAqB,SAAS;AACjF,UAAQ,KAAK,mGAAmG;AAEhH,SAAO,OAAO,QAAa;AACzB,QAAI;AACF,YAAM,uBAAuB,YACzB,WAAW,GAAG,sBAAsB,GAAG,uBACvC,GAAG,MAAM;AAEb,YAAM,QAAQ,YAAY,oBAAoB;AAI9C,YAAM,IAAI,MAAM,6FAA6F;AAAA,aAEtG,GAAP;AACA,cAAQ,MAAM,CAAC;AACf,YAAM,IAAI,MAAM,6BAA6B,EAAE,WAAW,GAAG;AAAA;AAAA;AAAA;",
+  "debugId": "FF5C91BE6550EBA464756E2164756E21",
   "names": []
 }
